"""
üé® ANIVEST DESKTOP - –¶–í–ï–¢–û–í–ê–Ø –°–•–ï–ú–ê –ò –°–¢–ò–õ–ò
==========================================
–¢–µ–º–Ω–∞—è —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ-—Ä–æ–∑–æ–≤–∞—è —Ç–µ–º–∞ –∏–∑ Flask —Å–∞–π—Ç–∞
"""

import flet as ft
from dataclasses import dataclass
from typing import Dict, Any

# ===== –û–°–ù–û–í–ù–ê–Ø –¶–í–ï–¢–û–í–ê–Ø –ü–ê–õ–ò–¢–†–ê =====

@dataclass
class AnivesetColors:
    """–¶–≤–µ—Ç–∞ Anivest (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–∑ Flask —Å–∞–π—Ç–∞)"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞
    primary: str = "#8B5CF6"           # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
    primary_dark: str = "#7C3AED"      # –¢–µ–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π  
    primary_light: str = "#A78BFA"     # –°–≤–µ—Ç–ª–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    secondary: str = "#EC4899"         # –†–æ–∑–æ–≤—ã–π
    accent: str = "#F59E0B"            # –Ø–Ω—Ç–∞—Ä–Ω—ã–π
    success: str = "#10B981"           # –ó–µ–ª–µ–Ω—ã–π
    
    # –§–æ–Ω—ã
    background: str = "#0F0F23"        # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π (–æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω)
    surface: str = "#1A1B3A"           # –°–∏–Ω–∏–π (–∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø–∞–Ω–µ–ª–∏)
    surface_light: str = "#252550"     # –°–≤–µ—Ç–ª–µ–µ —Å–∏–Ω–∏–π
    card: str = "#2D2D5F"              # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π (–∫–∞—Ä—Ç–æ—á–∫–∏)
    card_hover: str = "#363670"        # Hover –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    hover: str = "#333366"             # Hover —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    border: str = "#404080"            # –ì—Ä–∞–Ω–∏—Ü—ã
    border_light: str = "#50508080"    # –°–≤–µ—Ç–ª—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
    
    # –¢–µ–∫—Å—Ç
    text_primary: str = "#FFFFFF"      # –ë–µ–ª—ã–π (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç)
    text_secondary: str = "#E2E8F0"    # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π (–≤—Ç–æ—Ä–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç)
    text_muted: str = "#94A3B8"        # –°–µ—Ä—ã–π (–ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)
    
    # –¢–µ–Ω–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
    shadow: str = "#00000060"          # –¢–µ–Ω—å (60% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏)
    
    # –°—Ç–∞—Ç—É—Å—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    error: str = "#EF4444"             # –ö—Ä–∞—Å–Ω—ã–π (–æ—à–∏–±–∫–∏)
    warning: str = "#F59E0B"           # –ñ–µ–ª—Ç—ã–π (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)
    info: str = "#3B82F6"              # –°–∏–Ω–∏–π (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    rating_excellent: str = "#10B981"  # –ó–µ–ª–µ–Ω—ã–π (9-10)
    rating_good: str = "#F59E0B"       # –Ø–Ω—Ç–∞—Ä–Ω—ã–π (7-8)
    rating_average: str = "#EF4444"    # –ö—Ä–∞—Å–Ω—ã–π (5-6)
    rating_poor: str = "#6B7280"       # –°–µ—Ä—ã–π (1-4)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ü–≤–µ—Ç–æ–≤
colors = AnivesetColors()

# ===== –ò–ö–û–ù–ö–ò =====

class AnivesetIcons:
    """–ù–∞–±–æ—Ä –∏–∫–æ–Ω–æ–∫ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    home = ft.icons.HOME
    catalog = ft.icons.MOVIE
    favorites = ft.icons.FAVORITE
    my_list = ft.icons.LIST
    downloads = ft.icons.DOWNLOAD
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    person = ft.icons.PERSON
    settings = ft.icons.SETTINGS
    logout = ft.icons.LOGOUT
    login = ft.icons.LOGIN
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    play_circle = ft.icons.PLAY_CIRCLE
    pause_circle = ft.icons.PAUSE_CIRCLE
    stop = ft.icons.STOP
    next_track = ft.icons.SKIP_NEXT
    prev_track = ft.icons.SKIP_PREVIOUS
    
    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    search = ft.icons.SEARCH
    close = ft.icons.CLOSE
    menu = ft.icons.MENU
    more_vert = ft.icons.MORE_VERT
    filter_list = ft.icons.FILTER_LIST
    
    # –°—Ç–∞—Ç—É—Å—ã
    star = ft.icons.STAR
    star_border = ft.icons.STAR_BORDER
    trending_up = ft.icons.TRENDING_UP
    info = ft.icons.INFO
    check_circle = ft.icons.CHECK_CIRCLE
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–æ–π
    dark_mode = ft.icons.DARK_MODE
    light_mode = ft.icons.LIGHT_MODE
    
    # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ
    comment = ft.icons.COMMENT
    thumb_up = ft.icons.THUMB_UP
    thumb_down = ft.icons.THUMB_DOWN
    share = ft.icons.SHARE

icons = AnivesetIcons()

# ===== –†–ê–ó–ú–ï–†–´ –ò –û–¢–°–¢–£–ü–´ =====

class AnivesetSpacing:
    """–†–∞–∑–º–µ—Ä—ã –∏ –æ—Ç—Å—Ç—É–ø—ã"""
    
    # –ë–∞–∑–æ–≤—ã–µ –æ—Ç—Å—Ç—É–ø—ã
    xs = 4
    sm = 8
    md = 16
    lg = 24
    xl = 32
    xxl = 48
    
    # –†–∞–¥–∏—É—Å—ã —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è
    border_radius_sm = 8
    border_radius_md = 12
    border_radius_lg = 16
    border_radius_xl = 20
    
    # –†–∞–∑–º–µ—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    sidebar_width = 180
    header_height = 60
    card_height = 280
    button_height = 40
    
    # –†–∞–∑–º–µ—Ä—ã –∏–∫–æ–Ω–æ–∫
    icon_sm = 16
    icon_md = 20
    icon_lg = 24
    icon_xl = 32

spacing = AnivesetSpacing()

# ===== –¢–ò–ü–û–ì–†–ê–§–ò–ö–ê =====

class AnivesetTypography:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–µ–∫—Å—Ç–∞"""
    
    # –†–∞–∑–º–µ—Ä—ã —à—Ä–∏—Ñ—Ç–æ–≤
    text_xs = 11
    text_sm = 13
    text_md = 14
    text_lg = 16
    text_xl = 18
    text_2xl = 24
    text_3xl = 30
    text_4xl = 36
    
    # –í–µ—Å–∞ —à—Ä–∏—Ñ—Ç–æ–≤
    weight_normal = ft.FontWeight.NORMAL
    weight_medium = ft.FontWeight.W_500
    weight_semibold = ft.FontWeight.W_600
    weight_bold = ft.FontWeight.BOLD
    
    # –°–µ–º–µ–π—Å—Ç–≤–∞ —à—Ä–∏—Ñ—Ç–æ–≤
    font_family = "Roboto"  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç

typography = AnivesetTypography()

# ===== –¢–ï–ú–´ FLET =====

def create_anivest_theme() -> ft.Theme:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º—ã Flet —Å —Ü–≤–µ—Ç–∞–º–∏ Anivest"""
    
    return ft.Theme(
        color_scheme=ft.ColorScheme(
            primary=colors.primary,
            secondary=colors.secondary,
            background=colors.background,
            surface=colors.surface,
            error=colors.error,
            on_primary=colors.text_primary,
            on_secondary=colors.text_primary,
            on_background=colors.text_secondary,
            on_surface=colors.text_secondary,
            on_error=colors.text_primary,
        ),
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
        font_family=typography.font_family
    )

# ===== –°–¢–ò–õ–ò –ö–û–ú–ü–û–ù–ï–ù–¢–û–í =====

def get_card_style() -> Dict[str, Any]:
    """–°—Ç–∏–ª—å –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∞–Ω–∏–º–µ"""
    return {
        "bgcolor": colors.card,
        "border_radius": spacing.border_radius_lg,
        "shadow": ft.BoxShadow(
            spread_radius=0,
            blur_radius=20,
            color=colors.shadow,
            offset=ft.Offset(0, 8)
        )
    }

def get_button_style(variant: str = "primary") -> Dict[str, Any]:
    """–°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫"""
    
    styles = {
        "primary": {
            "bgcolor": colors.primary,
            "color": colors.text_primary,
            "border_radius": spacing.border_radius_md
        },
        "secondary": {
            "bgcolor": colors.surface,
            "color": colors.text_secondary,
            "border_radius": spacing.border_radius_md,
            "border": ft.border.all(1, colors.border)
        },
        "ghost": {
            "bgcolor": "transparent",
            "color": colors.text_muted,
            "border_radius": spacing.border_radius_md
        }
    }
    
    return styles.get(variant, styles["primary"])

def get_input_style() -> Dict[str, Any]:
    """–°—Ç–∏–ª—å –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞"""
    return {
        "bgcolor": colors.surface,
        "border_color": colors.border,
        "focused_border_color": colors.primary,
        "color": colors.text_primary,
        "border_radius": spacing.border_radius_md
    }

def get_sidebar_button_style(is_active: bool = False) -> Dict[str, Any]:
    """–°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–∞–π–¥–±–∞—Ä–∞"""
    return {
        "bgcolor": colors.primary if is_active else "transparent",
        "color": colors.text_primary if is_active else colors.text_muted,
        "border_radius": spacing.border_radius_md,
        "padding": ft.padding.symmetric(
            horizontal=spacing.md, 
            vertical=spacing.sm
        )
    }

# ===== –ê–ù–ò–ú–ê–¶–ò–ò =====

class AnivesetAnimations:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–π"""
    
    # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    duration_fast = 150      # –ë—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
    duration_normal = 250    # –û–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
    duration_slow = 400      # –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
    
    # –ö—Ä–∏–≤—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    ease_in = ft.AnimationCurve.EASE_IN
    ease_out = ft.AnimationCurve.EASE_OUT
    ease_in_out = ft.AnimationCurve.EASE_IN_OUT

animations = AnivesetAnimations()

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

def get_rating_color(rating: float) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    if rating >= 9.0:
        return colors.rating_excellent
    elif rating >= 7.0:
        return colors.rating_good
    elif rating >= 5.0:
        return colors.rating_average
    else:
        return colors.rating_poor

def get_status_color(status: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∏–º–µ"""
    status_colors = {
        "released": colors.success,
        "ongoing": colors.info,
        "anons": colors.warning
    }
    return status_colors.get(status.lower(), colors.text_muted)

def create_gradient_container(start_color: str, end_color: str) -> ft.Container:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º"""
    return ft.Container(
        gradient=ft.LinearGradient(
            begin=ft.alignment.top_left,
            end=ft.alignment.bottom_right,
            colors=[start_color, end_color]
        )
    )

# ===== –≠–ö–°–ü–û–†–¢ =====

__all__ = [
    "colors", "icons", "spacing", "typography", "animations",
    "create_anivest_theme", "get_card_style", "get_button_style",
    "get_input_style", "get_sidebar_button_style", "get_rating_color",
    "get_status_color", "create_gradient_container", "AnivesetColors",
    "AnivesetIcons", "AnivesetSpacing", "AnivesetTypography",
    "AnivesetAnimations"
]