"""
üöÄ ANIVEST DESKTOP - –ì–õ–ê–í–ù–´–ô –ö–õ–ê–°–° –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
===========================================
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
"""

import flet as ft
import asyncio
import logging
from typing import Dict, Any, Optional, List

from config.theme import colors, icons, spacing, typography, create_anivest_theme
from config.settings import APP_NAME, APP_VERSION, WINDOW_CONFIG, USER_SETTINGS, HOTKEYS
from core.database.database import db_manager
from core.api.anime_service import anime_service

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from .components.anime_card import AnimeCard, LargeAnimeCard, CompactAnimeCard
from .components.sidebar import AnivesetSidebar
from .components.search_bar import AnivesetSearchBar

logger = logging.getLogger(__name__)

class AnivesetApp:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Anivest Desktop"""
    
    def __init__(self):
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.current_page = "home"
        self.current_user = None
        self.is_loading = False
        self.search_query = ""
        self.search_filters = {}
        
        # –î–∞–Ω–Ω—ã–µ
        self.popular_anime = []
        self.seasonal_anime = []
        self.search_results = []
        self.user_favorites = []
        self.watch_history = []
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.page = None
        self.sidebar = None
        self.main_content = None
        self.search_bar = None
        self.loading_overlay = None
        
        # –ö–µ—à —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        self.page_cache = {}
        
    async def main(self, page: ft.Page):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.page = page
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        await self._setup_window()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        await self._setup_theme()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        await self._initialize_data()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ UI
        await self._create_ui()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        await self._setup_hotkeys()
        
        logger.info(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {APP_NAME} v{APP_VERSION} –∑–∞–ø—É—â–µ–Ω–æ")
    
    async def _setup_window(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.page.title = f"{APP_NAME} v{APP_VERSION}"
        self.page.theme_mode = ft.ThemeMode.DARK
        self.page.bgcolor = colors.background
        self.page.padding = 0
        self.page.spacing = 0
        
        # –†–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
        try:
            # –ù–æ–≤—ã–π API
            self.page.window.width = WINDOW_CONFIG["default_width"]
            self.page.window.height = WINDOW_CONFIG["default_height"]
            self.page.window.min_width = WINDOW_CONFIG["min_width"]
            self.page.window.min_height = WINDOW_CONFIG["min_height"]
            self.page.window.max_width = WINDOW_CONFIG["max_width"]
            self.page.window.max_height = WINDOW_CONFIG["max_height"]
            self.page.window.resizable = WINDOW_CONFIG["resizable"]
        except AttributeError:
            try:
                # –°—Ç–∞—Ä—ã–π API
                self.page.window_width = WINDOW_CONFIG["default_width"]
                self.page.window_height = WINDOW_CONFIG["default_height"]
                self.page.window_min_width = WINDOW_CONFIG["min_width"]
                self.page.window_min_height = WINDOW_CONFIG["min_height"]
                self.page.window_max_width = WINDOW_CONFIG["max_width"]
                self.page.window_max_height = WINDOW_CONFIG["max_height"]
                self.page.window_resizable = WINDOW_CONFIG["resizable"]
            except:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞")
    
    async def _setup_theme(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã"""
        try:
            self.page.theme = create_anivest_theme()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é —Ç–µ–º—É: {e}")
    
    async def _initialize_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            await self._show_loading("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω–∏–º–µ
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ...")
            self.popular_anime = await anime_service.get_popular_anime(24)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∑–æ–Ω–Ω—ã–µ –∞–Ω–∏–º–µ
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–∑–æ–Ω–Ω—ã—Ö –∞–Ω–∏–º–µ...")
            self.seasonal_anime = await anime_service.get_seasonal_anime(limit=12)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
            if self.current_user:
                await self._load_user_data()
            
            await self._hide_loading()
            
            logger.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(self.popular_anime)} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö, {len(self.seasonal_anime)} —Å–µ–∑–æ–Ω–Ω—ã—Ö")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await self._hide_loading()
            await self._show_error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", str(e))
    
    async def _load_user_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not self.current_user:
                return
            
            user_id = self.current_user['id']
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            self.user_favorites = db_manager.get_user_favorites(user_id)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            self.watch_history = db_manager.get_user_watch_history(user_id, limit=20)
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(self.user_favorites)} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö, {len(self.watch_history)} –≤ –∏—Å—Ç–æ—Ä–∏–∏")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    async def _create_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –°–∞–π–¥–±–∞—Ä
        self.sidebar = AnivesetSidebar(
            current_page=self.current_page,
            on_navigate=self._on_navigate,
            current_user=self.current_user,
            width=USER_SETTINGS.get("sidebar_width", 180)
        )
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        self.main_content = ft.Container(
            content=await self._create_page_content(),
            expand=True,
            bgcolor=colors.background,
        )
        
        # Overlay –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        self.loading_overlay = ft.Container(
            content=ft.Column(
                controls=[
                    ft.ProgressRing(width=48, height=48, color=colors.primary),
                    ft.Text(
                        "–ó–∞–≥—Ä—É–∑–∫–∞...",
                        size=typography.text_lg,
                        color=colors.text_primary,
                        text_align=ft.TextAlign.CENTER,
                    )
                ],
                spacing=spacing.lg,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                alignment=ft.MainAxisAlignment.CENTER,
            ),
            alignment=ft.alignment.center,
            bgcolor=colors.background + "CC",  # 80% –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            visible=False,
        )
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_layout = ft.Stack(
            controls=[
                # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                ft.Row(
                    controls=[
                        self.sidebar,
                        ft.VerticalDivider(width=2, color=colors.border),
                        self.main_content,
                    ],
                    spacing=0,
                    expand=True,
                ),
                
                # Overlay –∑–∞–≥—Ä—É–∑–∫–∏
                self.loading_overlay,
            ],
            expand=True,
        )
        
        self.page.add(main_layout)
        await self.page.update_async()
    
    async def _create_page_content(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if self.current_page in self.page_cache:
            logger.debug(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –∫–µ—à–∞: {self.current_page}")
            return self.page_cache[self.current_page]
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if self.current_page == "home":
            content = await self._create_home_page()
        elif self.current_page == "catalog":
            content = await self._create_catalog_page()
        elif self.current_page == "favorites":
            content = await self._create_favorites_page()
        elif self.current_page == "my_list":
            content = await self._create_my_list_page()
        elif self.current_page == "downloads":
            content = await self._create_downloads_page()
        elif self.current_page == "stats":
            content = await self._create_stats_page()
        elif self.current_page == "settings":
            content = await self._create_settings_page()
        elif self.current_page == "about":
            content = await self._create_about_page()
        elif self.current_page == "login":
            content = await self._create_login_page()
        else:
            content = await self._create_home_page()
        
        # –ö–µ—à–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        self.page_cache[self.current_page] = content
        
        return content
    
    async def _create_home_page(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = ft.Container(
            content=ft.Column(
                controls=[
                    ft.Text(
                        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {APP_NAME}!",
                        size=typography.text_4xl,
                        weight=typography.weight_bold,
                        color=colors.text_primary,
                    ),
                    ft.Text(
                        "–°–º–æ—Ç—Ä–∏—Ç–µ –∞–Ω–∏–º–µ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ —Å —É–¥–æ–±–Ω—ã–º –¥–µ—Å–∫—Ç–æ–ø–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º",
                        size=typography.text_xl,
                        color=colors.text_secondary,
                    ),
                ],
                spacing=spacing.sm,
            ),
            margin=ft.margin.only(bottom=spacing.xxl),
        )
        
        # –°–µ–∫—Ü–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ
        popular_section = await self._create_anime_section(
            title="üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω–∏–º–µ",
            anime_list=self.popular_anime[:8],
            show_more_link=True
        )
        
        # –°–µ–∫—Ü–∏—è —Å–µ–∑–æ–Ω–Ω—ã—Ö –∞–Ω–∏–º–µ
        seasonal_section = await self._create_anime_section(
            title="üåü –ù–æ–≤–∏–Ω–∫–∏ —Å–µ–∑–æ–Ω–∞",
            anime_list=self.seasonal_anime[:6],
            show_more_link=True
        )
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
        history_section = ft.Container()
        if self.current_user and self.watch_history:
            history_section = await self._create_history_section()
        
        return ft.Container(
            content=ft.Column(
                controls=[
                    header,
                    popular_section,
                    seasonal_section,
                    history_section,
                ],
                spacing=spacing.xxl,
                scroll=ft.ScrollMode.AUTO,
            ),
            padding=spacing.xxl,
            expand=True,
        )
    
    async def _create_catalog_page(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞"""
        
        # –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        self.search_bar = AnivesetSearchBar(
            width=600,
            on_search=self._on_search,
            on_filters_change=self._on_filters_change,
            placeholder="–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ..."
        )
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω–∏–º–µ
        anime_list = self.search_results if self.search_results else self.popular_anime
        
        # –°–µ—Ç–∫–∞ –∞–Ω–∏–º–µ
        anime_grid = await self._create_anime_grid(anime_list)
        
        return ft.Container(
            content=ft.Column(
                controls=[
                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–∏—Å–∫
                    ft.Container(
                        content=ft.Column(
                            controls=[
                                ft.Text(
                                    "üì∫ –ö–∞—Ç–∞–ª–æ–≥ –∞–Ω–∏–º–µ",
                                    size=typography.text_3xl,
                                    weight=typography.weight_bold,
                                    color=colors.text_primary,
                                ),
                                self.search_bar,
                            ],
                            spacing=spacing.lg,
                        ),
                        margin=ft.margin.only(bottom=spacing.xxl),
                    ),
                    
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    anime_grid,
                ],
                spacing=0,
                scroll=ft.ScrollMode.AUTO,
            ),
            padding=spacing.xxl,
            expand=True,
        )
    
    async def _create_favorites_page(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        
        if not self.current_user:
            return await self._create_auth_required_page("–∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –≤ —Ñ–æ—Ä–º–∞—Ç –∞–Ω–∏–º–µ
        favorites_anime = []
        for favorite in self.user_favorites:
            anime_data = {
                'id': favorite.anime_id,
                'title': favorite.anime_title,
                'material_data': {
                    'title': favorite.anime_title,
                    'poster_url': favorite.anime_poster_url or 'https://via.placeholder.com/300x400/8B5CF6/FFFFFF?text=–ù–µ—Ç+–ø–æ—Å—Ç–µ—Ä–∞',
                }
            }
            favorites_anime.append(anime_data)
        
        if not favorites_anime:
            return ft.Container(
                content=ft.Column(
                    controls=[
                        ft.Icon(icons.favorite, size=96, color=colors.text_muted),
                        ft.Text(
                            "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ",
                            size=typography.text_2xl,
                            weight=typography.weight_bold,
                            color=colors.text_muted,
                        ),
                        ft.Text(
                            "–î–æ–±–∞–≤–ª—è–π—Ç–µ –∞–Ω–∏–º–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –∑–¥–µ—Å—å",
                            size=typography.text_lg,
                            color=colors.text_muted,
                            text_align=ft.TextAlign.CENTER,
                        ),
                        ft.ElevatedButton(
                            text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥",
                            bgcolor=colors.primary,
                            color=colors.text_primary,
                            on_click=lambda e: self._on_navigate("catalog"),
                        )
                    ],
                    spacing=spacing.lg,
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                    alignment=ft.MainAxisAlignment.CENTER,
                ),
                alignment=ft.alignment.center,
                expand=True,
            )
        
        return ft.Container(
            content=ft.Column(
                controls=[
                    ft.Text(
                        f"‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ ({len(favorites_anime)})",
                        size=typography.text_3xl,
                        weight=typography.weight_bold,
                        color=colors.text_primary,
                    ),
                    await self._create_anime_grid(favorites_anime),
                ],
                spacing=spacing.xxl,
                scroll=ft.ScrollMode.AUTO,
            ),
            padding=spacing.xxl,
            expand=True,
        )
    
    async def _create_my_list_page(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã '–ú–æ–π —Å–ø–∏—Å–æ–∫'"""
        
        if not self.current_user:
            return await self._create_auth_required_page("—Å–ø–∏—Å–∫–∞")
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–∫ –æ—Å–Ω–æ–≤–∞ –¥–ª—è "–º–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞"
        if not self.watch_history:
            return ft.Container(
                content=ft.Column(
                    controls=[
                        ft.Icon(icons.list, size=96, color=colors.text_muted),
                        ft.Text(
                            "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç",
                            size=typography.text_2xl,
                            weight=typography.weight_bold,
                            color=colors.text_muted,
                        ),
                        ft.Text(
                            "–ù–∞—á–Ω–∏—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∏–º–µ, —á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ",
                            size=typography.text_lg,
                            color=colors.text_muted,
                            text_align=ft.TextAlign.CENTER,
                        ),
                    ],
                    spacing=spacing.lg,
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                    alignment=ft.MainAxisAlignment.CENTER,
                ),
                alignment=ft.alignment.center,
                expand=True,
            )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç –∞–Ω–∏–º–µ
        history_anime = []
        for history_item in self.watch_history:
            anime_data = {
                'id': history_item.anime_id,
                'title': history_item.anime_title,
                'material_data': {
                    'title': history_item.anime_title,
                    'poster_url': history_item.anime_poster_url or 'https://via.placeholder.com/300x400/8B5CF6/FFFFFF?text=–ù–µ—Ç+–ø–æ—Å—Ç–µ—Ä–∞',
                },
                'watch_progress': history_item.get_progress_percent(),
                'current_episode': history_item.episode_number,
                'last_watched': history_item.last_watched,
            }
            history_anime.append(anime_data)
        
        return ft.Container(
            content=ft.Column(
                controls=[
                    ft.Text(
                        f"üìã –ú–æ–π —Å–ø–∏—Å–æ–∫ ({len(history_anime)})",
                        size=typography.text_3xl,
                        weight=typography.weight_bold,
                        color=colors.text_primary,
                    ),
                    await self._create_anime_grid(history_anime),
                ],
                spacing=spacing.xxl,
                scroll=ft.ScrollMode.AUTO,
            ),
            padding=spacing.xxl,
            expand=True,
        )
    
    async def _create_downloads_page(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≥—Ä—É–∑–æ–∫"""
        return ft.Container(
            content=ft.Column(
                controls=[
                    ft.Icon(icons.download, size=96, color=colors.text_muted),
                    ft.Text(
                        "–ó–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                        size=typography.text_2xl,
                        weight=typography.weight_bold,
                        color=colors.text_muted,
                    ),
                    ft.Text(
                        "–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö",
                        size=typography.text_lg,
                        color=colors.text_muted,
                        text_align=ft.TextAlign.CENTER,
                    ),
                ],
                spacing=spacing.lg,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                alignment=ft.MainAxisAlignment.CENTER,
            ),
            alignment=ft.alignment.center,
            expand=True,
        )
    
    async def _create_stats_page(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        
        if not self.current_user:
            return await self._create_auth_required_page("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ": len(self.user_favorites),
            "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞": len(self.watch_history),
            "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–µ": len([h for h in self.watch_history if h.is_completed]),
        }
        
        stats_cards = []
        for stat_name, stat_value in stats.items():
            card = ft.Container(
                content=ft.Column(
                    controls=[
                        ft.Text(
                            str(stat_value),
                            size=typography.text_4xl,
                            weight=typography.weight_bold,
                            color=colors.primary,
                            text_align=ft.TextAlign.CENTER,
                        ),
                        ft.Text(
                            stat_name,
                            size=typography.text_lg,
                            color=colors.text_secondary,
                            text_align=ft.TextAlign.CENTER,
                        ),
                    ],
                    spacing=spacing.sm,
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                ),
                width=200,
                height=120,
                bgcolor=colors.card,
                border_radius=spacing.border_radius_lg,
                padding=spacing.lg,
                shadow=ft.BoxShadow(
                    spread_radius=0,
                    blur_radius=10,
                    color=colors.shadow,
                    offset=ft.Offset(0, 4)
                ),
            )
            stats_cards.append(card)
        
        return ft.Container(
            content=ft.Column(
                controls=[
                    ft.Text(
                        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                        size=typography.text_3xl,
                        weight=typography.weight_bold,
                        color=colors.text_primary,
                    ),
                    ft.Container(
                        content=ft.Row(
                            controls=stats_cards,
                            spacing=spacing.xl,
                            alignment=ft.MainAxisAlignment.CENTER,
                        ),
                        margin=ft.margin.symmetric(vertical=spacing.xxl),
                    ),
                ],
                spacing=spacing.xl,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
            ),
            padding=spacing.xxl,
            expand=True,
        )
    
    async def _create_settings_page(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        return ft.Container(
            content=ft.Column(
                controls=[
                    ft.Text(
                        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                        size=typography.text_3xl,
                        weight=typography.weight_bold,
                        color=colors.text_primary,
                    ),
                    ft.Text(
                        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö",
                        size=typography.text_lg,
                        color=colors.text_muted,
                    ),
                ],
                spacing=spacing.lg,
            ),
            padding=spacing.xxl,
            expand=True,
        )
    
    async def _create_about_page(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ'"""
        return ft.Container(
            content=ft.Column(
                controls=[
                    ft.Text(
                        f"‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
                        size=typography.text_3xl,
                        weight=typography.weight_bold,
                        color=colors.text_primary,
                    ),
                    ft.Text(
                        f"{APP_NAME} v{APP_VERSION}",
                        size=typography.text_xl,
                        weight=typography.weight_semibold,
                        color=colors.primary,
                    ),
                    ft.Text(
                        "–î–µ—Å–∫—Ç–æ–ø–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∏–º–µ",
                        size=typography.text_lg,
                        color=colors.text_secondary,
                    ),
                    ft.Text(
                        "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Shikimori API\n‚Ä¢ –í–∏–¥–µ–æ —á–µ—Ä–µ–∑ Kodik\n‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏ –∏—Å—Ç–æ—Ä–∏–∏",
                        size=typography.text_md,
                        color=colors.text_muted,
                    ),
                ],
                spacing=spacing.lg,
            ),
            padding=spacing.xxl,
            expand=True,
        )
    
    async def _create_login_page(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞"""
        return ft.Container(
            content=ft.Column(
                controls=[
                    ft.Text(
                        "üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
                        size=typography.text_3xl,
                        weight=typography.weight_bold,
                        color=colors.text_primary,
                    ),
                    ft.Text(
                        "–§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö",
                        size=typography.text_lg,
                        color=colors.text_muted,
                    ),
                ],
                spacing=spacing.lg,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                alignment=ft.MainAxisAlignment.CENTER,
            ),
            alignment=ft.alignment.center,
            expand=True,
        )
    
    async def _create_auth_required_page(self, feature_name: str) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return ft.Container(
            content=ft.Column(
                controls=[
                    ft.Icon(icons.login, size=96, color=colors.text_muted),
                    ft.Text(
                        "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
                        size=typography.text_2xl,
                        weight=typography.weight_bold,
                        color=colors.text_muted,
                    ),
                    ft.Text(
                        f"–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ {feature_name}",
                        size=typography.text_lg,
                        color=colors.text_muted,
                        text_align=ft.TextAlign.CENTER,
                    ),
                    ft.ElevatedButton(
                        text="–í–æ–π—Ç–∏",
                        bgcolor=colors.primary,
                        color=colors.text_primary,
                        on_click=lambda e: self._on_navigate("login"),
                    )
                ],
                spacing=spacing.lg,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                alignment=ft.MainAxisAlignment.CENTER,
            ),
            alignment=ft.alignment.center,
            expand=True,
        )
    
    async def _create_anime_section(self, title: str, anime_list: List[Dict], show_more_link: bool = False) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å –∞–Ω–∏–º–µ"""
        
        if not anime_list:
            return ft.Container()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        header_controls = [
            ft.Text(
                title,
                size=typography.text_2xl,
                weight=typography.weight_bold,
                color=colors.text_primary,
            )
        ]
        
        if show_more_link:
            header_controls.append(
                ft.TextButton(
                    text="–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ ‚Üí",
                    on_click=lambda e: self._on_navigate("catalog"),
                    style=ft.ButtonStyle(color=colors.primary),
                )
            )
        
        header = ft.Row(
            controls=header_controls,
            alignment=ft.MainAxisAlignment.SPACE_BETWEEN,
        )
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫
        cards = []
        for anime in anime_list:
            card = LargeAnimeCard(
                anime_data=anime,
                on_click=self._on_anime_click,
                on_favorite=self._on_favorite_click,
                current_user=self.current_user
            )
            cards.append(card)
        
        cards_row = ft.Container(
            content=ft.Row(
                controls=cards,
                spacing=spacing.xl,
                scroll=ft.ScrollMode.AUTO,
            ),
            margin=ft.margin.only(top=spacing.lg),
        )
        
        return ft.Container(
            content=ft.Column(
                controls=[header, cards_row],
                spacing=0,
            ),
            bgcolor=colors.surface,
            border_radius=spacing.border_radius_xl,
            padding=spacing.xl,
            shadow=ft.BoxShadow(
                spread_radius=0,
                blur_radius=20,
                color=colors.shadow,
                offset=ft.Offset(0, 8)
            ),
        )
    
    async def _create_anime_grid(self, anime_list: List[Dict]) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –∞–Ω–∏–º–µ"""
        
        if not anime_list:
            return ft.Container(
                content=ft.Text(
                    "–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                    size=typography.text_lg,
                    color=colors.text_muted,
                    text_align=ft.TextAlign.CENTER,
                ),
                alignment=ft.alignment.center,
                height=200,
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        cards = []
        for anime in anime_list:
            card = AnimeCard(
                anime_data=anime,
                on_click=self._on_anime_click,
                on_favorite=self._on_favorite_click,
                current_user=self.current_user
            )
            cards.append(card)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤ —Ä—è–¥—ã
        rows = []
        cards_per_row = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Ä—è–¥—É
        
        for i in range(0, len(cards), cards_per_row):
            row_cards = cards[i:i + cards_per_row]
            row = ft.Row(
                controls=row_cards,
                spacing=spacing.xl,
                alignment=ft.MainAxisAlignment.START,
            )
            rows.append(row)
        
        return ft.Container(
            content=ft.Column(
                controls=rows,
                spacing=spacing.xl,
                scroll=ft.ScrollMode.AUTO,
            ),
            expand=True,
        )
    
    async def _create_history_section(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        
        if not self.watch_history:
            return ft.Container()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç –∞–Ω–∏–º–µ
        history_anime = []
        for history_item in self.watch_history[:6]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 6
            anime_data = {
                'id': history_item.anime_id,
                'title': history_item.anime_title,
                'material_data': {
                    'title': history_item.anime_title,
                    'poster_url': history_item.anime_poster_url or 'https://via.placeholder.com/300x400/8B5CF6/FFFFFF?text=–ù–µ—Ç+–ø–æ—Å—Ç–µ—Ä–∞',
                }
            }
            history_anime.append(anime_data)
        
        return await self._create_anime_section(
            title="üìñ –ù–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ",
            anime_list=history_anime,
            show_more_link=True
        )
    
    async def _setup_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        # –í Flet –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ page.on_keyboard_event
        def on_keyboard(e: ft.KeyboardEvent):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
                if e.key == "F11":
                    # –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
                    self.page.window.full_screen = not self.page.window.full_screen
                    self.page.update()
                elif e.ctrl and e.key == "F":
                    # –§–æ–∫—É—Å –Ω–∞ –ø–æ–∏—Å–∫
                    if self.search_bar and hasattr(self.search_bar, 'search_field'):
                        self.search_bar.search_field.focus()
                elif e.ctrl and e.key == "H":
                    # –î–æ–º–æ–π
                    asyncio.create_task(self._on_navigate_async("home"))
                elif e.ctrl and e.key == "L":
                    # –ö–∞—Ç–∞–ª–æ–≥
                    asyncio.create_task(self._on_navigate_async("catalog"))
                elif e.ctrl and e.key == "D":
                    # –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
                    asyncio.create_task(self._on_navigate_async("favorites"))
            except Exception as ex:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à: {ex}")
        
        self.page.on_keyboard_event = on_keyboard
    
    async def _show_loading(self, message: str = "–ó–∞–≥—Ä—É–∑–∫–∞..."):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏"""
        if self.loading_overlay:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            text_control = self.loading_overlay.content.controls[1]
            text_control.value = message
            
            self.loading_overlay.visible = True
            await self.page.update_async()
        
        self.is_loading = True
    
    async def _hide_loading(self):
        """–°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏"""
        if self.loading_overlay:
            self.loading_overlay.visible = False
            await self.page.update_async()
        
        self.is_loading = False
    
    async def _show_error(self, title: str, message: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ ft.AlertDialog
        logger.error(f"{title}: {message}")
        
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –∫–æ–Ω—Å–æ–ª–∏
        print(f"–û–®–ò–ë–ö–ê: {title}\n{message}")
    
    def _on_navigate(self, page_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        asyncio.create_task(self._on_navigate_async(page_name))
    
    async def _on_navigate_async(self, page_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏"""
        if page_name == self.current_page:
            return
        
        try:
            # –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            if page_name in ["favorites", "my_list", "stats"]:
                self.page_cache.pop(page_name, None)
            
            self.current_page = page_name
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–π–¥–±–∞—Ä
            if self.sidebar:
                self.sidebar.update_page(page_name)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            new_content = await self._create_page_content()
            self.main_content.content = new_content
            
            await self.page.update_async()
            
            logger.info(f"–ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {page_name}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
            await self._show_error("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", str(e))
    
    async def _on_search(self, query: str, filters: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞"""
        try:
            await self._show_loading("–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ...")
            
            self.search_query = query
            self.search_filters = filters
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            if query or filters:
                self.search_results = await anime_service.search_anime(query, filters)
            else:
                self.search_results = []
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–∞–ª–æ–≥–∞ –µ—Å–ª–∏ –º—ã –Ω–∞ –Ω–µ–π
            if self.current_page == "catalog":
                self.page_cache.pop("catalog", None)  # –û—á–∏—â–∞–µ–º –∫–µ—à
                new_content = await self._create_page_content()
                self.main_content.content = new_content
                await self.page.update_async()
            
            await self._hide_loading()
            
            logger.info(f"–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω: '{query}', –Ω–∞–π–¥–µ–Ω–æ {len(self.search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            await self._hide_loading()
            await self._show_error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞", str(e))
    
    async def _on_filters_change(self, filters: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        # –§–∏–ª—å—Ç—Ä—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ _on_search
        pass
    
    async def _on_anime_click(self, anime_data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∞–Ω–∏–º–µ"""
        try:
            anime_id = anime_data.get('id', '')
            shikimori_id = anime_data.get('shikimori_id', '')
            
            logger.info(f"–û—Ç–∫—Ä—ã—Ç–∏–µ –∞–Ω–∏–º–µ: {anime_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} (ID: {anime_id})")
            
            # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            # –ê –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            print(f"–û—Ç–∫—Ä—ã—Ç–∏–µ –∞–Ω–∏–º–µ: {anime_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–Ω–∏–º–µ: {e}")
    
    async def _on_favorite_click(self, anime_data: Dict, is_favorite: bool):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É"""
        try:
            if not self.current_user:
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await self._load_user_data()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–π–¥–±–∞—Ä (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ)
            if self.sidebar:
                self.sidebar.update_favorites_count()
            
            # –û—á–∏—â–∞–µ–º –∫–µ—à —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            self.page_cache.pop("favorites", None)
            
            action = "–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤" if is_favorite else "—É–¥–∞–ª–µ–Ω–æ –∏–∑"
            logger.info(f"–ê–Ω–∏–º–µ {anime_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} {action} –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º: {e}")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º API –∫–ª–∏–µ–Ω—Ç—ã
            await anime_service.close()
            
            logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")

# ===== –≠–ö–°–ü–û–†–¢ =====

__all__ = ["AnivesetApp"]