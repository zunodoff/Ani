"""
üè† ANIVEST DESKTOP - –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê
===================================
–î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –∏ —Å–µ–∑–æ–Ω–Ω—ã–º–∏ –∞–Ω–∏–º–µ
"""

import flet as ft
import asyncio
import logging
from typing import Dict, Any, Callable, Optional, List
from datetime import datetime

from config.theme import colors, icons, spacing, typography
from config.settings import APP_NAME, APP_VERSION
from core.api.anime_service import anime_service
from core.api.shikimori_api import get_current_season, get_season_name_ru, get_season_emoji

from ..components.anime_card import LargeAnimeCard, AnimeCard

logger = logging.getLogger(__name__)

class HomePage(ft.UserControl):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(
        self,
        on_anime_click: Optional[Callable[[Dict], None]] = None,
        on_favorite_click: Optional[Callable[[Dict, bool], None]] = None,
        on_navigate: Optional[Callable[[str], None]] = None,
        current_user: Optional[Dict] = None
    ):
        super().__init__()
        
        self.on_anime_click = on_anime_click
        self.on_favorite_click = on_favorite_click
        self.on_navigate = on_navigate
        self.current_user = current_user
        
        # –î–∞–Ω–Ω—ã–µ
        self.popular_anime = []
        self.seasonal_anime = []
        self.watch_history = []
        self.user_favorites = []
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_loading = False
        self.error_message = ""
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.loading_indicator = None
        self.error_container = None
        self.content_container = None
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–∑–æ–Ω–µ
        self.current_season, self.current_year = get_current_season()
        self.season_name_ru = get_season_name_ru(self.current_season)
        self.season_emoji = get_season_emoji(self.current_season)
    
    async def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            await self._show_loading()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω–∏–º–µ
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            self.popular_anime = await anime_service.get_popular_anime(24)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∑–æ–Ω–Ω—ã–µ –∞–Ω–∏–º–µ
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∏–º–µ {self.season_name_ru} —Å–µ–∑–æ–Ω–∞ {self.current_year}...")
            self.seasonal_anime = await anime_service.get_seasonal_anime(
                self.current_season, 
                self.current_year, 
                12
            )
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            if self.current_user:
                await self._load_user_data()
            
            await self._hide_loading()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            if self.page:
                self.update()
            
            logger.info(f"–î–∞–Ω–Ω—ã–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(self.popular_anime)} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö, {len(self.seasonal_anime)} —Å–µ–∑–æ–Ω–Ω—ã—Ö")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            self.error_message = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}"
            await self._hide_loading()
            
            if self.page:
                self.update()
    
    async def _load_user_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not self.current_user:
                return
            
            from core.database.database import db_manager
            
            user_id = self.current_user['id']
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            self.user_favorites = db_manager.get_user_favorites(user_id)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –¥–ª—è –≥–ª–∞–≤–Ω–æ–π)
            self.watch_history = db_manager.get_user_watch_history(user_id, limit=6)
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(self.user_favorites)} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö, {len(self.watch_history)} –≤ –∏—Å—Ç–æ—Ä–∏–∏")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    def _create_welcome_header(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        welcome_text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {APP_NAME}!"
        
        if self.current_user:
            welcome_text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {self.current_user.get('username', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!"
        
        return ft.Container(
            content=ft.Column(
                controls=[
                    ft.Text(
                        welcome_text,
                        size=typography.text_4xl,
                        weight=typography.weight_bold,
                        color=colors.text_primary,
                        text_align=ft.TextAlign.CENTER,
                    ),
                    ft.Text(
                        "–°–º–æ—Ç—Ä–∏—Ç–µ –∞–Ω–∏–º–µ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ —Å —É–¥–æ–±–Ω—ã–º –¥–µ—Å–∫—Ç–æ–ø–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º",
                        size=typography.text_xl,
                        color=colors.text_secondary,
                        text_align=ft.TextAlign.CENTER,
                    ),
                    
                    # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                    ft.Container(
                        content=ft.Row(
                            controls=[
                                ft.ElevatedButton(
                                    content=ft.Row(
                                        controls=[
                                            ft.Icon(icons.search, size=spacing.icon_md),
                                            ft.Text("–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ", size=typography.text_md),
                                        ],
                                        spacing=spacing.sm,
                                        tight=True,
                                    ),
                                    bgcolor=colors.primary,
                                    color=colors.text_primary,
                                    on_click=lambda e: self.on_navigate("catalog") if self.on_navigate else None,
                                    style=ft.ButtonStyle(
                                        padding=ft.padding.symmetric(horizontal=spacing.lg, vertical=spacing.md),
                                    ),
                                ),
                                
                                ft.ElevatedButton(
                                    content=ft.Row(
                                        controls=[
                                            ft.Icon(icons.trending_up, size=spacing.icon_md),
                                            ft.Text("–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ", size=typography.text_md),
                                        ],
                                        spacing=spacing.sm,
                                        tight=True,
                                    ),
                                    bgcolor=colors.secondary,
                                    color=colors.text_primary,
                                    on_click=lambda e: self._scroll_to_popular(),
                                    style=ft.ButtonStyle(
                                        padding=ft.padding.symmetric(horizontal=spacing.lg, vertical=spacing.md),
                                    ),
                                ),
                                
                                ft.ElevatedButton(
                                    content=ft.Row(
                                        controls=[
                                            ft.Text(self.season_emoji, size=spacing.icon_md),
                                            ft.Text(f"{self.season_name_ru.title()} {self.current_year}", size=typography.text_md),
                                        ],
                                        spacing=spacing.sm,
                                        tight=True,
                                    ),
                                    bgcolor=colors.accent,
                                    color=colors.text_primary,
                                    on_click=lambda e: self._scroll_to_seasonal(),
                                    style=ft.ButtonStyle(
                                        padding=ft.padding.symmetric(horizontal=spacing.lg, vertical=spacing.md),
                                    ),
                                ),
                            ],
                            spacing=spacing.md,
                            alignment=ft.MainAxisAlignment.CENTER,
                            wrap=True,
                        ),
                        margin=ft.margin.only(top=spacing.xl),
                    )
                ],
                spacing=spacing.md,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
            ),
            margin=ft.margin.only(bottom=spacing.xxl),
            padding=spacing.xl,
            bgcolor=colors.surface,
            border_radius=spacing.border_radius_xl,
            shadow=ft.BoxShadow(
                spread_radius=0,
                blur_radius=20,
                color=colors.shadow,
                offset=ft.Offset(0, 8)
            ),
        )
    
    def _create_anime_section(
        self, 
        title: str, 
        anime_list: List[Dict], 
        show_more_action: Optional[str] = None,
        description: Optional[str] = None
    ) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å –∞–Ω–∏–º–µ"""
        
        if not anime_list:
            return ft.Container()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        header_controls = [
            ft.Column(
                controls=[
                    ft.Text(
                        title,
                        size=typography.text_2xl,
                        weight=typography.weight_bold,
                        color=colors.text_primary,
                    ),
                    ft.Text(
                        description,
                        size=typography.text_md,
                        color=colors.text_secondary,
                    ) if description else ft.Container(),
                ],
                spacing=spacing.xs,
                expand=True,
            )
        ]
        
        if show_more_action:
            header_controls.append(
                ft.ElevatedButton(
                    content=ft.Row(
                        controls=[
                            ft.Text("–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ", size=typography.text_sm),
                            ft.Icon(icons.trending_up, size=spacing.icon_sm),
                        ],
                        spacing=spacing.xs,
                        tight=True,
                    ),
                    bgcolor=colors.surface_light,
                    color=colors.text_primary,
                    on_click=lambda e: self.on_navigate(show_more_action) if self.on_navigate else None,
                    style=ft.ButtonStyle(
                        padding=ft.padding.symmetric(horizontal=spacing.md, vertical=spacing.sm),
                    ),
                )
            )
        
        header = ft.Row(
            controls=header_controls,
            alignment=ft.MainAxisAlignment.SPACE_BETWEEN,
            vertical_alignment=ft.CrossAxisAlignment.START,
        )
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫
        cards = []
        display_count = min(len(anime_list), 8)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 8 –∫–∞—Ä—Ç–æ—á–µ–∫
        
        for anime in anime_list[:display_count]:
            card = LargeAnimeCard(
                anime_data=anime,
                on_click=self.on_anime_click,
                on_favorite=self.on_favorite_click,
                current_user=self.current_user
            )
            cards.append(card)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º —Å–∫—Ä–æ–ª–ª–æ–º
        cards_container = ft.Container(
            content=ft.Row(
                controls=cards,
                spacing=spacing.xl,
                scroll=ft.ScrollMode.AUTO,
            ),
            margin=ft.margin.only(top=spacing.lg),
            height=400,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–∫—Ü–∏–∏
        stats_text = f"–ü–æ–∫–∞–∑–∞–Ω–æ {display_count} –∏–∑ {len(anime_list)} –∞–Ω–∏–º–µ"
        if len(anime_list) > display_count:
            stats_text += f" ‚Ä¢ –ï—â–µ {len(anime_list) - display_count} –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ"
        
        stats = ft.Container(
            content=ft.Text(
                stats_text,
                size=typography.text_sm,
                color=colors.text_muted,
                text_align=ft.TextAlign.CENTER,
            ),
            alignment=ft.alignment.center,
            margin=ft.margin.only(top=spacing.md),
        )
        
        return ft.Container(
            content=ft.Column(
                controls=[header, cards_container, stats],
                spacing=0,
            ),
            bgcolor=colors.surface,
            border_radius=spacing.border_radius_xl,
            padding=spacing.xl,
            margin=ft.margin.symmetric(vertical=spacing.lg),
            shadow=ft.BoxShadow(
                spread_radius=0,
                blur_radius=20,
                color=colors.shadow,
                offset=ft.Offset(0, 8)
            ),
        )
    
    def _create_watch_history_section(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        
        if not self.current_user or not self.watch_history:
            return ft.Container()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç –∞–Ω–∏–º–µ
        history_anime = []
        for history_item in self.watch_history:
            anime_data = {
                'id': history_item.anime_id,
                'title': history_item.anime_title,
                'material_data': {
                    'title': history_item.anime_title,
                    'poster_url': history_item.anime_poster_url or 'https://via.placeholder.com/300x400/8B5CF6/FFFFFF?text=–ù–µ—Ç+–ø–æ—Å—Ç–µ—Ä–∞',
                },
                'watch_progress': history_item.get_progress_percent(),
                'current_episode': history_item.episode_number,
                'last_watched': history_item.last_watched,
            }
            history_anime.append(anime_data)
        
        return self._create_anime_section(
            title="üìñ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä",
            anime_list=history_anime,
            show_more_action="my_list",
            description="–ù–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–µ"
        )
    
    def _create_favorites_section(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        
        if not self.current_user or not self.user_favorites:
            return ft.Container()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –≤ —Ñ–æ—Ä–º–∞—Ç –∞–Ω–∏–º–µ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 6)
        favorites_anime = []
        for favorite in self.user_favorites[:6]:
            anime_data = {
                'id': favorite.anime_id,
                'title': favorite.anime_title,
                'material_data': {
                    'title': favorite.anime_title,
                    'poster_url': favorite.anime_poster_url or 'https://via.placeholder.com/300x400/8B5CF6/FFFFFF?text=–ù–µ—Ç+–ø–æ—Å—Ç–µ—Ä–∞',
                }
            }
            favorites_anime.append(anime_data)
        
        return self._create_anime_section(
            title="‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ",
            anime_list=favorites_anime,
            show_more_action="favorites",
            description="–í–∞—à–∏ –ª—é–±–∏–º—ã–µ –∞–Ω–∏–º–µ"
        )
    
    def _create_quick_stats(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        
        if not self.current_user:
            return ft.Container()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = [
            {
                "title": "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ",
                "value": len(self.user_favorites),
                "icon": icons.favorite,
                "color": colors.secondary,
                "action": "favorites"
            },
            {
                "title": "–í –ø—Ä–æ—Ü–µ—Å—Å–µ",
                "value": len([h for h in self.watch_history if not h.is_completed]),
                "icon": icons.play_circle,
                "color": colors.primary,
                "action": "my_list"
            },
            {
                "title": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
                "value": len([h for h in self.watch_history if h.is_completed]),
                "icon": icons.check_circle,
                "color": colors.success,
                "action": "stats"
            },
        ]
        
        stat_cards = []
        for stat in stats:
            card = ft.Container(
                content=ft.Column(
                    controls=[
                        ft.Icon(
                            stat["icon"],
                            size=32,
                            color=stat["color"],
                        ),
                        ft.Text(
                            str(stat["value"]),
                            size=typography.text_3xl,
                            weight=typography.weight_bold,
                            color=colors.text_primary,
                            text_align=ft.TextAlign.CENTER,
                        ),
                        ft.Text(
                            stat["title"],
                            size=typography.text_md,
                            color=colors.text_secondary,
                            text_align=ft.TextAlign.CENTER,
                        ),
                    ],
                    spacing=spacing.sm,
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                    alignment=ft.MainAxisAlignment.CENTER,
                ),
                width=150,
                height=120,
                bgcolor=colors.card,
                border_radius=spacing.border_radius_lg,
                padding=spacing.md,
                shadow=ft.BoxShadow(
                    spread_radius=0,
                    blur_radius=10,
                    color=colors.shadow,
                    offset=ft.Offset(0, 4)
                ),
                on_click=lambda e, action=stat["action"]: self.on_navigate(action) if self.on_navigate else None,
                ink=True,
            )
            stat_cards.append(card)
        
        return ft.Container(
            content=ft.Column(
                controls=[
                    ft.Text(
                        "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                        size=typography.text_2xl,
                        weight=typography.weight_bold,
                        color=colors.text_primary,
                    ),
                    ft.Container(
                        content=ft.Row(
                            controls=stat_cards,
                            spacing=spacing.xl,
                            alignment=ft.MainAxisAlignment.CENTER,
                        ),
                        margin=ft.margin.only(top=spacing.lg),
                    ),
                ],
                spacing=0,
            ),
            bgcolor=colors.surface,
            border_radius=spacing.border_radius_xl,
            padding=spacing.xl,
            margin=ft.margin.symmetric(vertical=spacing.lg),
            shadow=ft.BoxShadow(
                spread_radius=0,
                blur_radius=20,
                color=colors.shadow,
                offset=ft.Offset(0, 8)
            ),
        )
    
    def _create_loading_indicator(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.loading_indicator = ft.Container(
            content=ft.Column(
                controls=[
                    ft.ProgressRing(
                        width=48,
                        height=48,
                        color=colors.primary,
                    ),
                    ft.Text(
                        "–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ...",
                        size=typography.text_lg,
                        color=colors.text_secondary,
                        text_align=ft.TextAlign.CENTER,
                    )
                ],
                spacing=spacing.lg,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                alignment=ft.MainAxisAlignment.CENTER,
            ),
            alignment=ft.alignment.center,
            height=400,
            visible=self.is_loading,
        )
        
        return self.loading_indicator
    
    def _create_error_container(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –æ—à–∏–±–∫–∏"""
        self.error_container = ft.Container(
            content=ft.Column(
                controls=[
                    ft.Icon(
                        icons.error,
                        size=64,
                        color=colors.error,
                    ),
                    ft.Text(
                        "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
                        size=typography.text_xl,
                        weight=typography.weight_bold,
                        color=colors.text_primary,
                        text_align=ft.TextAlign.CENTER,
                    ),
                    ft.Text(
                        self.error_message,
                        size=typography.text_md,
                        color=colors.text_secondary,
                        text_align=ft.TextAlign.CENTER,
                    ),
                    ft.ElevatedButton(
                        text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                        bgcolor=colors.primary,
                        color=colors.text_primary,
                        on_click=lambda e: asyncio.create_task(self.load_data()),
                    ),
                ],
                spacing=spacing.lg,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                alignment=ft.MainAxisAlignment.CENTER,
            ),
            alignment=ft.alignment.center,
            height=400,
            visible=bool(self.error_message),
        )
        
        return self.error_container
    
    async def _show_loading(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.is_loading = True
        self.error_message = ""
        
        if self.loading_indicator:
            self.loading_indicator.visible = True
        
        if self.error_container:
            self.error_container.visible = False
        
        if self.content_container:
            self.content_container.visible = False
        
        if self.page:
            self.update()
    
    async def _hide_loading(self):
        """–°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.is_loading = False
        
        if self.loading_indicator:
            self.loading_indicator.visible = False
        
        if self.content_container:
            self.content_container.visible = True
        
        if self.page:
            self.update()
    
    def _scroll_to_popular(self):
        """–°–∫—Ä–æ–ª–ª –∫ —Å–µ–∫—Ü–∏–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ"""
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª
        logger.info("–°–∫—Ä–æ–ª–ª –∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –∞–Ω–∏–º–µ")
    
    def _scroll_to_seasonal(self):
        """–°–∫—Ä–æ–ª–ª –∫ —Å–µ–∫—Ü–∏–∏ —Å–µ–∑–æ–Ω–Ω—ã—Ö –∞–Ω–∏–º–µ"""
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª  
        logger.info("–°–∫—Ä–æ–ª–ª –∫ —Å–µ–∑–æ–Ω–Ω—ã–º –∞–Ω–∏–º–µ")
    
    def update_user(self, user: Optional[Dict]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        self.current_user = user
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user:
            asyncio.create_task(self._load_user_data())
        else:
            self.user_favorites = []
            self.watch_history = []
        
        if self.page:
            self.update()
    
    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        asyncio.create_task(self.load_data())
    
    def build(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ UI –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content_sections = [
            self._create_welcome_header(),
        ]
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
        if self.current_user:
            quick_stats = self._create_quick_stats()
            if quick_stats.content:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ–∫—Ü–∏—è –Ω–µ –ø—É—Å—Ç–∞—è
                content_sections.append(quick_stats)
            
            watch_history = self._create_watch_history_section()
            if watch_history.content:
                content_sections.append(watch_history)
            
            favorites = self._create_favorites_section()
            if favorites.content:
                content_sections.append(favorites)
        
        # –û–±—â–∏–µ —Å–µ–∫—Ü–∏–∏
        if self.popular_anime:
            popular_section = self._create_anime_section(
                title="üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω–∏–º–µ",
                anime_list=self.popular_anime,
                show_more_action="catalog",
                description="–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω–∏–º–µ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω"
            )
            content_sections.append(popular_section)
        
        if self.seasonal_anime:
            seasonal_section = self._create_anime_section(
                title=f"{self.season_emoji} –ê–Ω–∏–º–µ {self.season_name_ru} —Å–µ–∑–æ–Ω–∞ {self.current_year}",
                anime_list=self.seasonal_anime,
                show_more_action="catalog",
                description="–ù–æ–≤–∏–Ω–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞"
            )
            content_sections.append(seasonal_section)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.content_container = ft.Container(
            content=ft.Column(
                controls=content_sections,
                spacing=0,
                scroll=ft.ScrollMode.AUTO,
            ),
            visible=not self.is_loading and not self.error_message,
            expand=True,
        )
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        return ft.Container(
            content=ft.Stack(
                controls=[
                    self.content_container,
                    self._create_loading_indicator(),
                    self._create_error_container(),
                ],
                expand=True,
            ),
            padding=spacing.xxl,
            expand=True,
        )

# ===== –≠–ö–°–ü–û–†–¢ =====

__all__ = ["HomePage"]