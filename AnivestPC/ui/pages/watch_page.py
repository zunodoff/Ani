"""
üé¨ ANIVEST DESKTOP - –°–¢–†–ê–ù–ò–¶–ê –ü–†–û–°–ú–û–¢–†–ê
====================================
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∏–º–µ —Å –≤–∏–¥–µ–æ –ø–ª–µ–µ—Ä–æ–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
"""

import flet as ft
import asyncio
import logging
from typing import Dict, Any, Callable, Optional, List
from datetime import datetime

from config.theme import colors, icons, spacing, typography
from core.api.anime_service import anime_service
from core.database.database import db_manager

from ..components.video_player import KodikVideoPlayer
from ..components.episode_list import EpisodesList
from ..components.anime_card import AnimeCard

logger = logging.getLogger(__name__)

class WatchPage(ft.UserControl):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∏–º–µ"""
    
    def __init__(
        self,
        anime_id: str,
        shikimori_id: Optional[str] = None,
        episode_number: int = 1,
        season_number: int = 1,
        on_favorite_click: Optional[Callable[[Dict, bool], None]] = None,
        on_navigate: Optional[Callable[[str], None]] = None,
        current_user: Optional[Dict] = None
    ):
        super().__init__()
        
        self.anime_id = anime_id
        self.shikimori_id = shikimori_id
        self.episode_number = episode_number
        self.season_number = season_number
        self.on_favorite_click = on_favorite_click
        self.on_navigate = on_navigate
        self.current_user = current_user
        
        # –î–∞–Ω–Ω—ã–µ
        self.anime_data = {}
        self.episodes_data = []
        self.similar_anime = []
        self.is_favorite = False
        self.watch_progress = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_loading = False
        self.error_message = ""
        self.player_mode = "theater"  # theater, fullscreen, mini
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.video_player = None
        self.episodes_list = None
        self.anime_info_container = None
        self.similar_section = None
        self.loading_indicator = None
        self.error_container = None
    
    async def load_anime_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∏–º–µ"""
        try:
            await self._show_loading("–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∏–º–µ...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∏–º–µ
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∏–º–µ: {self.anime_id}")
            self.anime_data = await anime_service.get_anime_details(self.anime_id, self.shikimori_id)
            
            if not self.anime_data:
                raise Exception("–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ø–∏–∑–æ–¥–æ–≤
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —ç–ø–∏–∑–æ–¥–æ–≤...")
            self.episodes_data = await anime_service.get_anime_episodes(
                self.anime_id, 
                self.anime_data.get('kodik_id')
            )
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ –∞–Ω–∏–º–µ
            if self.shikimori_id:
                logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∞–Ω–∏–º–µ...")
                similar_data = await anime_service.shikimori.get_anime_similar(self.shikimori_id)
                if similar_data:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
                    self.similar_anime = []
                    for similar in similar_data[:6]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 6
                        from core.api.shikimori_api import convert_shikimori_format
                        converted = convert_shikimori_format(similar)
                        self.similar_anime.append(converted)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            if self.current_user:
                await self._load_user_data()
            
            await self._hide_loading()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            if self.page:
                self.update()
            
            logger.info(f"–î–∞–Ω–Ω—ã–µ –∞–Ω–∏–º–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {self.anime_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∏–º–µ: {e}")
            self.error_message = str(e)
            await self._hide_loading()
            
            if self.page:
                self.update()
    
    async def _load_user_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not self.current_user:
                return
            
            user_id = self.current_user['id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            self.is_favorite = db_manager.is_in_favorites(user_id, self.anime_id)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            self.watch_progress = db_manager.get_watch_progress(user_id, self.anime_id)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è —ç–ø–∏–∑–æ–¥–∞
            if self.watch_progress and self.episode_number == 1:
                self.episode_number = self.watch_progress.episode_number
                self.season_number = self.watch_progress.season_number
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: –∏–∑–±—Ä–∞–Ω–Ω–æ–µ={self.is_favorite}, –ø—Ä–æ–≥—Ä–µ—Å—Å={self.watch_progress}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def _create_player_section(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–ª–µ–µ—Ä–∞"""
        
        if not self.anime_data or not self.anime_data.get('link'):
            return ft.Container(
                content=ft.Column(
                    controls=[
                        ft.Icon(icons.movie, size=96, color=colors.text_muted),
                        ft.Text(
                            "–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                            size=typography.text_xl,
                            color=colors.text_muted,
                        ),
                        ft.Text(
                            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ –∞–Ω–∏–º–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–∏–π",
                            size=typography.text_md,
                            color=colors.text_muted,
                            text_align=ft.TextAlign.CENTER,
                        ),
                    ],
                    spacing=spacing.lg,
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                    alignment=ft.MainAxisAlignment.CENTER,
                ),
                height=450,
                bgcolor=colors.surface,
                border_radius=spacing.border_radius_lg,
                alignment=ft.alignment.center,
            )
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ –ø–ª–µ–µ—Ä
        self.video_player = KodikVideoPlayer(
            anime_data=self.anime_data,
            episode_number=self.episode_number,
            season_number=self.season_number,
            width=1000,
            height=550,
            show_controls=True,
            autoplay=False,
            on_episode_change=self._on_episode_change,
            on_progress_update=self._on_progress_update,
            current_user=self.current_user
        )
        
        return ft.Container(
            content=self.video_player,
            alignment=ft.alignment.center,
            margin=ft.margin.only(bottom=spacing.xl),
        )
    
    def _create_anime_info(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–Ω–∏–º–µ"""
        
        if not self.anime_data:
            return ft.Container()
        
        material_data = self.anime_data.get('material_data', {})
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        title = material_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∞–Ω–∏–º–µ')
        title_en = material_data.get('title_en', '')
        description = material_data.get('description', '')
        
        # –ú–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        rating = material_data.get('shikimori_rating')
        votes = material_data.get('shikimori_votes')
        year = material_data.get('year')
        status = material_data.get('anime_status', '')
        episodes_total = material_data.get('episodes_total')
        genres = material_data.get('anime_genres', [])
        studios = material_data.get('anime_studios', [])
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_section = ft.Column(
            controls=[
                ft.Text(
                    title,
                    size=typography.text_3xl,
                    weight=typography.weight_bold,
                    color=colors.text_primary,
                    max_lines=2,
                    overflow=ft.TextOverflow.ELLIPSIS,
                ),
                ft.Text(
                    title_en,
                    size=typography.text_lg,
                    color=colors.text_secondary,
                    max_lines=1,
                    overflow=ft.TextOverflow.ELLIPSIS,
                ) if title_en and title_en != title else ft.Container(),
            ],
            spacing=spacing.sm,
        )
        
        # –†–µ–π—Ç–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        rating_section = ft.Row(
            controls=[
                ft.Container(
                    content=ft.Row(
                        controls=[
                            ft.Icon(icons.star, size=spacing.icon_md, color=colors.accent),
                            ft.Text(
                                f"{float(rating):.1f}",
                                size=typography.text_xl,
                                weight=typography.weight_bold,
                                color=colors.text_primary,
                            ),
                            ft.Text(
                                f"({votes} –æ—Ü–µ–Ω–æ–∫)" if votes else "",
                                size=typography.text_md,
                                color=colors.text_muted,
                            ),
                        ],
                        spacing=spacing.sm,
                        vertical_alignment=ft.CrossAxisAlignment.CENTER,
                    ),
                ) if rating else ft.Container(),
                
                ft.Container(
                    content=ft.Text(
                        status,
                        size=typography.text_md,
                        color=colors.text_primary,
                        weight=typography.weight_medium,
                    ),
                    bgcolor=self._get_status_color(status) + "40",
                    border_radius=spacing.border_radius_sm,
                    padding=ft.padding.symmetric(horizontal=spacing.md, vertical=spacing.sm),
                ),
                
                ft.Text(
                    f"{year}" if year else "",
                    size=typography.text_md,
                    color=colors.text_secondary,
                ),
                
                ft.Text(
                    f"{episodes_total} —ç–ø." if episodes_total else "",
                    size=typography.text_md,
                    color=colors.text_secondary,
                ),
            ],
            spacing=spacing.lg,
            wrap=True,
        )
        
        # –ñ–∞–Ω—Ä—ã
        genres_section = ft.Container()
        if genres:
            genre_chips = []
            for genre in genres[:6]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 6 –∂–∞–Ω—Ä–æ–≤
                chip = ft.Container(
                    content=ft.Text(
                        genre,
                        size=typography.text_sm,
                        color=colors.text_primary,
                    ),
                    bgcolor=colors.primary + "20",
                    border_radius=spacing.border_radius_sm,
                    padding=ft.padding.symmetric(horizontal=spacing.md, vertical=spacing.sm),
                )
                genre_chips.append(chip)
            
            genres_section = ft.Container(
                content=ft.Row(
                    controls=genre_chips,
                    spacing=spacing.sm,
                    wrap=True,
                ),
                margin=ft.margin.symmetric(vertical=spacing.md),
            )
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        description_section = ft.Container()
        if description:
            description_section = ft.Container(
                content=ft.Column(
                    controls=[
                        ft.Text(
                            "–û–ø–∏—Å–∞–Ω–∏–µ",
                            size=typography.text_lg,
                            weight=typography.weight_semibold,
                            color=colors.text_primary,
                        ),
                        ft.Text(
                            description,
                            size=typography.text_md,
                            color=colors.text_secondary,
                            max_lines=6,
                            overflow=ft.TextOverflow.ELLIPSIS,
                        ),
                    ],
                    spacing=spacing.sm,
                ),
                margin=ft.margin.symmetric(vertical=spacing.md),
            )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        additional_info = []
        if studios:
            studios_text = ", ".join(studios[:3])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Å—Ç—É–¥–∏–∏
            additional_info.append(f"–°—Ç—É–¥–∏—è: {studios_text}")
        
        additional_section = ft.Container()
        if additional_info:
            additional_section = ft.Container(
                content=ft.Text(
                    " ‚Ä¢ ".join(additional_info),
                    size=typography.text_sm,
                    color=colors.text_muted,
                ),
                margin=ft.margin.only(top=spacing.md),
            )
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_buttons = self._create_action_buttons()
        
        self.anime_info_container = ft.Container(
            content=ft.Column(
                controls=[
                    header_section,
                    rating_section,
                    genres_section,
                    description_section,
                    additional_section,
                    action_buttons,
                ],
                spacing=spacing.md,
            ),
            bgcolor=colors.surface,
            border_radius=spacing.border_radius_lg,
            padding=spacing.xl,
            margin=ft.margin.only(bottom=spacing.xl),
        )
        
        return self.anime_info_container
    
    def _create_action_buttons(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π"""
        
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        if self.current_user:
            favorite_button = ft.ElevatedButton(
                content=ft.Row(
                    controls=[
                        ft.Icon(
                            icons.favorite if self.is_favorite else icons.star_border,
                            size=spacing.icon_md,
                        ),
                        ft.Text(
                            "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" if self.is_favorite else "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                            size=typography.text_md,
                        ),
                    ],
                    spacing=spacing.sm,
                    tight=True,
                ),
                bgcolor=colors.secondary if self.is_favorite else colors.surface,
                color=colors.text_primary,
                on_click=self._toggle_favorite,
                style=ft.ButtonStyle(
                    padding=ft.padding.symmetric(horizontal=spacing.lg, vertical=spacing.md),
                ),
            )
            buttons.append(favorite_button)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
        share_button = ft.ElevatedButton(
            content=ft.Row(
                controls=[
                    ft.Icon(icons.share, size=spacing.icon_md),
                    ft.Text("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", size=typography.text_md),
                ],
                spacing=spacing.sm,
                tight=True,
            ),
            bgcolor=colors.surface,
            color=colors.text_primary,
            on_click=self._share_anime,
            style=ft.ButtonStyle(
                padding=ft.padding.symmetric(horizontal=spacing.lg, vertical=spacing.md),
            ),
        )
        buttons.append(share_button)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        progress_info = ft.Container()
        if self.current_user and self.watch_progress:
            progress_text = f"–≠–ø–∏–∑–æ–¥ {self.watch_progress.episode_number}"
            if self.watch_progress.get_progress_percent() > 0:
                progress_text += f" ({self.watch_progress.get_progress_percent():.0f}%)"
            
            progress_info = ft.Container(
                content=ft.Row(
                    controls=[
                        ft.Icon(icons.play_circle, size=spacing.icon_md, color=colors.success),
                        ft.Text(
                            progress_text,
                            size=typography.text_md,
                            color=colors.text_secondary,
                        ),
                    ],
                    spacing=spacing.sm,
                ),
                margin=ft.margin.only(left=spacing.lg),
            )
        
        return ft.Container(
            content=ft.Row(
                controls=[
                    ft.Row(
                        controls=buttons,
                        spacing=spacing.md,
                    ),
                    progress_info,
                ],
                alignment=ft.MainAxisAlignment.SPACE_BETWEEN,
                vertical_alignment=ft.CrossAxisAlignment.CENTER,
            ),
            margin=ft.margin.only(top=spacing.lg),
        )
    
    def _create_episodes_section(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º —ç–ø–∏–∑–æ–¥–æ–≤"""
        
        if not self.episodes_data:
            return ft.Container(
                content=ft.Column(
                    controls=[
                        ft.Text(
                            "üì∫ –≠–ø–∏–∑–æ–¥—ã",
                            size=typography.text_xl,
                            weight=typography.weight_bold,
                            color=colors.text_primary,
                        ),
                        ft.Container(
                            content=ft.Text(
                                "–°–ø–∏—Å–æ–∫ —ç–ø–∏–∑–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                                size=typography.text_md,
                                color=colors.text_muted,
                                text_align=ft.TextAlign.CENTER,
                            ),
                            alignment=ft.alignment.center,
                            height=200,
                        ),
                    ],
                    spacing=spacing.md,
                ),
                bgcolor=colors.surface,
                border_radius=spacing.border_radius_lg,
                padding=spacing.xl,
                margin=ft.margin.only(bottom=spacing.xl),
            )
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ø–∏–∑–æ–¥–æ–≤
        self.episodes_list = EpisodesList(
            anime_data=self.anime_data,
            episodes_data=self.episodes_data,
            current_episode=self.episode_number,
            current_season=self.season_number,
            width=400,
            height=600,
            compact_mode=False,
            show_screenshots=True,
            on_episode_select=self._on_episode_select,
            current_user=self.current_user
        )
        
        return ft.Container(
            content=ft.Column(
                controls=[
                    ft.Text(
                        "üì∫ –≠–ø–∏–∑–æ–¥—ã",
                        size=typography.text_xl,
                        weight=typography.weight_bold,
                        color=colors.text_primary,
                    ),
                    self.episodes_list,
                ],
                spacing=spacing.md,
            ),
            bgcolor=colors.surface,
            border_radius=spacing.border_radius_lg,
            padding=spacing.xl,
            margin=ft.margin.only(bottom=spacing.xl),
        )
    
    def _create_similar_section(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –ø–æ—Ö–æ–∂–∏—Ö –∞–Ω–∏–º–µ"""
        
        if not self.similar_anime:
            return ft.Container()
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Ö–æ–∂–∏—Ö –∞–Ω–∏–º–µ
        similar_cards = []
        for anime in self.similar_anime:
            card = AnimeCard(
                anime_data=anime,
                width=180,
                height=260,
                compact=True,
                on_click=self._on_similar_anime_click,
                on_favorite=self.on_favorite_click,
                current_user=self.current_user
            )
            similar_cards.append(card)
        
        self.similar_section = ft.Container(
            content=ft.Column(
                controls=[
                    ft.Row(
                        controls=[
                            ft.Text(
                                "üîó –ü–æ—Ö–æ–∂–∏–µ –∞–Ω–∏–º–µ",
                                size=typography.text_xl,
                                weight=typography.weight_bold,
                                color=colors.text_primary,
                            ),
                            ft.TextButton(
                                text="–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ ‚Üí",
                                on_click=lambda e: self.on_navigate("catalog") if self.on_navigate else None,
                                style=ft.ButtonStyle(color=colors.primary),
                            ),
                        ],
                        alignment=ft.MainAxisAlignment.SPACE_BETWEEN,
                    ),
                    ft.Container(
                        content=ft.Row(
                            controls=similar_cards,
                            spacing=spacing.lg,
                            scroll=ft.ScrollMode.AUTO,
                        ),
                        height=280,
                        margin=ft.margin.only(top=spacing.md),
                    ),
                ],
                spacing=0,
            ),
            bgcolor=colors.surface,
            border_radius=spacing.border_radius_lg,
            padding=spacing.xl,
        )
        
        return self.similar_section
    
    def _create_loading_indicator(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.loading_indicator = ft.Container(
            content=ft.Column(
                controls=[
                    ft.ProgressRing(
                        width=64,
                        height=64,
                        color=colors.primary,
                    ),
                    ft.Text(
                        "–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∏–º–µ...",
                        size=typography.text_xl,
                        color=colors.text_secondary,
                        text_align=ft.TextAlign.CENTER,
                    )
                ],
                spacing=spacing.xl,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                alignment=ft.MainAxisAlignment.CENTER,
            ),
            alignment=ft.alignment.center,
            height=600,
            visible=self.is_loading,
        )
        
        return self.loading_indicator
    
    def _create_error_container(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –æ—à–∏–±–∫–∏"""
        self.error_container = ft.Container(
            content=ft.Column(
                controls=[
                    ft.Icon(
                        icons.error,
                        size=96,
                        color=colors.error,
                    ),
                    ft.Text(
                        "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∏–º–µ",
                        size=typography.text_2xl,
                        weight=typography.weight_bold,
                        color=colors.text_primary,
                        text_align=ft.TextAlign.CENTER,
                    ),
                    ft.Text(
                        self.error_message,
                        size=typography.text_lg,
                        color=colors.text_secondary,
                        text_align=ft.TextAlign.CENTER,
                    ),
                    ft.Row(
                        controls=[
                            ft.ElevatedButton(
                                text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                                bgcolor=colors.primary,
                                color=colors.text_primary,
                                on_click=lambda e: asyncio.create_task(self.load_anime_data()),
                            ),
                            ft.ElevatedButton(
                                text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥",
                                bgcolor=colors.surface,
                                color=colors.text_primary,
                                on_click=lambda e: self.on_navigate("catalog") if self.on_navigate else None,
                            ),
                        ],
                        spacing=spacing.md,
                        alignment=ft.MainAxisAlignment.CENTER,
                    ),
                ],
                spacing=spacing.xl,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                alignment=ft.MainAxisAlignment.CENTER,
            ),
            alignment=ft.alignment.center,
            height=600,
            visible=bool(self.error_message),
        )
        
        return self.error_container
    
    def _get_status_color(self, status: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        status_colors = {
            'released': colors.success,
            'ongoing': colors.info,
            'anons': colors.warning
        }
        return status_colors.get(status.lower(), colors.text_muted)
    
    async def _show_loading(self, message: str = "–ó–∞–≥—Ä—É–∑–∫–∞..."):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.is_loading = True
        self.error_message = ""
        
        if self.loading_indicator:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
            text_control = self.loading_indicator.content.controls[1]
            text_control.value = message
            self.loading_indicator.visible = True
        
        if self.page:
            self.update()
    
    async def _hide_loading(self):
        """–°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.is_loading = False
        
        if self.loading_indicator:
            self.loading_indicator.visible = False
        
        if self.page:
            self.update()
    
    def _on_episode_change(self, episode_num: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —ç–ø–∏–∑–æ–¥–∞ –≤ –ø–ª–µ–µ—Ä–µ"""
        self.episode_number = episode_num
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —ç–ø–∏–∑–æ–¥–æ–≤
        if self.episodes_list:
            self.episodes_list.update_current_episode(episode_num, self.season_number)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        self._save_watch_progress()
        
        logger.info(f"–°–º–µ–Ω–∞ —ç–ø–∏–∑–æ–¥–∞ –≤ –ø–ª–µ–µ—Ä–µ: {episode_num}")
    
    def _on_episode_select(self, episode_num: int, season_num: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞ –≤ —Å–ø–∏—Å–∫–µ"""
        self.episode_number = episode_num
        self.season_number = season_num
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–µ—Ä
        if self.video_player:
            self.video_player.set_episode(episode_num)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        self._save_watch_progress()
        
        logger.info(f"–í—ã–±–æ—Ä —ç–ø–∏–∑–æ–¥–∞ –≤ —Å–ø–∏—Å–∫–µ: {episode_num}, —Å–µ–∑–æ–Ω {season_num}")
    
    def _on_progress_update(self, watch_time: int, total_time: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if watch_time % 30 == 0:  # –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            self._save_watch_progress(watch_time, total_time)
    
    def _save_watch_progress(self, watch_time: int = 0, total_time: int = 0):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        try:
            if not self.current_user or not self.anime_data:
                return
            
            db_manager.update_watch_progress(
                user_id=self.current_user['id'],
                anime_id=self.anime_id,
                anime_title=self.anime_data.get('title', ''),
                anime_poster_url=self.anime_data.get('material_data', {}).get('poster_url', ''),
                episode_number=self.episode_number,
                season_number=self.season_number,
                watch_time_seconds=watch_time,
                total_time_seconds=total_time
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            self.watch_progress = db_manager.get_watch_progress(self.current_user['id'], self.anime_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
    
    def _toggle_favorite(self, e):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        try:
            if not self.current_user or not self.anime_data:
                return
            
            user_id = self.current_user['id']
            anime_title = self.anime_data.get('title', '')
            anime_poster = self.anime_data.get('material_data', {}).get('poster_url', '')
            
            if self.is_favorite:
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                success = db_manager.remove_from_favorites(user_id, self.anime_id)
                if success:
                    self.is_favorite = False
                    message = "–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
                else:
                    message = "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                success = db_manager.add_to_favorites(user_id, self.anime_id, anime_title, anime_poster)
                if success:
                    self.is_favorite = True
                    message = "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
                else:
                    message = "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            if self.page:
                self.update()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if self.page:
                snack_color = colors.success if success else colors.error
                self.page.show_snack_bar(
                    ft.SnackBar(
                        content=ft.Text(message),
                        bgcolor=snack_color
                    )
                )
            
            # –í—ã–∑—ã–≤–∞–µ–º callback
            if self.on_favorite_click:
                self.on_favorite_click(self.anime_data, self.is_favorite)
            
        except Exception as ex:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {ex}")
    
    def _share_anime(self, e):
        """–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∞–Ω–∏–º–µ"""
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        anime_title = self.anime_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∞–Ω–∏–º–µ')
        logger.info(f"–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∞–Ω–∏–º–µ: {anime_title}")
        
        if self.page:
            self.page.show_snack_bar(
                ft.SnackBar(
                    content=ft.Text("–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"),
                    bgcolor=colors.info
                )
            )
    
    def _on_similar_anime_click(self, anime_data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –ø–æ—Ö–æ–∂–µ–º—É –∞–Ω–∏–º–µ"""
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥–æ–µ –∞–Ω–∏–º–µ
        anime_title = anime_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∞–Ω–∏–º–µ')
        logger.info(f"–ö–ª–∏–∫ –ø–æ –ø–æ—Ö–æ–∂–µ–º—É –∞–Ω–∏–º–µ: {anime_title}")
    
    def update_user(self, user: Optional[Dict]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        self.current_user = user
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        if user:
            asyncio.create_task(self._load_user_data())
        else:
            self.is_favorite = False
            self.watch_progress = None
        
        if self.page:
            self.update()
    
    def build(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ UI —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        
        # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        if self.is_loading:
            return self._create_loading_indicator()
        
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        if self.error_message:
            return self._create_error_container()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        main_content = ft.Row(
            controls=[
                # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ø–ª–µ–µ—Ä –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                ft.Column(
                    controls=[
                        self._create_player_section(),
                        self._create_anime_info(),
                        self._create_similar_section(),
                    ],
                    spacing=0,
                    expand=True,
                ),
                
                # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Å–ø–∏—Å–æ–∫ —ç–ø–∏–∑–æ–¥–æ–≤
                ft.Container(
                    content=self._create_episodes_section(),
                    width=450,
                ),
            ],
            spacing=spacing.xl,
            alignment=ft.MainAxisAlignment.START,
            vertical_alignment=ft.CrossAxisAlignment.START,
            expand=True,
        )
        
        return ft.Container(
            content=ft.Column(
                controls=[main_content],
                spacing=0,
                scroll=ft.ScrollMode.AUTO,
            ),
            padding=spacing.xl,
            expand=True,
        )

# ===== –≠–ö–°–ü–û–†–¢ =====

__all__ = ["WatchPage"]