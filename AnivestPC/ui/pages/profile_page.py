"""
üë§ ANIVEST DESKTOP - –°–¢–†–ê–ù–ò–¶–ê –ü–†–û–§–ò–õ–Ø
===================================
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
"""

import flet as ft
import asyncio
import logging
from typing import Dict, Any, Callable, Optional, List
from datetime import datetime, timedelta

from config.theme import colors, icons, spacing, typography
from core.database.database import db_manager

from ..components.anime_card import CompactAnimeCard

logger = logging.getLogger(__name__)

class ProfilePage(ft.UserControl):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(
        self,
        current_user: Optional[Dict] = None,
        on_anime_click: Optional[Callable[[Dict], None]] = None,
        on_favorite_click: Optional[Callable[[Dict, bool], None]] = None,
        on_logout: Optional[Callable] = None,
        on_navigate: Optional[Callable[[str], None]] = None
    ):
        super().__init__()
        
        self.current_user = current_user
        self.on_anime_click = on_anime_click
        self.on_favorite_click = on_favorite_click
        self.on_logout = on_logout
        self.on_navigate = on_navigate
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_stats = {}
        self.recent_favorites = []
        self.watch_history = []
        self.user_achievements = []
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_loading = False
        self.is_editing = False
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.profile_header = None
        self.stats_section = None
        self.activity_section = None
        self.edit_form = None
    
    async def load_user_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not self.current_user:
                return
            
            await self._show_loading()
            
            user_id = self.current_user['id']
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            favorites = db_manager.get_user_favorites(user_id)
            watch_history = db_manager.get_user_watch_history(user_id, limit=50)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.user_stats = self._calculate_stats(favorites, watch_history)
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
            self.recent_favorites = favorites[:6]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6
            
            # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ)
            self.watch_history = watch_history[:10]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            
            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–ø—Ä–æ—Å—Ç—ã–µ)
            self.user_achievements = self._calculate_achievements(favorites, watch_history)
            
            await self._hide_loading()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            if self.page:
                self.update()
            
            logger.info(f"–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {self.current_user.get('username')}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            await self._hide_loading()
    
    def _calculate_stats(self, favorites: List, watch_history: List) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        total_episodes = sum(h.episode_number for h in watch_history)
        completed_anime = len([h for h in watch_history if h.is_completed])
        
        # –í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ–µ)
        estimated_hours = total_episodes * 0.4  # ~24 –º–∏–Ω—É—Ç—ã –Ω–∞ —ç–ø–∏–∑–æ–¥
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º
        activity_days = set()
        for history in watch_history:
            if history.last_watched:
                try:
                    watch_date = datetime.fromisoformat(history.last_watched).date()
                    activity_days.add(watch_date)
                except:
                    pass
        
        return {
            'favorites_count': len(favorites),
            'total_anime': len(watch_history),
            'completed_anime': completed_anime,
            'total_episodes': total_episodes,
            'estimated_hours': int(estimated_hours),
            'active_days': len(activity_days),
            'registration_date': self.current_user.get('created_at', ''),
        }
    
    def _calculate_achievements(self, favorites: List, watch_history: List) -> List[Dict]:
        """–†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        achievements = []
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–Ω–∏–º–µ
        total_anime = len(watch_history)
        if total_anime >= 1:
            achievements.append({
                'title': '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
                'description': '–ù–∞—á–∞–ª–∏ —Å–º–æ—Ç—Ä–µ—Ç—å –ø–µ—Ä–≤–æ–µ –∞–Ω–∏–º–µ',
                'icon': icons.star,
                'color': colors.success,
                'unlocked': True
            })
        
        if total_anime >= 10:
            achievements.append({
                'title': '–õ—é–±–∏—Ç–µ–ª—å –∞–Ω–∏–º–µ',
                'description': '–ü–æ—Å–º–æ—Ç—Ä–µ–ª–∏ 10 –∞–Ω–∏–º–µ',
                'icon': icons.favorite,
                'color': colors.primary,
                'unlocked': True
            })
        
        if total_anime >= 50:
            achievements.append({
                'title': '–ù–∞—Å—Ç–æ—è—â–∏–π –æ—Ç–∞–∫—É',
                'description': '–ü–æ—Å–º–æ—Ç—Ä–µ–ª–∏ 50 –∞–Ω–∏–º–µ',
                'icon': icons.trending_up,
                'color': colors.secondary,
                'unlocked': True
            })
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É
        favorites_count = len(favorites)
        if favorites_count >= 5:
            achievements.append({
                'title': '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä',
                'description': '–î–æ–±–∞–≤–∏–ª–∏ 5 –∞–Ω–∏–º–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
                'icon': icons.star_border,
                'color': colors.accent,
                'unlocked': True
            })
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —ç–ø–∏–∑–æ–¥–∞–º
        total_episodes = sum(h.episode_number for h in watch_history)
        if total_episodes >= 100:
            achievements.append({
                'title': '–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü',
                'description': '–ü–æ—Å–º–æ—Ç—Ä–µ–ª–∏ 100 —ç–ø–∏–∑–æ–¥–æ–≤',
                'icon': icons.play_circle,
                'color': colors.info,
                'unlocked': True
            })
        
        return achievements
    
    def _create_profile_header(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
        if not self.current_user:
            return ft.Container()
        
        username = self.current_user.get('username', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        email = self.current_user.get('email', '')
        role = self.current_user.get('role', 'user')
        created_at = self.current_user.get('created_at', '')
        
        # –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        avatar = ft.Container(
            content=ft.Text(
                username[0].upper(),
                size=typography.text_4xl,
                weight=typography.weight_bold,
                color=colors.text_primary,
                text_align=ft.TextAlign.CENTER,
            ),
            width=120,
            height=120,
            bgcolor=colors.primary,
            border_radius=60,
            alignment=ft.alignment.center,
            shadow=ft.BoxShadow(
                spread_radius=0,
                blur_radius=20,
                color=colors.shadow,
                offset=ft.Offset(0, 8)
            ),
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = ft.Column(
            controls=[
                ft.Text(
                    username,
                    size=typography.text_3xl,
                    weight=typography.weight_bold,
                    color=colors.text_primary,
                ),
                ft.Text(
                    email,
                    size=typography.text_lg,
                    color=colors.text_secondary,
                ),
                ft.Container(
                    content=ft.Text(
                        role.upper(),
                        size=typography.text_sm,
                        weight=typography.weight_bold,
                        color=colors.text_primary,
                    ),
                    bgcolor=colors.secondary + "40",
                    border_radius=spacing.border_radius_sm,
                    padding=ft.padding.symmetric(horizontal=spacing.md, vertical=spacing.sm),
                ),
                ft.Text(
                    f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {self._format_date(created_at)}" if created_at else "",
                    size=typography.text_sm,
                    color=colors.text_muted,
                ),
            ],
            spacing=spacing.sm,
            expand=True,
        )
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_buttons = ft.Column(
            controls=[
                ft.ElevatedButton(
                    content=ft.Row(
                        controls=[
                            ft.Icon(icons.settings, size=spacing.icon_sm),
                            ft.Text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", size=typography.text_sm),
                        ],
                        spacing=spacing.xs,
                        tight=True,
                    ),
                    bgcolor=colors.primary,
                    color=colors.text_primary,
                    on_click=self._toggle_edit_mode,
                    style=ft.ButtonStyle(
                        padding=ft.padding.symmetric(horizontal=spacing.md, vertical=spacing.sm),
                    ),
                ),
                ft.ElevatedButton(
                    content=ft.Row(
                        controls=[
                            ft.Icon(icons.logout, size=spacing.icon_sm),
                            ft.Text("–í—ã–π—Ç–∏", size=typography.text_sm),
                        ],
                        spacing=spacing.xs,
                        tight=True,
                    ),
                    bgcolor=colors.error,
                    color=colors.text_primary,
                    on_click=self._logout,
                    style=ft.ButtonStyle(
                        padding=ft.padding.symmetric(horizontal=spacing.md, vertical=spacing.sm),
                    ),
                ),
            ],
            spacing=spacing.sm,
            horizontal_alignment=ft.CrossAxisAlignment.END,
        )
        
        self.profile_header = ft.Container(
            content=ft.Row(
                controls=[
                    avatar,
                    ft.Container(width=spacing.xl),  # –û—Ç—Å—Ç—É–ø
                    user_info,
                    action_buttons,
                ],
                alignment=ft.MainAxisAlignment.START,
                vertical_alignment=ft.CrossAxisAlignment.CENTER,
            ),
            bgcolor=colors.surface,
            border_radius=spacing.border_radius_xl,
            padding=spacing.xl,
            margin=ft.margin.only(bottom=spacing.xl),
            shadow=ft.BoxShadow(
                spread_radius=0,
                blur_radius=20,
                color=colors.shadow,
                offset=ft.Offset(0, 8)
            ),
        )
        
        return self.profile_header
    
    def _create_stats_section(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        
        if not self.user_stats:
            return ft.Container()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        main_stats = [
            {
                'title': '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ',
                'value': self.user_stats.get('favorites_count', 0),
                'icon': icons.favorite,
                'color': colors.secondary,
                'description': '–∞–Ω–∏–º–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º'
            },
            {
                'title': '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ',
                'value': self.user_stats.get('total_anime', 0),
                'icon': icons.movie,
                'color': colors.primary,
                'description': '–∞–Ω–∏–º–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏'
            },
            {
                'title': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
                'value': self.user_stats.get('completed_anime', 0),
                'icon': icons.check_circle,
                'color': colors.success,
                'description': '–ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ'
            },
            {
                'title': '–≠–ø–∏–∑–æ–¥–æ–≤',
                'value': self.user_stats.get('total_episodes', 0),
                'icon': icons.play_circle,
                'color': colors.info,
                'description': '—ç–ø–∏–∑–æ–¥–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ'
            },
        ]
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        additional_stats = [
            {
                'title': '–í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞',
                'value': f"~{self.user_stats.get('estimated_hours', 0)} —á",
                'description': '–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è'
            },
            {
                'title': '–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π',
                'value': self.user_stats.get('active_days', 0),
                'description': '–¥–Ω–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é'
            },
        ]
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        main_stat_cards = []
        for stat in main_stats:
            card = ft.Container(
                content=ft.Column(
                    controls=[
                        ft.Icon(
                            stat['icon'],
                            size=32,
                            color=stat['color'],
                        ),
                        ft.Text(
                            str(stat['value']),
                            size=typography.text_3xl,
                            weight=typography.weight_bold,
                            color=colors.text_primary,
                            text_align=ft.TextAlign.CENTER,
                        ),
                        ft.Text(
                            stat['title'],
                            size=typography.text_md,
                            weight=typography.weight_semibold,
                            color=colors.text_secondary,
                            text_align=ft.TextAlign.CENTER,
                        ),
                        ft.Text(
                            stat['description'],
                            size=typography.text_sm,
                            color=colors.text_muted,
                            text_align=ft.TextAlign.CENTER,
                        ),
                    ],
                    spacing=spacing.sm,
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                    alignment=ft.MainAxisAlignment.CENTER,
                ),
                width=160,
                height=140,
                bgcolor=colors.card,
                border_radius=spacing.border_radius_lg,
                padding=spacing.md,
                shadow=ft.BoxShadow(
                    spread_radius=0,
                    blur_radius=10,
                    color=colors.shadow,
                    offset=ft.Offset(0, 4)
                ),
            )
            main_stat_cards.append(card)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        additional_stats_widgets = []
        for stat in additional_stats:
            widget = ft.Container(
                content=ft.Row(
                    controls=[
                        ft.Text(
                            stat['title'],
                            size=typography.text_md,
                            color=colors.text_secondary,
                            expand=True,
                        ),
                        ft.Text(
                            str(stat['value']),
                            size=typography.text_lg,
                            weight=typography.weight_semibold,
                            color=colors.text_primary,
                        ),
                    ],
                    alignment=ft.MainAxisAlignment.SPACE_BETWEEN,
                ),
                bgcolor=colors.surface_light,
                border_radius=spacing.border_radius_md,
                padding=spacing.md,
            )
            additional_stats_widgets.append(widget)
        
        self.stats_section = ft.Container(
            content=ft.Column(
                controls=[
                    ft.Text(
                        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                        size=typography.text_2xl,
                        weight=typography.weight_bold,
                        color=colors.text_primary,
                    ),
                    ft.Container(
                        content=ft.Row(
                            controls=main_stat_cards,
                            spacing=spacing.lg,
                            alignment=ft.MainAxisAlignment.CENTER,
                            wrap=True,
                        ),
                        margin=ft.margin.symmetric(vertical=spacing.lg),
                    ),
                    ft.Column(
                        controls=additional_stats_widgets,
                        spacing=spacing.sm,
                    ),
                ],
                spacing=spacing.md,
            ),
            bgcolor=colors.surface,
            border_radius=spacing.border_radius_xl,
            padding=spacing.xl,
            margin=ft.margin.only(bottom=spacing.xl),
        )
        
        return self.stats_section
    
    def _create_achievements_section(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        
        if not self.user_achievements:
            return ft.Container()
        
        achievement_cards = []
        for achievement in self.user_achievements:
            card = ft.Container(
                content=ft.Row(
                    controls=[
                        ft.Container(
                            content=ft.Icon(
                                achievement['icon'],
                                size=24,
                                color=achievement['color'],
                            ),
                            width=40,
                            height=40,
                            bgcolor=achievement['color'] + "20",
                            border_radius=20,
                            alignment=ft.alignment.center,
                        ),
                        ft.Column(
                            controls=[
                                ft.Text(
                                    achievement['title'],
                                    size=typography.text_md,
                                    weight=typography.weight_semibold,
                                    color=colors.text_primary,
                                ),
                                ft.Text(
                                    achievement['description'],
                                    size=typography.text_sm,
                                    color=colors.text_secondary,
                                ),
                            ],
                            spacing=spacing.xs,
                            expand=True,
                        ),
                        ft.Icon(
                            icons.check_circle,
                            size=spacing.icon_md,
                            color=colors.success,
                        ),
                    ],
                    spacing=spacing.md,
                    vertical_alignment=ft.CrossAxisAlignment.CENTER,
                ),
                bgcolor=colors.card,
                border_radius=spacing.border_radius_md,
                padding=spacing.md,
                margin=ft.margin.only(bottom=spacing.sm),
            )
            achievement_cards.append(card)
        
        return ft.Container(
            content=ft.Column(
                controls=[
                    ft.Text(
                        "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
                        size=typography.text_2xl,
                        weight=typography.weight_bold,
                        color=colors.text_primary,
                    ),
                    ft.Column(
                        controls=achievement_cards,
                        spacing=0,
                    ),
                ],
                spacing=spacing.lg,
            ),
            bgcolor=colors.surface,
            border_radius=spacing.border_radius_xl,
            padding=spacing.xl,
            margin=ft.margin.only(bottom=spacing.xl),
        )
    
    def _create_activity_section(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        favorites_section = ft.Container()
        if self.recent_favorites:
            favorite_cards = []
            for favorite in self.recent_favorites:
                anime_data = {
                    'id': favorite.anime_id,
                    'title': favorite.anime_title,
                    'material_data': {
                        'title': favorite.anime_title,
                        'poster_url': favorite.anime_poster_url or 'https://via.placeholder.com/300x400/8B5CF6/FFFFFF?text=–ù–µ—Ç+–ø–æ—Å—Ç–µ—Ä–∞',
                    }
                }
                
                card = CompactAnimeCard(
                    anime_data=anime_data,
                    on_click=self.on_anime_click,
                    on_favorite=self.on_favorite_click,
                    current_user=self.current_user
                )
                favorite_cards.append(card)
            
            favorites_section = ft.Container(
                content=ft.Column(
                    controls=[
                        ft.Row(
                            controls=[
                                ft.Text(
                                    "‚≠ê –ù–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                                    size=typography.text_lg,
                                    weight=typography.weight_semibold,
                                    color=colors.text_primary,
                                ),
                                ft.TextButton(
                                    text="–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ ‚Üí",
                                    on_click=lambda e: self.on_navigate("favorites") if self.on_navigate else None,
                                    style=ft.ButtonStyle(color=colors.primary),
                                ),
                            ],
                            alignment=ft.MainAxisAlignment.SPACE_BETWEEN,
                        ),
                        ft.Container(
                            content=ft.Row(
                                controls=favorite_cards,
                                spacing=spacing.md,
                                scroll=ft.ScrollMode.AUTO,
                            ),
                            height=240,
                            margin=ft.margin.only(top=spacing.md),
                        ),
                    ],
                    spacing=0,
                ),
                margin=ft.margin.only(bottom=spacing.xl),
            )
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        history_section = ft.Container()
        if self.watch_history:
            history_items = []
            for history in self.watch_history[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                item = ft.Container(
                    content=ft.Row(
                        controls=[
                            ft.Text(
                                history.anime_title,
                                size=typography.text_md,
                                color=colors.text_primary,
                                expand=True,
                            ),
                            ft.Text(
                                f"–≠–ø–∏–∑–æ–¥ {history.episode_number}",
                                size=typography.text_sm,
                                color=colors.text_secondary,
                            ),
                            ft.Text(
                                self._format_date(history.last_watched),
                                size=typography.text_sm,
                                color=colors.text_muted,
                            ),
                        ],
                        spacing=spacing.md,
                        vertical_alignment=ft.CrossAxisAlignment.CENTER,
                    ),
                    bgcolor=colors.surface_light,
                    border_radius=spacing.border_radius_sm,
                    padding=spacing.md,
                    margin=ft.margin.only(bottom=spacing.xs),
                )
                history_items.append(item)
            
            history_section = ft.Container(
                content=ft.Column(
                    controls=[
                        ft.Row(
                            controls=[
                                ft.Text(
                                    "üìñ –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                                    size=typography.text_lg,
                                    weight=typography.weight_semibold,
                                    color=colors.text_primary,
                                ),
                                ft.TextButton(
                                    text="–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ ‚Üí",
                                    on_click=lambda e: self.on_navigate("my_list") if self.on_navigate else None,
                                    style=ft.ButtonStyle(color=colors.primary),
                                ),
                            ],
                            alignment=ft.MainAxisAlignment.SPACE_BETWEEN,
                        ),
                        ft.Column(
                            controls=history_items,
                            spacing=0,
                        ),
                    ],
                    spacing=spacing.md,
                ),
            )
        
        self.activity_section = ft.Container(
            content=ft.Column(
                controls=[favorites_section, history_section],
                spacing=0,
            ),
            bgcolor=colors.surface,
            border_radius=spacing.border_radius_xl,
            padding=spacing.xl,
        )
        
        return self.activity_section
    
    def _create_edit_form(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        
        if not self.current_user:
            return ft.Container()
        
        # –ü–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        username_field = ft.TextField(
            label="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            value=self.current_user.get('username', ''),
            bgcolor=colors.surface,
            border_color=colors.border,
            focused_border_color=colors.primary,
            color=colors.text_primary,
        )
        
        email_field = ft.TextField(
            label="Email",
            value=self.current_user.get('email', ''),
            bgcolor=colors.surface,
            border_color=colors.border,
            focused_border_color=colors.primary,
            color=colors.text_primary,
        )
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_buttons = ft.Row(
            controls=[
                ft.ElevatedButton(
                    text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                    bgcolor=colors.success,
                    color=colors.text_primary,
                    on_click=lambda e: self._save_profile_changes(username_field.value, email_field.value),
                ),
                ft.ElevatedButton(
                    text="–û—Ç–º–µ–Ω–∞",
                    bgcolor=colors.surface,
                    color=colors.text_primary,
                    on_click=self._cancel_edit,
                ),
            ],
            spacing=spacing.md,
            alignment=ft.MainAxisAlignment.END,
        )
        
        self.edit_form = ft.Container(
            content=ft.Column(
                controls=[
                    ft.Text(
                        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è",
                        size=typography.text_xl,
                        weight=typography.weight_bold,
                        color=colors.text_primary,
                    ),
                    username_field,
                    email_field,
                    action_buttons,
                ],
                spacing=spacing.lg,
            ),
            bgcolor=colors.surface,
            border_radius=spacing.border_radius_xl,
            padding=spacing.xl,
            margin=ft.margin.only(bottom=spacing.xl),
            visible=self.is_editing,
        )
        
        return self.edit_form
    
    def _create_loading_indicator(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        return ft.Container(
            content=ft.Column(
                controls=[
                    ft.ProgressRing(
                        width=48,
                        height=48,
                        color=colors.primary,
                    ),
                    ft.Text(
                        "–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...",
                        size=typography.text_lg,
                        color=colors.text_secondary,
                        text_align=ft.TextAlign.CENTER,
                    )
                ],
                spacing=spacing.lg,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                alignment=ft.MainAxisAlignment.CENTER,
            ),
            alignment=ft.alignment.center,
            height=400,
            visible=self.is_loading,
        )
    
    def _format_date(self, date_string: Optional[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
        if not date_string:
            return ""
        
        try:
            dt = datetime.fromisoformat(date_string)
            return dt.strftime("%d.%m.%Y")
        except:
            return date_string
    
    async def _show_loading(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.is_loading = True
        if self.page:
            self.update()
    
    async def _hide_loading(self):
        """–°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.is_loading = False
        if self.page:
            self.update()
    
    def _toggle_edit_mode(self, e):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.is_editing = not self.is_editing
        if self.page:
            self.update()
    
    def _cancel_edit(self, e):
        """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.is_editing = False
        if self.page:
            self.update()
    
    def _save_profile_changes(self, username: str, email: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            if not self.current_user:
                return
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not username or len(username) < 3:
                self._show_error("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
                return
            
            if not email or '@' not in email:
                self._show_error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            success = db_manager.update_user(
                self.current_user['id'],
                username=username,
                email=email
            )
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                self.current_user['username'] = username
                self.current_user['email'] = email
                
                self.is_editing = False
                
                if self.page:
                    self.update()
                    self.page.show_snack_bar(
                        ft.SnackBar(
                            content=ft.Text("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"),
                            bgcolor=colors.success
                        )
                    )
                
                logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: {username}")
            else:
                self._show_error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            self._show_error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
    
    def _show_error(self, message: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        if self.page:
            self.page.show_snack_bar(
                ft.SnackBar(
                    content=ft.Text(message),
                    bgcolor=colors.error
                )
            )
    
    def _logout(self, e):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        if self.on_logout:
            self.on_logout()
    
    def update_user(self, user: Optional[Dict]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        self.current_user = user
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if user:
            asyncio.create_task(self.load_user_data())
        
        if self.page:
            self.update()
    
    def build(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ UI —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è"""
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not self.current_user:
            return ft.Container(
                content=ft.Column(
                    controls=[
                        ft.Icon(icons.person, size=96, color=colors.text_muted),
                        ft.Text(
                            "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
                            size=typography.text_2xl,
                            weight=typography.weight_bold,
                            color=colors.text_muted,
                        ),
                        ft.Text(
                            "–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è",
                            size=typography.text_lg,
                            color=colors.text_muted,
                            text_align=ft.TextAlign.CENTER,
                        ),
                    ],
                    spacing=spacing.lg,
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                    alignment=ft.MainAxisAlignment.CENTER,
                ),
                alignment=ft.alignment.center,
                expand=True,
            )
        
        # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞
        if self.is_loading:
            return self._create_loading_indicator()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content_sections = [
            self._create_profile_header(),
        ]
        
        # –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞)
        if self.is_editing:
            content_sections.append(self._create_edit_form())
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
        content_sections.extend([
            self._create_stats_section(),
            self._create_achievements_section(),
            self._create_activity_section(),
        ])
        
        return ft.Container(
            content=ft.Column(
                controls=content_sections,
                spacing=0,
                scroll=ft.ScrollMode.AUTO,
            ),
            padding=spacing.xxl,
            expand=True,
        )

# ===== –≠–ö–°–ü–û–†–¢ =====

__all__ = ["ProfilePage"]