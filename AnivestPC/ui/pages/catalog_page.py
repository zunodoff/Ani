"""
üì∫ ANIVEST DESKTOP - –°–¢–†–ê–ù–ò–¶–ê –ö–ê–¢–ê–õ–û–ì–ê
====================================
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –ø–æ–∏—Å–∫–æ–º –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∞–Ω–∏–º–µ
"""

import flet as ft
import asyncio
import logging
from typing import Dict, Any, Callable, Optional, List
from datetime import datetime

from config.theme import colors, icons, spacing, typography
from config.settings import ANIME_GENRES, ANIME_TYPES, ANIME_STATUSES, SEASONS
from core.api.anime_service import anime_service

from ..components.anime_card import AnimeCard, CompactAnimeCard, ListAnimeCard
from ..components.search_bar import AnivesetSearchBar

logger = logging.getLogger(__name__)

class CatalogPage(ft.UserControl):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–Ω–∏–º–µ"""
    
    def __init__(
        self,
        on_anime_click: Optional[Callable[[Dict], None]] = None,
        on_favorite_click: Optional[Callable[[Dict, bool], None]] = None,
        current_user: Optional[Dict] = None
    ):
        super().__init__()
        
        self.on_anime_click = on_anime_click
        self.on_favorite_click = on_favorite_click
        self.current_user = current_user
        
        # –î–∞–Ω–Ω—ã–µ
        self.search_results = []
        self.popular_anime = []
        self.is_search_active = False
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_loading = False
        self.current_query = ""
        self.current_filters = {}
        self.view_mode = "grid"  # grid, list, compact
        self.sort_mode = "popularity"  # popularity, rating, year, name
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.search_bar = None
        self.results_container = None
        self.loading_indicator = None
        self.view_controls = None
        self.stats_container = None
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        self.current_page = 1
        self.items_per_page = 24
        self.total_items = 0
    
    async def load_initial_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞"""
        try:
            await self._show_loading("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω–∏–º–µ –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞...")
            self.popular_anime = await anime_service.get_popular_anime(48)
            self.search_results = self.popular_anime.copy()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.total_items = len(self.search_results)
            
            await self._hide_loading()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            if self.page:
                self.update()
            
            logger.info(f"–ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω: {len(self.popular_anime)} –∞–Ω–∏–º–µ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
            await self._hide_loading()
            
            if self.page:
                self.update()
    
    def _create_header(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        return ft.Container(
            content=ft.Column(
                controls=[
                    ft.Row(
                        controls=[
                            ft.Column(
                                controls=[
                                    ft.Text(
                                        "üì∫ –ö–∞—Ç–∞–ª–æ–≥ –∞–Ω–∏–º–µ",
                                        size=typography.text_3xl,
                                        weight=typography.weight_bold,
                                        color=colors.text_primary,
                                    ),
                                    ft.Text(
                                        "–ù–∞–π–¥–∏—Ç–µ —Å–≤–æ—ë –∏–¥–µ–∞–ª—å–Ω–æ–µ –∞–Ω–∏–º–µ —Å—Ä–µ–¥–∏ —Ç—ã—Å—è—á —Ç–∞–π—Ç–ª–æ–≤",
                                        size=typography.text_lg,
                                        color=colors.text_secondary,
                                    ),
                                ],
                                spacing=spacing.sm,
                                expand=True,
                            ),
                            
                            # –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                            ft.Column(
                                controls=[
                                    ft.Row(
                                        controls=[
                                            ft.ElevatedButton(
                                                content=ft.Row(
                                                    controls=[
                                                        ft.Text("üî•", size=typography.text_md),
                                                        ft.Text("–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ", size=typography.text_sm),
                                                    ],
                                                    spacing=spacing.xs,
                                                    tight=True,
                                                ),
                                                bgcolor=colors.secondary if not self.is_search_active else colors.surface,
                                                color=colors.text_primary,
                                                on_click=self._show_popular,
                                                style=ft.ButtonStyle(
                                                    padding=ft.padding.symmetric(horizontal=spacing.md, vertical=spacing.sm),
                                                ),
                                            ),
                                            
                                            ft.ElevatedButton(
                                                content=ft.Row(
                                                    controls=[
                                                        ft.Text("üåü", size=typography.text_md),
                                                        ft.Text("–ù–æ–≤–∏–Ω–∫–∏", size=typography.text_sm),
                                                    ],
                                                    spacing=spacing.xs,
                                                    tight=True,
                                                ),
                                                bgcolor=colors.surface,
                                                color=colors.text_primary,
                                                on_click=self._show_seasonal,
                                                style=ft.ButtonStyle(
                                                    padding=ft.padding.symmetric(horizontal=spacing.md, vertical=spacing.sm),
                                                ),
                                            ),
                                            
                                            ft.ElevatedButton(
                                                content=ft.Row(
                                                    controls=[
                                                        ft.Text("‚≠ê", size=typography.text_md),
                                                        ft.Text("–¢–æ–ø", size=typography.text_sm),
                                                    ],
                                                    spacing=spacing.xs,
                                                    tight=True,
                                                ),
                                                bgcolor=colors.surface,
                                                color=colors.text_primary,
                                                on_click=self._show_top_rated,
                                                style=ft.ButtonStyle(
                                                    padding=ft.padding.symmetric(horizontal=spacing.md, vertical=spacing.sm),
                                                ),
                                            ),
                                        ],
                                        spacing=spacing.sm,
                                    )
                                ],
                                horizontal_alignment=ft.CrossAxisAlignment.END,
                            ),
                        ],
                        alignment=ft.MainAxisAlignment.SPACE_BETWEEN,
                        vertical_alignment=ft.CrossAxisAlignment.START,
                    ),
                ],
                spacing=spacing.lg,
            ),
            margin=ft.margin.only(bottom=spacing.xl),
        )
    
    def _create_search_section(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞"""
        self.search_bar = AnivesetSearchBar(
            width=800,
            on_search=self._on_search,
            on_filters_change=self._on_filters_change,
            placeholder="–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∂–∞–Ω—Ä—É, –≥–æ–¥—É..."
        )
        
        return ft.Container(
            content=self.search_bar,
            alignment=ft.alignment.center,
            margin=ft.margin.only(bottom=spacing.xl),
        )
    
    def _create_controls_bar(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        
        # –†–µ–∂–∏–º—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        view_modes = ft.Row(
            controls=[
                ft.Text(
                    "–í–∏–¥:",
                    size=typography.text_md,
                    color=colors.text_secondary,
                ),
                
                ft.SegmentedButton(
                    segments=[
                        ft.Segment(
                            value="grid",
                            icon=ft.Icon(icons.movie),
                            label=ft.Text("–°–µ—Ç–∫–∞", size=typography.text_sm),
                        ),
                        ft.Segment(
                            value="list",
                            icon=ft.Icon(icons.list),
                            label=ft.Text("–°–ø–∏—Å–æ–∫", size=typography.text_sm),
                        ),
                        ft.Segment(
                            value="compact",
                            icon=ft.Icon(icons.view_list),
                            label=ft.Text("–ö–æ–º–ø–∞–∫—Ç", size=typography.text_sm),
                        ),
                    ],
                    selected={self.view_mode},
                    on_change=self._on_view_mode_change,
                ),
            ],
            spacing=spacing.md,
            vertical_alignment=ft.CrossAxisAlignment.CENTER,
        )
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        sort_controls = ft.Row(
            controls=[
                ft.Text(
                    "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:",
                    size=typography.text_md,
                    color=colors.text_secondary,
                ),
                
                ft.Dropdown(
                    value=self.sort_mode,
                    options=[
                        ft.dropdown.Option(key="popularity", text="–ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏"),
                        ft.dropdown.Option(key="rating", text="–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É"),
                        ft.dropdown.Option(key="year", text="–ü–æ –≥–æ–¥—É"),
                        ft.dropdown.Option(key="name", text="–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é"),
                    ],
                    width=180,
                    bgcolor=colors.surface,
                    border_color=colors.border,
                    focused_border_color=colors.primary,
                    color=colors.text_primary,
                    text_size=typography.text_sm,
                    on_change=self._on_sort_change,
                ),
            ],
            spacing=spacing.md,
            vertical_alignment=ft.CrossAxisAlignment.CENTER,
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.stats_container = ft.Container(
            content=self._create_results_stats(),
        )
        
        self.view_controls = ft.Container(
            content=ft.Row(
                controls=[
                    view_modes,
                    ft.VerticalDivider(width=1, color=colors.border),
                    sort_controls,
                    ft.Container(expand=True),  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                    self.stats_container,
                ],
                alignment=ft.MainAxisAlignment.SPACE_BETWEEN,
                vertical_alignment=ft.CrossAxisAlignment.CENTER,
            ),
            bgcolor=colors.surface,
            border_radius=spacing.border_radius_md,
            padding=spacing.md,
            margin=ft.margin.only(bottom=spacing.lg),
        )
        
        return self.view_controls
    
    def _create_results_stats(self) -> ft.Row:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.search_results:
            return ft.Row()
        
        start_item = (self.current_page - 1) * self.items_per_page + 1
        end_item = min(self.current_page * self.items_per_page, self.total_items)
        
        stats_text = f"–ü–æ–∫–∞–∑–∞–Ω–æ {start_item}-{end_item} –∏–∑ {self.total_items}"
        
        if self.is_search_active:
            stats_text += f" ‚Ä¢ –ü–æ–∏—Å–∫: \"{self.current_query}\""
        
        return ft.Row(
            controls=[
                ft.Text(
                    stats_text,
                    size=typography.text_sm,
                    color=colors.text_muted,
                ),
                
                # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞
                ft.IconButton(
                    icon=icons.close,
                    icon_color=colors.text_muted,
                    icon_size=spacing.icon_sm,
                    tooltip="–°–±—Ä–æ—Å–∏—Ç—å –ø–æ–∏—Å–∫",
                    on_click=self._clear_search,
                    visible=self.is_search_active,
                ),
            ],
            spacing=spacing.sm,
            vertical_alignment=ft.CrossAxisAlignment.CENTER,
        )
    
    def _create_results_grid(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        if not self.search_results:
            return self._create_empty_state()
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        start_idx = (self.current_page - 1) * self.items_per_page
        end_idx = min(start_idx + self.items_per_page, len(self.search_results))
        page_results = self.search_results[start_idx:end_idx]
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if self.view_mode == "list":
            cards = self._create_list_cards(page_results)
            content = ft.Column(
                controls=cards,
                spacing=spacing.md,
                scroll=ft.ScrollMode.AUTO,
            )
        elif self.view_mode == "compact":
            cards = self._create_compact_cards(page_results)
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Ä—è–¥—ã
            rows = []
            cards_per_row = 4
            for i in range(0, len(cards), cards_per_row):
                row_cards = cards[i:i + cards_per_row]
                row = ft.Row(
                    controls=row_cards,
                    spacing=spacing.md,
                    alignment=ft.MainAxisAlignment.START,
                )
                rows.append(row)
            
            content = ft.Column(
                controls=rows,
                spacing=spacing.md,
                scroll=ft.ScrollMode.AUTO,
            )
        else:  # grid
            cards = self._create_grid_cards(page_results)
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤ —Ä—è–¥—ã
            rows = []
            cards_per_row = 5
            for i in range(0, len(cards), cards_per_row):
                row_cards = cards[i:i + cards_per_row]
                row = ft.Row(
                    controls=row_cards,
                    spacing=spacing.lg,
                    alignment=ft.MainAxisAlignment.START,
                )
                rows.append(row)
            
            content = ft.Column(
                controls=rows,
                spacing=spacing.lg,
                scroll=ft.ScrollMode.AUTO,
            )
        
        self.results_container = ft.Container(
            content=content,
            expand=True,
        )
        
        return self.results_container
    
    def _create_grid_cards(self, anime_list: List[Dict]) -> List[AnimeCard]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Å–µ—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        cards = []
        for anime in anime_list:
            card = AnimeCard(
                anime_data=anime,
                width=220,
                height=320,
                on_click=self.on_anime_click,
                on_favorite=self.on_favorite_click,
                current_user=self.current_user
            )
            cards.append(card)
        return cards
    
    def _create_list_cards(self, anime_list: List[Dict]) -> List[ListAnimeCard]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Å–ø–∏—Å–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        cards = []
        for anime in anime_list:
            card = ListAnimeCard(
                anime_data=anime,
                width=800,
                height=140,
                on_click=self.on_anime_click,
                on_favorite=self.on_favorite_click,
                current_user=self.current_user
            )
            cards.append(card)
        return cards
    
    def _create_compact_cards(self, anime_list: List[Dict]) -> List[CompactAnimeCard]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        cards = []
        for anime in anime_list:
            card = CompactAnimeCard(
                anime_data=anime,
                on_click=self.on_anime_click,
                on_favorite=self.on_favorite_click,
                current_user=self.current_user
            )
            cards.append(card)
        return cards
    
    def _create_pagination(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        
        if self.total_items <= self.items_per_page:
            return ft.Container()
        
        total_pages = (self.total_items + self.items_per_page - 1) // self.items_per_page
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_controls = []
        
        # –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        pagination_controls.append(
            ft.IconButton(
                icon=icons.prev_track,
                icon_color=colors.text_secondary if self.current_page > 1 else colors.text_muted,
                tooltip="–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
                on_click=lambda e: self._go_to_page(self.current_page - 1),
                disabled=self.current_page <= 1,
            )
        )
        
        # –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬±2 –æ—Ç —Ç–µ–∫—É—â–µ–π)
        start_page = max(1, self.current_page - 2)
        end_page = min(total_pages, self.current_page + 2)
        
        if start_page > 1:
            pagination_controls.append(
                ft.TextButton(
                    text="1",
                    on_click=lambda e: self._go_to_page(1),
                    style=ft.ButtonStyle(color=colors.text_secondary),
                )
            )
            if start_page > 2:
                pagination_controls.append(
                    ft.Text("...", color=colors.text_muted)
                )
        
        for page_num in range(start_page, end_page + 1):
            is_current = page_num == self.current_page
            pagination_controls.append(
                ft.ElevatedButton(
                    text=str(page_num),
                    bgcolor=colors.primary if is_current else colors.surface,
                    color=colors.text_primary,
                    on_click=lambda e, p=page_num: self._go_to_page(p),
                    style=ft.ButtonStyle(
                        padding=ft.padding.symmetric(horizontal=spacing.md, vertical=spacing.sm),
                    ),
                )
            )
        
        if end_page < total_pages:
            if end_page < total_pages - 1:
                pagination_controls.append(
                    ft.Text("...", color=colors.text_muted)
                )
            pagination_controls.append(
                ft.TextButton(
                    text=str(total_pages),
                    on_click=lambda e: self._go_to_page(total_pages),
                    style=ft.ButtonStyle(color=colors.text_secondary),
                )
            )
        
        # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        pagination_controls.append(
            ft.IconButton(
                icon=icons.next_track,
                icon_color=colors.text_secondary if self.current_page < total_pages else colors.text_muted,
                tooltip="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
                on_click=lambda e: self._go_to_page(self.current_page + 1),
                disabled=self.current_page >= total_pages,
            )
        )
        
        return ft.Container(
            content=ft.Row(
                controls=pagination_controls,
                spacing=spacing.sm,
                alignment=ft.MainAxisAlignment.CENTER,
            ),
            margin=ft.margin.symmetric(vertical=spacing.xl),
        )
    
    def _create_empty_state(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É—Å—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if self.is_search_active:
            # –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            return ft.Container(
                content=ft.Column(
                    controls=[
                        ft.Icon(icons.search, size=96, color=colors.text_muted),
                        ft.Text(
                            "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                            size=typography.text_2xl,
                            weight=typography.weight_bold,
                            color=colors.text_muted,
                        ),
                        ft.Text(
                            f"–ü–æ –∑–∞–ø—Ä–æ—Å—É \"{self.current_query}\" –∞–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                            size=typography.text_lg,
                            color=colors.text_muted,
                            text_align=ft.TextAlign.CENTER,
                        ),
                        ft.Text(
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã",
                            size=typography.text_md,
                            color=colors.text_muted,
                            text_align=ft.TextAlign.CENTER,
                        ),
                        ft.ElevatedButton(
                            text="–°–±—Ä–æ—Å–∏—Ç—å –ø–æ–∏—Å–∫",
                            bgcolor=colors.primary,
                            color=colors.text_primary,
                            on_click=self._clear_search,
                        ),
                    ],
                    spacing=spacing.lg,
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                    alignment=ft.MainAxisAlignment.CENTER,
                ),
                alignment=ft.alignment.center,
                height=400,
            )
        else:
            # –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            return ft.Container(
                content=ft.Column(
                    controls=[
                        ft.Icon(icons.error, size=96, color=colors.error),
                        ft.Text(
                            "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞",
                            size=typography.text_2xl,
                            weight=typography.weight_bold,
                            color=colors.text_muted,
                        ),
                        ft.ElevatedButton(
                            text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                            bgcolor=colors.primary,
                            color=colors.text_primary,
                            on_click=lambda e: asyncio.create_task(self.load_initial_data()),
                        ),
                    ],
                    spacing=spacing.lg,
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                    alignment=ft.MainAxisAlignment.CENTER,
                ),
                alignment=ft.alignment.center,
                height=400,
            )
    
    def _create_loading_indicator(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.loading_indicator = ft.Container(
            content=ft.Column(
                controls=[
                    ft.ProgressRing(
                        width=48,
                        height=48,
                        color=colors.primary,
                    ),
                    ft.Text(
                        "–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ...",
                        size=typography.text_lg,
                        color=colors.text_secondary,
                        text_align=ft.TextAlign.CENTER,
                    )
                ],
                spacing=spacing.lg,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                alignment=ft.MainAxisAlignment.CENTER,
            ),
            alignment=ft.alignment.center,
            height=400,
            visible=self.is_loading,
        )
        
        return self.loading_indicator
    
    async def _show_loading(self, message: str = "–ó–∞–≥—Ä—É–∑–∫–∞..."):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.is_loading = True
        
        if self.loading_indicator:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
            text_control = self.loading_indicator.content.controls[1]
            text_control.value = message
            self.loading_indicator.visible = True
        
        if self.results_container:
            self.results_container.visible = False
        
        if self.page:
            self.update()
    
    async def _hide_loading(self):
        """–°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.is_loading = False
        
        if self.loading_indicator:
            self.loading_indicator.visible = False
        
        if self.results_container:
            self.results_container.visible = True
        
        if self.page:
            self.update()
    
    async def _on_search(self, query: str, filters: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞"""
        try:
            await self._show_loading("–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ...")
            
            self.current_query = query
            self.current_filters = filters
            self.is_search_active = bool(query or filters)
            self.current_page = 1  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            if query or filters:
                self.search_results = await anime_service.search_anime(query, filters)
            else:
                # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
                self.search_results = self.popular_anime.copy()
                self.is_search_active = False
            
            self._sort_results()
            self.total_items = len(self.search_results)
            
            await self._hide_loading()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            if self.page:
                self.update()
            
            logger.info(f"–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω: '{query}', –Ω–∞–π–¥–µ–Ω–æ {len(self.search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            await self._hide_loading()
    
    async def _on_filters_change(self, filters: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        # –§–∏–ª—å—Ç—Ä—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ _on_search
        pass
    
    def _on_view_mode_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if e.control.selected:
            self.view_mode = list(e.control.selected)[0]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if self.page:
                self.update()
    
    def _on_sort_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        self.sort_mode = e.control.value
        self._sort_results()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if self.page:
            self.update()
    
    def _sort_results(self):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.search_results:
            return
        
        if self.sort_mode == "rating":
            self.search_results.sort(
                key=lambda x: float(x.get('material_data', {}).get('shikimori_rating', 0) or 0),
                reverse=True
            )
        elif self.sort_mode == "year":
            self.search_results.sort(
                key=lambda x: int(x.get('material_data', {}).get('year', 0) or 0),
                reverse=True
            )
        elif self.sort_mode == "name":
            self.search_results.sort(
                key=lambda x: x.get('material_data', {}).get('title', '').lower()
            )
        else:  # popularity (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            self.search_results.sort(
                key=lambda x: int(x.get('material_data', {}).get('shikimori_votes', 0) or 0),
                reverse=True
            )
    
    def _go_to_page(self, page_num: int):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        if page_num < 1 or page_num > ((self.total_items + self.items_per_page - 1) // self.items_per_page):
            return
        
        self.current_page = page_num
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if self.page:
            self.update()
    
    def _clear_search(self, e=None):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞"""
        self.current_query = ""
        self.current_filters = {}
        self.is_search_active = False
        self.current_page = 1
        self.search_results = self.popular_anime.copy()
        self.total_items = len(self.search_results)
        
        # –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        if self.search_bar:
            self.search_bar.set_search_query("")
            self.search_bar.set_filters({})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        if self.page:
            self.update()
    
    def _show_popular(self, e):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω–∏–º–µ"""
        asyncio.create_task(self._load_popular())
    
    def _show_seasonal(self, e):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∑–æ–Ω–Ω—ã–µ –∞–Ω–∏–º–µ"""
        asyncio.create_task(self._load_seasonal())
    
    def _show_top_rated(self, e):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É"""
        asyncio.create_task(self._load_top_rated())
    
    async def _load_popular(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ"""
        try:
            await self._show_loading("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ...")
            
            self.search_results = await anime_service.get_popular_anime(48)
            self.is_search_active = False
            self.current_page = 1
            self.total_items = len(self.search_results)
            
            await self._hide_loading()
            
            if self.page:
                self.update()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö: {e}")
            await self._hide_loading()
    
    async def _load_seasonal(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–∑–æ–Ω–Ω—ã—Ö –∞–Ω–∏–º–µ"""
        try:
            await self._show_loading("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–∏–Ω–æ–∫ —Å–µ–∑–æ–Ω–∞...")
            
            self.search_results = await anime_service.get_seasonal_anime(limit=48)
            self.is_search_active = False
            self.current_page = 1
            self.total_items = len(self.search_results)
            
            await self._hide_loading()
            
            if self.page:
                self.update()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∑–æ–Ω–Ω—ã—Ö: {e}")
            await self._hide_loading()
    
    async def _load_top_rated(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ø –∞–Ω–∏–º–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É"""
        try:
            await self._show_loading("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ø –∞–Ω–∏–º–µ...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
            results = await anime_service.get_popular_anime(48)
            results.sort(
                key=lambda x: float(x.get('material_data', {}).get('shikimori_rating', 0) or 0),
                reverse=True
            )
            
            self.search_results = results
            self.is_search_active = False
            self.current_page = 1
            self.total_items = len(self.search_results)
            
            await self._hide_loading()
            
            if self.page:
                self.update()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø –∞–Ω–∏–º–µ: {e}")
            await self._hide_loading()
    
    def set_search_query(self, query: str, filters: Dict = None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑–≤–Ω–µ"""
        if self.search_bar:
            self.search_bar.set_search_query(query)
            if filters:
                self.search_bar.set_filters(filters)
        
        asyncio.create_task(self._on_search(query, filters or {}))
    
    def update_user(self, user: Optional[Dict]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        self.current_user = user
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if self.page:
            self.update()
    
    def build(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ UI —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞"""
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content_sections = [
            self._create_header(),
            self._create_search_section(),
            self._create_controls_bar(),
        ]
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞
        if self.is_loading:
            content_sections.append(self._create_loading_indicator())
        else:
            content_sections.extend([
                self._create_results_grid(),
                self._create_pagination(),
            ])
        
        return ft.Container(
            content=ft.Column(
                controls=content_sections,
                spacing=0,
                scroll=ft.ScrollMode.AUTO,
            ),
            padding=spacing.xxl,
            expand=True,
        )

# ===== –≠–ö–°–ü–û–†–¢ =====

__all__ = ["CatalogPage"]