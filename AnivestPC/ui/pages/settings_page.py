"""
‚öôÔ∏è ANIVEST DESKTOP - –°–¢–†–ê–ù–ò–¶–ê –ù–ê–°–¢–†–û–ï–ö
====================================
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import flet as ft
import asyncio
import logging
from typing import Dict, Any, Callable, Optional, List
import json
import os

from config.theme import colors, icons, spacing, typography
from config.settings import USER_SETTINGS, HOTKEYS, APP_NAME, APP_VERSION, DATABASE_CONFIG, CACHE_CONFIG
from core.database.database import db_manager
from core.api.anime_service import anime_service

logger = logging.getLogger(__name__)

class SettingsPage(ft.UserControl):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(
        self,
        current_user: Optional[Dict] = None,
        on_theme_change: Optional[Callable[[str], None]] = None,
        on_restart_required: Optional[Callable] = None
    ):
        super().__init__()
        
        self.current_user = current_user
        self.on_theme_change = on_theme_change
        self.on_restart_required = on_restart_required
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.app_settings = USER_SETTINGS.copy()
        self.hotkey_settings = HOTKEYS.copy()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.has_changes = False
        self.is_saving = False
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.settings_sections = {}
        self.save_button = None
        self.reset_button = None
    
    def _create_appearance_section(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞"""
        
        # –¢–µ–º–∞
        theme_selector = ft.RadioGroup(
            content=ft.Column(
                controls=[
                    ft.Radio(value="dark", label="–¢–µ–º–Ω–∞—è —Ç–µ–º–∞"),
                    ft.Radio(value="light", label="–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"),
                    ft.Radio(value="auto", label="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"),
                ],
                spacing=spacing.sm,
            ),
            value=self.app_settings.get("theme", "dark"),
            on_change=self._on_theme_change,
        )
        
        # –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        language_dropdown = ft.Dropdown(
            value=self.app_settings.get("language", "ru"),
            options=[
                ft.dropdown.Option(key="ru", text="–†—É—Å—Å–∫–∏–π"),
                ft.dropdown.Option(key="en", text="English (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"),
            ],
            width=200,
            bgcolor=colors.surface,
            border_color=colors.border,
            focused_border_color=colors.primary,
            color=colors.text_primary,
            on_change=self._on_language_change,
        )
        
        # –®–∏—Ä–∏–Ω–∞ —Å–∞–π–¥–±–∞—Ä–∞
        sidebar_width_slider = ft.Slider(
            min=150,
            max=300,
            divisions=15,
            value=self.app_settings.get("sidebar_width", 180),
            label="–®–∏—Ä–∏–Ω–∞ —Å–∞–π–¥–±–∞—Ä–∞: {value}px",
            active_color=colors.primary,
            inactive_color=colors.border,
            thumb_color=colors.primary,
            on_change=self._on_sidebar_width_change,
        )
        
        return ft.Container(
            content=ft.Column(
                controls=[
                    ft.Text(
                        "üé® –í–Ω–µ—à–Ω–∏–π –≤–∏–¥",
                        size=typography.text_xl,
                        weight=typography.weight_bold,
                        color=colors.text_primary,
                    ),
                    
                    self._create_setting_item(
                        "–¢–µ–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                        theme_selector
                    ),
                    
                    self._create_setting_item(
                        "–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                        language_dropdown
                    ),
                    
                    self._create_setting_item(
                        "–®–∏—Ä–∏–Ω–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏",
                        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —à–∏—Ä–∏–Ω—É –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏",
                        sidebar_width_slider
                    ),
                ],
                spacing=spacing.lg,
            ),
            bgcolor=colors.surface,
            border_radius=spacing.border_radius_lg,
            padding=spacing.xl,
            margin=ft.margin.only(bottom=spacing.xl),
        )
    
    def _create_player_section(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–µ–µ—Ä–∞"""
        
        # –ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        autoplay_switch = ft.Switch(
            value=self.app_settings.get("auto_play", False),
            active_color=colors.primary,
            on_change=self._on_autoplay_change,
        )
        
        # –ì—Ä–æ–º–∫–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        volume_slider = ft.Slider(
            min=0,
            max=1,
            divisions=20,
            value=self.app_settings.get("player_volume", 0.8),
            label="–ì—Ä–æ–º–∫–æ—Å—Ç—å: {value:.0%}",
            active_color=colors.primary,
            inactive_color=colors.border,
            thumb_color=colors.primary,
            on_change=self._on_volume_change,
        )
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        quality_dropdown = ft.Dropdown(
            value=self.app_settings.get("quality_preference", "720p"),
            options=[
                ft.dropdown.Option(key="480p", text="480p (SD)"),
                ft.dropdown.Option(key="720p", text="720p (HD)"),
                ft.dropdown.Option(key="1080p", text="1080p (Full HD)"),
            ],
            width=200,
            bgcolor=colors.surface,
            border_color=colors.border,
            focused_border_color=colors.primary,
            color=colors.text_primary,
            on_change=self._on_quality_change,
        )
        
        # –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        remember_position_switch = ft.Switch(
            value=self.app_settings.get("remember_position", True),
            active_color=colors.primary,
            on_change=self._on_remember_position_change,
        )
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–∞—Ç—å –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ
        auto_mark_switch = ft.Switch(
            value=self.app_settings.get("auto_mark_watched", True),
            active_color=colors.primary,
            on_change=self._on_auto_mark_change,
        )
        
        return ft.Container(
            content=ft.Column(
                controls=[
                    ft.Text(
                        "üé¨ –í–∏–¥–µ–æ –ø–ª–µ–µ—Ä",
                        size=typography.text_xl,
                        weight=typography.weight_bold,
                        color=colors.text_primary,
                    ),
                    
                    self._create_setting_item(
                        "–ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ",
                        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏",
                        autoplay_switch
                    ),
                    
                    self._create_setting_item(
                        "–ì—Ä–æ–º–∫–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                        "–£—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–µ–µ—Ä–∞",
                        volume_slider
                    ),
                    
                    self._create_setting_item(
                        "–ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ",
                        "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
                        quality_dropdown
                    ),
                    
                    self._create_setting_item(
                        "–ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é",
                        "–°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è",
                        remember_position_switch
                    ),
                    
                    self._create_setting_item(
                        "–ê–≤—Ç–æ–æ—Ç–º–µ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
                        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–∞—Ç—å –∞–Ω–∏–º–µ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ",
                        auto_mark_switch
                    ),
                ],
                spacing=spacing.lg,
            ),
            bgcolor=colors.surface,
            border_radius=spacing.border_radius_lg,
            padding=spacing.xl,
            margin=ft.margin.only(bottom=spacing.xl),
        )
    
    def _create_notifications_section(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        
        # –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notifications_switch = ft.Switch(
            value=self.app_settings.get("notifications", True),
            active_color=colors.primary,
            on_change=self._on_notifications_change,
        )
        
        return ft.Container(
            content=ft.Column(
                controls=[
                    ft.Text(
                        "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                        size=typography.text_xl,
                        weight=typography.weight_bold,
                        color=colors.text_primary,
                    ),
                    
                    self._create_setting_item(
                        "–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                        "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
                        notifications_switch
                    ),
                ],
                spacing=spacing.lg,
            ),
            bgcolor=colors.surface,
            border_radius=spacing.border_radius_lg,
            padding=spacing.xl,
            margin=ft.margin.only(bottom=spacing.xl),
        )
    
    def _create_data_section(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏"""
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
        clear_cache_button = ft.ElevatedButton(
            content=ft.Row(
                controls=[
                    ft.Icon(icons.delete, size=spacing.icon_sm),
                    ft.Text("–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à", size=typography.text_sm),
                ],
                spacing=spacing.xs,
                tight=True,
            ),
            bgcolor=colors.warning,
            color=colors.text_primary,
            on_click=self._clear_cache,
            style=ft.ButtonStyle(
                padding=ft.padding.symmetric(horizontal=spacing.md, vertical=spacing.sm),
            ),
        )
        
        export_data_button = ft.ElevatedButton(
            content=ft.Row(
                controls=[
                    ft.Icon(icons.download, size=spacing.icon_sm),
                    ft.Text("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", size=typography.text_sm),
                ],
                spacing=spacing.xs,
                tight=True,
            ),
            bgcolor=colors.info,
            color=colors.text_primary,
            on_click=self._export_data,
            style=ft.ButtonStyle(
                padding=ft.padding.symmetric(horizontal=spacing.md, vertical=spacing.sm),
            ),
        )
        
        reset_settings_button = ft.ElevatedButton(
            content=ft.Row(
                controls=[
                    ft.Icon(icons.settings, size=spacing.icon_sm),
                    ft.Text("–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫", size=typography.text_sm),
                ],
                spacing=spacing.xs,
                tight=True,
            ),
            bgcolor=colors.error,
            color=colors.text_primary,
            on_click=self._reset_settings,
            style=ft.ButtonStyle(
                padding=ft.padding.symmetric(horizontal=spacing.md, vertical=spacing.sm),
            ),
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        cache_stats = self._get_cache_stats()
        db_stats = self._get_database_stats()
        
        stats_info = ft.Column(
            controls=[
                ft.Text(
                    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:",
                    size=typography.text_md,
                    weight=typography.weight_semibold,
                    color=colors.text_primary,
                ),
                ft.Text(
                    f"‚Ä¢ –†–∞–∑–º–µ—Ä –∫–µ—à–∞: {cache_stats.get('cache_size', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                    size=typography.text_sm,
                    color=colors.text_secondary,
                ),
                ft.Text(
                    f"‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ –ë–î: {db_stats.get('total_records', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                    size=typography.text_sm,
                    color=colors.text_secondary,
                ),
            ],
            spacing=spacing.xs,
        )
        
        return ft.Container(
            content=ft.Column(
                controls=[
                    ft.Text(
                        "üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏",
                        size=typography.text_xl,
                        weight=typography.weight_bold,
                        color=colors.text_primary,
                    ),
                    
                    stats_info,
                    
                    ft.Row(
                        controls=[
                            clear_cache_button,
                            export_data_button,
                            reset_settings_button,
                        ],
                        spacing=spacing.md,
                        wrap=True,
                    ),
                ],
                spacing=spacing.lg,
            ),
            bgcolor=colors.surface,
            border_radius=spacing.border_radius_lg,
            padding=spacing.xl,
            margin=ft.margin.only(bottom=spacing.xl),
        )
    
    def _create_about_section(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
        
        return ft.Container(
            content=ft.Column(
                controls=[
                    ft.Text(
                        "‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
                        size=typography.text_xl,
                        weight=typography.weight_bold,
                        color=colors.text_primary,
                    ),
                    
                    ft.Row(
                        controls=[
                            ft.Column(
                                controls=[
                                    ft.Text(
                                        APP_NAME,
                                        size=typography.text_2xl,
                                        weight=typography.weight_bold,
                                        color=colors.primary,
                                    ),
                                    ft.Text(
                                        f"–í–µ—Ä—Å–∏—è {APP_VERSION}",
                                        size=typography.text_lg,
                                        color=colors.text_secondary,
                                    ),
                                    ft.Text(
                                        "–î–µ—Å–∫—Ç–æ–ø–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∏–º–µ",
                                        size=typography.text_md,
                                        color=colors.text_muted,
                                    ),
                                ],
                                spacing=spacing.sm,
                            ),
                            
                            ft.Container(
                                content=ft.Icon(
                                    icons.movie,
                                    size=64,
                                    color=colors.primary,
                                ),
                                width=80,
                                height=80,
                                bgcolor=colors.primary + "20",
                                border_radius=40,
                                alignment=ft.alignment.center,
                            ),
                        ],
                        alignment=ft.MainAxisAlignment.SPACE_BETWEEN,
                        vertical_alignment=ft.CrossAxisAlignment.CENTER,
                    ),
                    
                    ft.Column(
                        controls=[
                            ft.Text(
                                "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:",
                                size=typography.text_md,
                                weight=typography.weight_semibold,
                                color=colors.text_primary,
                            ),
                            ft.Text(
                                "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Shikimori API –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–Ω–∏–º–µ",
                                size=typography.text_sm,
                                color=colors.text_secondary,
                            ),
                            ft.Text(
                                "‚Ä¢ –í–∏–¥–µ–æ —á–µ—Ä–µ–∑ Kodik —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–∑–≤—É—á–µ–∫",
                                size=typography.text_sm,
                                color=colors.text_secondary,
                            ),
                            ft.Text(
                                "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
                                size=typography.text_sm,
                                color=colors.text_secondary,
                            ),
                            ft.Text(
                                "‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π",
                                size=typography.text_sm,
                                color=colors.text_secondary,
                            ),
                        ],
                        spacing=spacing.xs,
                    ),
                ],
                spacing=spacing.lg,
            ),
            bgcolor=colors.surface,
            border_radius=spacing.border_radius_lg,
            padding=spacing.xl,
        )
    
    def _create_setting_item(self, title: str, description: str, control: ft.Control) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        return ft.Container(
            content=ft.Row(
                controls=[
                    ft.Column(
                        controls=[
                            ft.Text(
                                title,
                                size=typography.text_md,
                                weight=typography.weight_semibold,
                                color=colors.text_primary,
                            ),
                            ft.Text(
                                description,
                                size=typography.text_sm,
                                color=colors.text_muted,
                            ),
                        ],
                        spacing=spacing.xs,
                        expand=True,
                    ),
                    control,
                ],
                alignment=ft.MainAxisAlignment.SPACE_BETWEEN,
                vertical_alignment=ft.CrossAxisAlignment.CENTER,
            ),
            bgcolor=colors.card,
            border_radius=spacing.border_radius_md,
            padding=spacing.md,
            margin=ft.margin.only(bottom=spacing.sm),
        )
    
    def _create_action_buttons(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π"""
        
        self.save_button = ft.ElevatedButton(
            content=ft.Row(
                controls=[
                    ft.Icon(icons.check_circle, size=spacing.icon_md),
                    ft.Text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", size=typography.text_md),
                ],
                spacing=spacing.sm,
                tight=True,
            ),
            bgcolor=colors.success,
            color=colors.text_primary,
            on_click=self._save_settings,
            disabled=not self.has_changes,
            style=ft.ButtonStyle(
                padding=ft.padding.symmetric(horizontal=spacing.lg, vertical=spacing.md),
            ),
        )
        
        self.reset_button = ft.ElevatedButton(
            content=ft.Row(
                controls=[
                    ft.Icon(icons.close, size=spacing.icon_md),
                    ft.Text("–û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", size=typography.text_md),
                ],
                spacing=spacing.sm,
                tight=True,
            ),
            bgcolor=colors.surface,
            color=colors.text_primary,
            on_click=self._reset_changes,
            disabled=not self.has_changes,
            style=ft.ButtonStyle(
                padding=ft.padding.symmetric(horizontal=spacing.lg, vertical=spacing.md),
            ),
        )
        
        return ft.Container(
            content=ft.Row(
                controls=[
                    ft.Container(expand=True),  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                    self.reset_button,
                    self.save_button,
                ],
                spacing=spacing.md,
                alignment=ft.MainAxisAlignment.END,
            ),
            bgcolor=colors.surface,
            border_radius=spacing.border_radius_lg,
            padding=spacing.lg,
        )
    
    def _get_cache_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞ –æ—Ç anime_service
            service_stats = anime_service.get_service_stats()
            cache_size = service_stats.get('poster_cache_size', 0) + service_stats.get('merge_cache_size', 0)
            
            return {
                'cache_size': f"{cache_size} –∑–∞–ø–∏—Å–µ–π",
                'poster_cache': service_stats.get('poster_cache_size', 0),
                'merge_cache': service_stats.get('merge_cache_size', 0),
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞: {e}")
            return {'cache_size': '–û—à–∏–±–∫–∞'}
    
    def _get_database_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            stats = db_manager.get_stats()
            total_records = sum(stats.values())
            
            return {
                'total_records': total_records,
                'users': stats.get('users', 0),
                'comments': stats.get('comments', 0),
                'favorites': stats.get('favorites', 0),
                'watch_history': stats.get('watch_history', 0),
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}")
            return {'total_records': '–û—à–∏–±–∫–∞'}
    
    def _mark_changed(self):
        """–û—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        self.has_changes = True
        self._update_action_buttons()
    
    def _update_action_buttons(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π"""
        if self.save_button:
            self.save_button.disabled = not self.has_changes
            self.save_button.update()
        
        if self.reset_button:
            self.reset_button.disabled = not self.has_changes
            self.reset_button.update()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
    def _on_theme_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ç–µ–º—ã"""
        self.app_settings["theme"] = e.control.value
        self._mark_changed()
        
        if self.on_theme_change:
            self.on_theme_change(e.control.value)
    
    def _on_language_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
        self.app_settings["language"] = e.control.value
        self._mark_changed()
    
    def _on_sidebar_width_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã —Å–∞–π–¥–±–∞—Ä–∞"""
        self.app_settings["sidebar_width"] = int(e.control.value)
        self._mark_changed()
    
    def _on_autoplay_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        self.app_settings["auto_play"] = e.control.value
        self._mark_changed()
    
    def _on_volume_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        self.app_settings["player_volume"] = e.control.value
        self._mark_changed()
    
    def _on_quality_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞"""
        self.app_settings["quality_preference"] = e.control.value
        self._mark_changed()
    
    def _on_remember_position_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        self.app_settings["remember_position"] = e.control.value
        self._mark_changed()
    
    def _on_auto_mark_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–æ—Ç–º–µ—Ç–∫–∏"""
        self.app_settings["auto_mark_watched"] = e.control.value
        self._mark_changed()
    
    def _on_notifications_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.app_settings["notifications"] = e.control.value
        self._mark_changed()
    
    def _save_settings(self, e):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            self.is_saving = True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            USER_SETTINGS.update(self.app_settings)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
            if self.current_user:
                for key, value in self.app_settings.items():
                    db_manager.set_user_setting(self.current_user['id'], key, value)
            
            self.has_changes = False
            self.is_saving = False
            
            self._update_action_buttons()
            
            if self.page:
                self.page.show_snack_bar(
                    ft.SnackBar(
                        content=ft.Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"),
                        bgcolor=colors.success
                    )
                )
            
            logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
        except Exception as ex:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex}")
            self.is_saving = False
            
            if self.page:
                self.page.show_snack_bar(
                    ft.SnackBar(
                        content=ft.Text("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"),
                        bgcolor=colors.error
                    )
                )
    
    def _reset_changes(self, e):
        """–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        self.app_settings = USER_SETTINGS.copy()
        self.has_changes = False
        
        self._update_action_buttons()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        if self.page:
            self.update()
    
    def _clear_cache(self, e):
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞"""
        try:
            # –û—á–∏—â–∞–µ–º –∫–µ—à anime_service
            anime_service.clear_cache()
            
            if self.page:
                self.page.show_snack_bar(
                    ft.SnackBar(
                        content=ft.Text("–ö–µ—à –æ—á–∏—â–µ–Ω"),
                        bgcolor=colors.success
                    )
                )
            
            logger.info("–ö–µ—à –æ—á–∏—â–µ–Ω")
            
        except Exception as ex:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {ex}")
            
            if self.page:
                self.page.show_snack_bar(
                    ft.SnackBar(
                        content=ft.Text("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞"),
                        bgcolor=colors.error
                    )
                )
    
    def _export_data(self, e):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –≤ JSON
            if self.page:
                self.page.show_snack_bar(
                    ft.SnackBar(
                        content=ft.Text("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö"),
                        bgcolor=colors.info
                    )
                )
            
            logger.info("–ó–∞–ø—Ä–æ—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
            
        except Exception as ex:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {ex}")
    
    def _reset_settings(self, e):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
            from config.settings import USER_SETTINGS as DEFAULT_SETTINGS
            
            self.app_settings = DEFAULT_SETTINGS.copy()
            USER_SETTINGS.update(self.app_settings)
            
            # –û—á–∏—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            if self.current_user:
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                pass
            
            self.has_changes = False
            self._update_action_buttons()
            
            if self.page:
                self.update()
                self.page.show_snack_bar(
                    ft.SnackBar(
                        content=ft.Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"),
                        bgcolor=colors.success
                    )
                )
            
            logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
            
        except Exception as ex:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex}")
            
            if self.page:
                self.page.show_snack_bar(
                    ft.SnackBar(
                        content=ft.Text("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"),
                        bgcolor=colors.error
                    )
                )
    
    def update_user(self, user: Optional[Dict]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        self.current_user = user
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if user:
            try:
                user_settings = db_manager.get_all_user_settings(user['id'])
                self.app_settings.update(user_settings)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        
        if self.page:
            self.update()
    
    def build(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ UI —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        content_sections = [
            ft.Text(
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                size=typography.text_3xl,
                weight=typography.weight_bold,
                color=colors.text_primary,
            ),
            
            self._create_appearance_section(),
            self._create_player_section(),
            self._create_notifications_section(),
            self._create_data_section(),
            self._create_about_section(),
            
            self._create_action_buttons(),
        ]
        
        return ft.Container(
            content=ft.Column(
                controls=content_sections,
                spacing=spacing.md,
                scroll=ft.ScrollMode.AUTO,
            ),
            padding=spacing.xxl,
            expand=True,
        )

# ===== –≠–ö–°–ü–û–†–¢ =====

__all__ = ["SettingsPage"]