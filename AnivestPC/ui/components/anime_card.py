"""
üéØ ANIVEST DESKTOP - –ö–ê–†–¢–û–ß–ö–ê –ê–ù–ò–ú–ï
=================================
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∞–Ω–∏–º–µ —Å –ø–æ—Å—Ç–µ—Ä–æ–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
"""

import flet as ft
import asyncio
import logging
from typing import Dict, Any, Callable, Optional

from config.theme import colors, icons, spacing, typography, get_card_style, get_rating_color
from core.database.database import db_manager

logger = logging.getLogger(__name__)

class AnimeCard(ft.UserControl):
    """–ö–∞—Ä—Ç–æ—á–∫–∞ –∞–Ω–∏–º–µ —Å –ø–æ—Å—Ç–µ—Ä–æ–º, –Ω–∞–∑–≤–∞–Ω–∏–µ–º, —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    
    def __init__(
        self, 
        anime_data: Dict[str, Any],
        width: int = 200,
        height: int = 300,
        show_actions: bool = True,
        compact: bool = False,
        on_click: Optional[Callable] = None,
        on_favorite: Optional[Callable] = None,
        current_user: Optional[Dict] = None
    ):
        super().__init__()
        
        self.anime_data = anime_data
        self.width = width
        self.height = height
        self.show_actions = show_actions
        self.compact = compact
        self.on_click = on_click
        self.on_favorite = on_favorite
        self.current_user = current_user
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ anime_data
        self.material_data = anime_data.get('material_data', {})
        self.anime_id = anime_data.get('id', '')
        self.shikimori_id = anime_data.get('shikimori_id', '')
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_favorite = False
        self.is_loading = False
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.poster_image = None
        self.favorite_button = None
        self.rating_container = None
        self.loading_indicator = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if self.current_user:
            asyncio.create_task(self._check_favorite_status())
    
    async def _check_favorite_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        try:
            if self.current_user and self.anime_id:
                self.is_favorite = db_manager.is_in_favorites(
                    self.current_user['id'], 
                    self.anime_id
                )
                await self._update_favorite_button()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
    
    async def _update_favorite_button(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        if self.favorite_button:
            self.favorite_button.icon = icons.favorite if self.is_favorite else icons.star_border
            self.favorite_button.icon_color = colors.secondary if self.is_favorite else colors.text_muted
            self.favorite_button.tooltip = "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" if self.is_favorite else "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
            
            if self.page:
                self.favorite_button.update()
    
    def _get_title(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–Ω–∏–º–µ"""
        return (
            self.material_data.get('title') or 
            self.material_data.get('anime_title') or 
            self.anime_data.get('title') or 
            '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∞–Ω–∏–º–µ'
        )
    
    def _get_poster_url(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –ø–æ—Å—Ç–µ—Ä–∞"""
        return (
            self.material_data.get('poster_url') or
            self.material_data.get('anime_poster_url') or
            'https://via.placeholder.com/300x400/8B5CF6/FFFFFF?text=–ù–µ—Ç+–ø–æ—Å—Ç–µ—Ä–∞'
        )
    
    def _get_rating(self) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
        rating = self.material_data.get('shikimori_rating')
        if rating:
            try:
                return float(rating)
            except:
                pass
        return None
    
    def _get_episodes_info(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —ç–ø–∏–∑–æ–¥–∞—Ö"""
        episodes_total = self.material_data.get('episodes_total')
        episodes_aired = self.material_data.get('episodes_aired')
        anime_status = self.material_data.get('anime_status', '')
        
        if episodes_total:
            if anime_status.lower() == 'ongoing' and episodes_aired:
                return f"{episodes_aired}/{episodes_total} —ç–ø."
            else:
                return f"{episodes_total} —ç–ø."
        elif episodes_aired:
            return f"{episodes_aired} —ç–ø."
        else:
            return "? —ç–ø."
    
    def _get_year(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–¥–∞ –≤—ã—Ö–æ–¥–∞"""
        year = (
            self.material_data.get('year') or 
            self.anime_data.get('year')
        )
        return str(year) if year else "?"
    
    def _get_status_color(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        status = self.material_data.get('anime_status', '').lower()
        status_colors = {
            'released': colors.success,
            'ongoing': colors.info,
            'anons': colors.warning
        }
        return status_colors.get(status, colors.text_muted)
    
    def _get_genres_text(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∂–∞–Ω—Ä–æ–≤"""
        genres = (
            self.material_data.get('anime_genres') or 
            self.material_data.get('all_genres') or 
            []
        )
        
        if isinstance(genres, list) and genres:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∂–∞–Ω—Ä–∞
            return ', '.join(genres[:3])
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    async def _on_card_click(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ"""
        if self.on_click and not self.is_loading:
            try:
                self.is_loading = True
                await self._show_loading()
                await self.on_click(self.anime_data)
            except Exception as ex:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É: {ex}")
            finally:
                self.is_loading = False
                await self._hide_loading()
    
    async def _on_favorite_click(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É"""
        if not self.current_user:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if self.page:
                self.page.show_snack_bar(
                    ft.SnackBar(
                        content=ft.Text("–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"),
                        bgcolor=colors.warning
                    )
                )
            return
        
        try:
            self.is_loading = True
            await self._show_loading()
            
            if self.is_favorite:
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                success = db_manager.remove_from_favorites(
                    self.current_user['id'], 
                    self.anime_id
                )
                if success:
                    self.is_favorite = False
                    message = "–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
                else:
                    message = "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                success = db_manager.add_to_favorites(
                    self.current_user['id'],
                    self.anime_id,
                    self._get_title(),
                    self._get_poster_url()
                )
                if success:
                    self.is_favorite = True
                    message = "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
                else:
                    message = "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            await self._update_favorite_button()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if self.page:
                snack_color = colors.success if success else colors.error
                self.page.show_snack_bar(
                    ft.SnackBar(
                        content=ft.Text(message),
                        bgcolor=snack_color
                    )
                )
            
            # –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.on_favorite:
                await self.on_favorite(self.anime_data, self.is_favorite)
                
        except Exception as ex:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º: {ex}")
            if self.page:
                self.page.show_snack_bar(
                    ft.SnackBar(
                        content=ft.Text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"),
                        bgcolor=colors.error
                    )
                )
        finally:
            self.is_loading = False
            await self._hide_loading()
    
    async def _show_loading(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏"""
        if self.loading_indicator:
            self.loading_indicator.visible = True
            if self.page:
                self.loading_indicator.update()
    
    async def _hide_loading(self):
        """–°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏"""
        if self.loading_indicator:
            self.loading_indicator.visible = False
            if self.page:
                self.loading_indicator.update()
    
    def build(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ UI –∫–∞—Ä—Ç–æ—á–∫–∏"""
        rating = self._get_rating()
        
        # –ü–æ—Å—Ç–µ—Ä —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        poster_stack = ft.Stack(
            controls=[
                # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Å—Ç–µ—Ä
                ft.Container(
                    content=ft.Image(
                        src=self._get_poster_url(),
                        width=self.width,
                        height=self.height - 80 if not self.compact else self.height - 60,
                        fit=ft.ImageFit.COVER,
                        error_content=ft.Container(
                            content=ft.Column(
                                controls=[
                                    ft.Icon(
                                        icons.movie,
                                        size=48,
                                        color=colors.text_muted
                                    ),
                                    ft.Text(
                                        "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                                        size=typography.text_sm,
                                        color=colors.text_muted,
                                        text_align=ft.TextAlign.CENTER
                                    )
                                ],
                                alignment=ft.MainAxisAlignment.CENTER,
                                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                                spacing=spacing.sm
                            ),
                            alignment=ft.alignment.center,
                            bgcolor=colors.card,
                        )
                    ),
                    border_radius=ft.border_radius.vertical(
                        top=spacing.border_radius_lg
                    ),
                    clip_behavior=ft.ClipBehavior.HARD_EDGE,
                ),
                
                # –ì—Ä–∞–¥–∏–µ–Ω—Ç —Å–Ω–∏–∑—É –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                ft.Container(
                    gradient=ft.LinearGradient(
                        begin=ft.alignment.bottom_center,
                        end=ft.alignment.center,
                        colors=["#00000080", "#00000000"]
                    ),
                    border_radius=ft.border_radius.vertical(
                        top=spacing.border_radius_lg
                    ),
                ),
                
                # –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (–µ—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
                ft.Container(
                    content=ft.IconButton(
                        icon=icons.star_border,
                        icon_color=colors.text_muted,
                        icon_size=spacing.icon_md,
                        tooltip="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                        on_click=self._on_favorite_click,
                        ref=self.favorite_button  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
                    ) if self.show_actions and self.current_user else None,
                    alignment=ft.alignment.top_right,
                    padding=spacing.sm,
                ) if self.show_actions and self.current_user else ft.Container(),
                
                # –†–µ–π—Ç–∏–Ω–≥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                ft.Container(
                    content=ft.Container(
                        content=ft.Row(
                            controls=[
                                ft.Icon(
                                    icons.star,
                                    size=spacing.icon_sm,
                                    color=colors.accent
                                ),
                                ft.Text(
                                    f"{rating:.1f}",
                                    size=typography.text_sm,
                                    weight=typography.weight_semibold,
                                    color=colors.text_primary
                                )
                            ],
                            spacing=4,
                            tight=True
                        ),
                        bgcolor=colors.background + "E6",  # 90% –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
                        border_radius=spacing.border_radius_sm,
                        padding=ft.padding.symmetric(
                            horizontal=spacing.sm,
                            vertical=4
                        )
                    ),
                    alignment=ft.alignment.top_left,
                    padding=spacing.sm,
                ) if rating and rating > 0 else ft.Container(),
                
                # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                ft.Container(
                    content=ft.ProgressRing(
                        width=32,
                        height=32,
                        color=colors.primary
                    ),
                    alignment=ft.alignment.center,
                    bgcolor=colors.background + "CC",  # 80% –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
                    visible=False,
                    ref=self.loading_indicator  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
                )
            ],
            width=self.width,
            height=self.height - 80 if not self.compact else self.height - 60,
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–Ω–∏–º–µ
        info_section = ft.Container(
            content=ft.Column(
                controls=[
                    # –ù–∞–∑–≤–∞–Ω–∏–µ
                    ft.Text(
                        self._get_title(),
                        size=typography.text_md if not self.compact else typography.text_sm,
                        weight=typography.weight_semibold,
                        color=colors.text_primary,
                        max_lines=2,
                        overflow=ft.TextOverflow.ELLIPSIS,
                        text_align=ft.TextAlign.CENTER,
                    ),
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–µ—Å–ª–∏ –Ω–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º)
                    ft.Container(
                        content=ft.Row(
                            controls=[
                                # –ì–æ–¥
                                ft.Text(
                                    self._get_year(),
                                    size=typography.text_xs,
                                    color=colors.text_muted
                                ),
                                
                                ft.Text("‚Ä¢", size=typography.text_xs, color=colors.text_muted),
                                
                                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤
                                ft.Text(
                                    self._get_episodes_info(),
                                    size=typography.text_xs,
                                    color=colors.text_muted
                                ),
                                
                                ft.Text("‚Ä¢", size=typography.text_xs, color=colors.text_muted),
                                
                                # –°—Ç–∞—Ç—É—Å
                                ft.Container(
                                    content=ft.Text(
                                        self.material_data.get('anime_status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                                        size=typography.text_xs,
                                        color=colors.text_primary,
                                        weight=typography.weight_medium
                                    ),
                                    bgcolor=self._get_status_color() + "40",  # 25% –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
                                    border_radius=spacing.border_radius_sm,
                                    padding=ft.padding.symmetric(horizontal=6, vertical=2),
                                )
                            ],
                            alignment=ft.MainAxisAlignment.CENTER,
                            spacing=4,
                        ),
                        margin=ft.margin.only(top=spacing.xs)
                    ) if not self.compact else ft.Container(),
                    
                    # –ñ–∞–Ω—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏)
                    ft.Text(
                        self._get_genres_text(),
                        size=typography.text_xs,
                        color=colors.text_muted,
                        text_align=ft.TextAlign.CENTER,
                        max_lines=1,
                        overflow=ft.TextOverflow.ELLIPSIS,
                    ) if not self.compact else ft.Container(),
                ],
                spacing=spacing.xs,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                tight=True
            ),
            padding=spacing.md,
            height=80 if not self.compact else 60,
        )
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏
        card_container = ft.Container(
            content=ft.Column(
                controls=[poster_stack, info_section],
                spacing=0,
                tight=True
            ),
            width=self.width,
            height=self.height,
            bgcolor=colors.card,
            border_radius=spacing.border_radius_lg,
            shadow=ft.BoxShadow(
                spread_radius=0,
                blur_radius=15,
                color=colors.shadow,
                offset=ft.Offset(0, 5)
            ),
            animate=ft.animation.Animation(200, ft.AnimationCurve.EASE_OUT),
            on_click=self._on_card_click,
            ink=True,
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.poster_image = poster_stack
        
        return card_container
    
    def update_anime_data(self, new_anime_data: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∏–º–µ"""
        self.anime_data = new_anime_data
        self.material_data = new_anime_data.get('material_data', {})
        self.anime_id = new_anime_data.get('id', '')
        self.shikimori_id = new_anime_data.get('shikimori_id', '')
        
        # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        if self.page:
            self.update()

# ===== –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –í–ê–†–ò–ê–ù–¢–´ –ö–ê–†–¢–û–ß–ï–ö =====

class CompactAnimeCard(AnimeCard):
    """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∞–Ω–∏–º–µ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤"""
    
    def __init__(self, anime_data: Dict[str, Any], **kwargs):
        super().__init__(
            anime_data=anime_data,
            width=150,
            height=220,
            compact=True,
            **kwargs
        )

class LargeAnimeCard(AnimeCard):
    """–ë–æ–ª—å—à–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∞–Ω–∏–º–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    
    def __init__(self, anime_data: Dict[str, Any], **kwargs):
        super().__init__(
            anime_data=anime_data,
            width=240,
            height=360,
            compact=False,
            **kwargs
        )

class ListAnimeCard(ft.UserControl):
    """–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∞–Ω–∏–º–µ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤"""
    
    def __init__(
        self,
        anime_data: Dict[str, Any],
        width: int = 400,
        height: int = 120,
        on_click: Optional[Callable] = None,
        on_favorite: Optional[Callable] = None,
        current_user: Optional[Dict] = None
    ):
        super().__init__()
        
        self.anime_data = anime_data
        self.width = width
        self.height = height
        self.on_click = on_click
        self.on_favorite = on_favorite
        self.current_user = current_user
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.material_data = anime_data.get('material_data', {})
        self.anime_id = anime_data.get('id', '')
    
    def build(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏"""
        poster_size = self.height - 20  # –û—Ç—Å—Ç—É–ø—ã
        
        # –ü–æ—Å—Ç–µ—Ä
        poster = ft.Container(
            content=ft.Image(
                src=self.material_data.get('poster_url', ''),
                width=poster_size * 0.7,  # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –ø–æ—Å—Ç–µ—Ä–∞
                height=poster_size,
                fit=ft.ImageFit.COVER,
                error_content=ft.Container(
                    content=ft.Icon(icons.movie, size=32, color=colors.text_muted),
                    alignment=ft.alignment.center,
                    bgcolor=colors.surface,
                    width=poster_size * 0.7,
                    height=poster_size,
                )
            ),
            border_radius=spacing.border_radius_md,
            clip_behavior=ft.ClipBehavior.HARD_EDGE,
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        title = self.material_data.get('title', self.anime_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∞–Ω–∏–º–µ'))
        rating = self.material_data.get('shikimori_rating')
        episodes = self.material_data.get('episodes_total', '?')
        year = self.material_data.get('year', '?')
        
        info = ft.Container(
            content=ft.Column(
                controls=[
                    # –ù–∞–∑–≤–∞–Ω–∏–µ
                    ft.Text(
                        title,
                        size=typography.text_lg,
                        weight=typography.weight_semibold,
                        color=colors.text_primary,
                        max_lines=2,
                        overflow=ft.TextOverflow.ELLIPSIS,
                    ),
                    
                    # –†–µ–π—Ç–∏–Ω–≥ –∏ –≥–æ–¥
                    ft.Row(
                        controls=[
                            ft.Icon(icons.star, size=16, color=colors.accent) if rating else ft.Container(),
                            ft.Text(
                                f"{float(rating):.1f}" if rating else "",
                                size=typography.text_sm,
                                color=colors.text_secondary
                            ) if rating else ft.Container(),
                            
                            ft.Text("‚Ä¢", size=typography.text_sm, color=colors.text_muted) if rating else ft.Container(),
                            
                            ft.Text(
                                f"{year}",
                                size=typography.text_sm,
                                color=colors.text_secondary
                            ),
                            
                            ft.Text("‚Ä¢", size=typography.text_sm, color=colors.text_muted),
                            
                            ft.Text(
                                f"{episodes} —ç–ø.",
                                size=typography.text_sm,
                                color=colors.text_secondary
                            ),
                        ],
                        spacing=4,
                    ),
                    
                    # –û–ø–∏—Å–∞–Ω–∏–µ (–∫—Ä–∞—Ç–∫–æ–µ)
                    ft.Text(
                        self.material_data.get('description', ''),
                        size=typography.text_sm,
                        color=colors.text_muted,
                        max_lines=2,
                        overflow=ft.TextOverflow.ELLIPSIS,
                    ) if self.material_data.get('description') else ft.Container(),
                ],
                spacing=spacing.sm,
                expand=True,
                alignment=ft.MainAxisAlignment.START
            ),
            expand=True,
            padding=ft.padding.only(left=spacing.md),
        )
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions = ft.Column(
            controls=[
                ft.IconButton(
                    icon=icons.star_border,
                    icon_color=colors.text_muted,
                    tooltip="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                    on_click=lambda e: self.on_favorite(self.anime_data) if self.on_favorite else None
                ) if self.current_user else ft.Container(),
                
                ft.IconButton(
                    icon=icons.play_circle,
                    icon_color=colors.primary,
                    tooltip="–°–º–æ—Ç—Ä–µ—Ç—å",
                    on_click=lambda e: self.on_click(self.anime_data) if self.on_click else None
                ),
            ],
            spacing=spacing.sm,
            alignment=ft.MainAxisAlignment.CENTER
        )
        
        return ft.Container(
            content=ft.Row(
                controls=[poster, info, actions],
                spacing=0,
                alignment=ft.MainAxisAlignment.START,
                vertical_alignment=ft.CrossAxisAlignment.CENTER,
            ),
            width=self.width,
            height=self.height,
            bgcolor=colors.card,
            border_radius=spacing.border_radius_lg,
            padding=spacing.sm,
            shadow=ft.BoxShadow(
                spread_radius=0,
                blur_radius=10,
                color=colors.shadow,
                offset=ft.Offset(0, 2)
            ),
            on_click=lambda e: self.on_click(self.anime_data) if self.on_click else None,
            ink=True,
        )

# ===== –≠–ö–°–ü–û–†–¢ =====

__all__ = [
    "AnimeCard", "CompactAnimeCard", "LargeAnimeCard", "ListAnimeCard"
]