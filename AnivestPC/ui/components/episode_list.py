"""
üì∫ ANIVEST DESKTOP - –°–ü–ò–°–û–ö –≠–ü–ò–ó–û–î–û–í
==================================
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —ç–ø–∏–∑–æ–¥–∞–º –∞–Ω–∏–º–µ
"""

import flet as ft
import asyncio
import logging
from typing import Dict, Any, Callable, Optional, List
from collections import defaultdict

from config.theme import colors, icons, spacing, typography, get_button_style
from core.database.database import db_manager

logger = logging.getLogger(__name__)

class EpisodeItem(ft.UserControl):
    """–≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ - –æ–¥–∏–Ω —ç–ø–∏–∑–æ–¥"""
    
    def __init__(
        self,
        episode_data: Dict[str, Any],
        is_current: bool = False,
        is_watched: bool = False,
        on_click: Optional[Callable] = None,
        compact_mode: bool = False
    ):
        super().__init__()
        
        self.episode_data = episode_data
        self.is_current = is_current
        self.is_watched = is_watched
        self.on_click = on_click
        self.compact_mode = compact_mode
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç–ø–∏–∑–æ–¥–∞
        self.season = episode_data.get('season', 1)
        self.episode = episode_data.get('episode', 1)
        self.title = episode_data.get('title', f'–≠–ø–∏–∑–æ–¥ {self.episode}')
        self.link = episode_data.get('link', '')
        self.screenshot = episode_data.get('screenshot', '')
        self.duration = episode_data.get('duration', '')
    
    def _get_episode_number_display(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞"""
        if self.season > 1:
            return f"S{self.season}E{self.episode}"
        else:
            return f"{self.episode}"
    
    def build(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–∞ —ç–ø–∏–∑–æ–¥–∞"""
        
        # –ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        status_icon = None
        if self.is_current:
            status_icon = ft.Icon(
                icons.play_circle,
                color=colors.primary,
                size=spacing.icon_md
            )
        elif self.is_watched:
            status_icon = ft.Icon(
                icons.check_circle,
                color=colors.success,
                size=spacing.icon_sm
            )
        else:
            status_icon = ft.Container(width=spacing.icon_sm, height=spacing.icon_sm)
        
        if self.compact_mode:
            # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º - —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –∏ –∏–∫–æ–Ω–∫–∞
            content = ft.Container(
                content=ft.Row(
                    controls=[
                        status_icon,
                        ft.Text(
                            self._get_episode_number_display(),
                            size=typography.text_sm,
                            color=colors.text_primary if self.is_current else colors.text_secondary,
                            weight=typography.weight_semibold if self.is_current else typography.weight_normal,
                        ),
                    ],
                    spacing=spacing.sm,
                    alignment=ft.MainAxisAlignment.CENTER,
                ),
                width=60,
                height=40,
                bgcolor=colors.primary + "20" if self.is_current else "transparent",
                border=ft.border.all(
                    1, 
                    colors.primary if self.is_current else colors.border
                ),
                border_radius=spacing.border_radius_sm,
                padding=spacing.sm,
                on_click=lambda e: self.on_click(self.season, self.episode) if self.on_click else None,
                ink=True,
            )
        else:
            # –ü–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            
            # –ü—Ä–µ–≤—å—é —ç–ø–∏–∑–æ–¥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç)
            preview = ft.Container(
                content=ft.Image(
                    src=self.screenshot,
                    width=120,
                    height=68,  # 16:9 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
                    fit=ft.ImageFit.COVER,
                    error_content=ft.Container(
                        content=ft.Icon(
                            icons.movie,
                            size=spacing.icon_lg,
                            color=colors.text_muted
                        ),
                        alignment=ft.alignment.center,
                        bgcolor=colors.surface,
                    )
                ) if self.screenshot else ft.Container(
                    content=ft.Column(
                        controls=[
                            ft.Icon(
                                icons.movie,
                                size=spacing.icon_lg,
                                color=colors.text_muted
                            ),
                            ft.Text(
                                self._get_episode_number_display(),
                                size=typography.text_lg,
                                color=colors.text_primary,
                                weight=typography.weight_bold,
                                text_align=ft.TextAlign.CENTER,
                            ),
                        ],
                        alignment=ft.MainAxisAlignment.CENTER,
                        horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                        spacing=spacing.xs,
                    ),
                    alignment=ft.alignment.center,
                    bgcolor=colors.surface,
                ),
                width=120,
                height=68,
                border_radius=spacing.border_radius_sm,
                clip_behavior=ft.ClipBehavior.HARD_EDGE,
            )
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–ø–∏–∑–æ–¥–µ
            episode_info = ft.Container(
                content=ft.Column(
                    controls=[
                        # –ù–æ–º–µ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
                        ft.Text(
                            f"{self._get_episode_number_display()}. {self.title}",
                            size=typography.text_md,
                            color=colors.text_primary if self.is_current else colors.text_secondary,
                            weight=typography.weight_semibold if self.is_current else typography.weight_normal,
                            max_lines=2,
                            overflow=ft.TextOverflow.ELLIPSIS,
                        ),
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        ft.Row(
                            controls=[
                                status_icon,
                                ft.Text(
                                    "–¢–µ–∫—É—â–∏–π" if self.is_current else ("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω" if self.is_watched else "–ù–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω"),
                                    size=typography.text_xs,
                                    color=colors.primary if self.is_current else (colors.success if self.is_watched else colors.text_muted),
                                ),
                                ft.Text(
                                    f"‚Ä¢ {self.duration}" if self.duration else "",
                                    size=typography.text_xs,
                                    color=colors.text_muted,
                                ) if self.duration else ft.Container(),
                            ],
                            spacing=spacing.xs,
                        ),
                    ],
                    spacing=spacing.xs,
                    expand=True,
                ),
                expand=True,
                padding=ft.padding.only(left=spacing.md),
            )
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            play_button = ft.IconButton(
                icon=icons.play_circle if not self.is_current else icons.pause_circle,
                icon_color=colors.primary,
                icon_size=spacing.icon_lg,
                tooltip="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏" if not self.is_current else "–¢–µ–∫—É—â–∏–π —ç–ø–∏–∑–æ–¥",
                on_click=lambda e: self.on_click(self.season, self.episode) if self.on_click else None,
            )
            
            content = ft.Container(
                content=ft.Row(
                    controls=[
                        preview,
                        episode_info,
                        play_button,
                    ],
                    spacing=0,
                    vertical_alignment=ft.CrossAxisAlignment.CENTER,
                ),
                bgcolor=colors.primary + "10" if self.is_current else colors.surface,
                border=ft.border.all(
                    2 if self.is_current else 1,
                    colors.primary if self.is_current else colors.border
                ),
                border_radius=spacing.border_radius_md,
                padding=spacing.md,
                margin=ft.margin.symmetric(vertical=spacing.xs),
                on_click=lambda e: self.on_click(self.season, self.episode) if self.on_click else None,
                ink=True,
                animate=ft.animation.Animation(200, ft.AnimationCurve.EASE_OUT),
            )
        
        return content
    
    def update_status(self, is_current: bool, is_watched: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —ç–ø–∏–∑–æ–¥–∞"""
        self.is_current = is_current
        self.is_watched = is_watched
        if self.page:
            self.update()

class SeasonSelector(ft.UserControl):
    """–°–µ–ª–µ–∫—Ç–æ—Ä —Å–µ–∑–æ–Ω–æ–≤"""
    
    def __init__(
        self,
        seasons_list: List[int],
        current_season: int = 1,
        on_season_change: Optional[Callable] = None
    ):
        super().__init__()
        
        self.seasons_list = seasons_list
        self.current_season = current_season
        self.on_season_change = on_season_change
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.season_buttons = {}
    
    def build(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Å–µ–∑–æ–Ω–æ–≤"""
        if len(self.seasons_list) <= 1:
            # –ï—Å–ª–∏ —Å–µ–∑–æ–Ω –æ–¥–∏–Ω, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
            return ft.Container()
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–∑–æ–Ω–∞
        season_controls = []
        
        for season_num in self.seasons_list:
            is_current = season_num == self.current_season
            
            button = ft.Container(
                content=ft.Text(
                    f"–°–µ–∑–æ–Ω {season_num}",
                    size=typography.text_sm,
                    color=colors.text_primary if is_current else colors.text_secondary,
                    weight=typography.weight_semibold if is_current else typography.weight_normal,
                    text_align=ft.TextAlign.CENTER,
                ),
                bgcolor=colors.primary if is_current else colors.surface,
                border=ft.border.all(1, colors.primary if is_current else colors.border),
                border_radius=spacing.border_radius_sm,
                padding=ft.padding.symmetric(horizontal=spacing.md, vertical=spacing.sm),
                on_click=lambda e, s=season_num: self._on_season_click(s),
                ink=True,
                animate=ft.animation.Animation(200, ft.AnimationCurve.EASE_OUT),
            )
            
            self.season_buttons[season_num] = button
            season_controls.append(button)
        
        return ft.Container(
            content=ft.Row(
                controls=season_controls,
                spacing=spacing.sm,
                wrap=True,
            ),
            margin=ft.margin.only(bottom=spacing.md),
        )
    
    def _on_season_click(self, season_num: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Å–µ–∑–æ–Ω—É"""
        if season_num != self.current_season:
            self.current_season = season_num
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            for s_num, button in self.season_buttons.items():
                is_current = s_num == season_num
                
                button.bgcolor = colors.primary if is_current else colors.surface
                button.border = ft.border.all(1, colors.primary if is_current else colors.border)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                text_control = button.content
                text_control.color = colors.text_primary if is_current else colors.text_secondary
                text_control.weight = typography.weight_semibold if is_current else typography.weight_normal
                
                button.update()
            
            # –í—ã–∑—ã–≤–∞–µ–º callback
            if self.on_season_change:
                self.on_season_change(season_num)

class AnimeEpisodeList(ft.UserControl):
    """–°–ø–∏—Å–æ–∫ —ç–ø–∏–∑–æ–¥–æ–≤ –∞–Ω–∏–º–µ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ —Å–µ–∑–æ–Ω–∞–º"""
    
    def __init__(
        self,
        anime_data: Dict[str, Any],
        episodes_list: List[Dict[str, Any]],
        current_season: int = 1,
        current_episode: int = 1,
        current_user: Optional[Dict] = None,
        on_episode_select: Optional[Callable] = None,
        compact_mode: bool = False,
        max_height: Optional[int] = None
    ):
        super().__init__()
        
        self.anime_data = anime_data
        self.episodes_list = episodes_list
        self.current_season = current_season
        self.current_episode = current_episode
        self.current_user = current_user
        self.on_episode_select = on_episode_select
        self.compact_mode = compact_mode
        self.max_height = max_height
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ø–∏–∑–æ–¥—ã –ø–æ —Å–µ–∑–æ–Ω–∞–º
        self.episodes_by_season = self._group_episodes_by_season()
        self.seasons_list = sorted(self.episodes_by_season.keys())
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–∞—Ö
        self.watched_episodes = self._get_watched_episodes()
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.season_selector = None
        self.episodes_container = None
        self.episode_items = {}
    
    def _group_episodes_by_season(self) -> Dict[int, List[Dict]]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —ç–ø–∏–∑–æ–¥–æ–≤ –ø–æ —Å–µ–∑–æ–Ω–∞–º"""
        grouped = defaultdict(list)
        
        for episode in self.episodes_list:
            season = episode.get('season', 1)
            grouped[season].append(episode)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ø–∏–∑–æ–¥—ã –≤ –∫–∞–∂–¥–æ–º —Å–µ–∑–æ–Ω–µ
        for season in grouped:
            grouped[season].sort(key=lambda ep: ep.get('episode', 1))
        
        return dict(grouped)
    
    def _get_watched_episodes(self) -> set:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤"""
        watched = set()
        
        try:
            if self.current_user:
                anime_id = self.anime_data.get('id', '')
                progress = db_manager.get_watch_progress(
                    self.current_user['id'], 
                    anime_id
                )
                
                if progress:
                    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –≤—Å–µ —ç–ø–∏–∑–æ–¥—ã –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
                    for season in range(1, progress.season_number + 1):
                        if season < progress.season_number:
                            # –í—Å–µ —ç–ø–∏–∑–æ–¥—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–µ–∑–æ–Ω–æ–≤
                            if season in self.episodes_by_season:
                                for episode in self.episodes_by_season[season]:
                                    watched.add((season, episode.get('episode', 1)))
                        else:
                            # –≠–ø–∏–∑–æ–¥—ã —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
                            if season in self.episodes_by_season:
                                for episode in self.episodes_by_season[season]:
                                    ep_num = episode.get('episode', 1)
                                    if ep_num <= progress.episode_number:
                                        watched.add((season, ep_num))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤: {e}")
        
        return watched
    
    def _create_episodes_list(self, season: int) -> ft.Column:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–ø–∏–∑–æ–¥–æ–≤ –¥–ª—è —Å–µ–∑–æ–Ω–∞"""
        if season not in self.episodes_by_season:
            return ft.Column([])
        
        episode_controls = []
        
        for episode_data in self.episodes_by_season[season]:
            ep_season = episode_data.get('season', 1)
            ep_number = episode_data.get('episode', 1)
            
            is_current = (ep_season == self.current_season and 
                         ep_number == self.current_episode)
            is_watched = (ep_season, ep_number) in self.watched_episodes
            
            episode_item = EpisodeItem(
                episode_data=episode_data,
                is_current=is_current,
                is_watched=is_watched,
                on_click=self._on_episode_click,
                compact_mode=self.compact_mode
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.episode_items[(ep_season, ep_number)] = episode_item
            
            episode_controls.append(episode_item)
        
        if self.compact_mode:
            # –í –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ø–∏–∑–æ–¥—ã –≤ —Å–µ—Ç–∫–µ
            return ft.Column(
                controls=[
                    ft.GridView(
                        controls=episode_controls,
                        runs_count=6,  # 6 –∫–æ–ª–æ–Ω–æ–∫
                        max_extent=70,
                        child_aspect_ratio=1.5,
                        spacing=spacing.sm,
                        run_spacing=spacing.sm,
                    )
                ],
                scroll=ft.ScrollMode.AUTO,
            )
        else:
            # –í –ø–æ–ª–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
            return ft.Column(
                controls=episode_controls,
                spacing=spacing.xs,
                scroll=ft.ScrollMode.AUTO,
            )
    
    def _on_episode_click(self, season: int, episode: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —ç–ø–∏–∑–æ–¥—É"""
        if (season != self.current_season or episode != self.current_episode):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–ø–∏–∑–æ–¥
            old_key = (self.current_season, self.current_episode)
            new_key = (season, episode)
            
            self.current_season = season
            self.current_episode = episode
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–∞—Ä–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞
            if old_key in self.episode_items:
                old_item = self.episode_items[old_key]
                old_item.update_status(
                    is_current=False,
                    is_watched=old_key in self.watched_episodes
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞
            if new_key in self.episode_items:
                new_item = self.episode_items[new_key]
                new_item.update_status(
                    is_current=True,
                    is_watched=new_key in self.watched_episodes
                )
            
            # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ —Å–º–µ–Ω–∏–ª—Å—è —Å–µ–∑–æ–Ω
            if old_key[0] != season:
                if self.episodes_container:
                    self.episodes_container.content = self._create_episodes_list(season)
                    self.episodes_container.update()
            
            # –í—ã–∑—ã–≤–∞–µ–º callback
            if self.on_episode_select:
                asyncio.create_task(self.on_episode_select(season, episode))
            
            logger.info(f"–í—ã–±—Ä–∞–Ω —ç–ø–∏–∑–æ–¥ S{season}E{episode}")
    
    def _on_season_change(self, season: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Å–µ–∑–æ–Ω–∞"""
        if self.episodes_container:
            self.episodes_container.content = self._create_episodes_list(season)
            self.episodes_container.update()
    
    def update_current_episode(self, season: int, episode: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç–ø–∏–∑–æ–¥–∞"""
        if (season != self.current_season or episode != self.current_episode):
            old_key = (self.current_season, self.current_episode)
            new_key = (season, episode)
            
            self.current_season = season
            self.current_episode = episode
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
            if old_key in self.episode_items:
                self.episode_items[old_key].update_status(
                    is_current=False,
                    is_watched=old_key in self.watched_episodes
                )
            
            if new_key in self.episode_items:
                self.episode_items[new_key].update_status(
                    is_current=True,
                    is_watched=new_key in self.watched_episodes
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–µ–∑–æ–Ω–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if self.season_selector and old_key[0] != season:
                self.season_selector.current_season = season
                if self.season_selector.page:
                    self.season_selector.update()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —ç–ø–∏–∑–æ–¥–æ–≤
                if self.episodes_container:
                    self.episodes_container.content = self._create_episodes_list(season)
                    self.episodes_container.update()
    
    def mark_episode_watched(self, season: int, episode: int):
        """–û—Ç–º–µ—Ç–∏—Ç—å —ç–ø–∏–∑–æ–¥ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π"""
        self.watched_episodes.add((season, episode))
        
        if (season, episode) in self.episode_items:
            episode_item = self.episode_items[(season, episode)]
            episode_item.update_status(
                is_current=episode_item.is_current,
                is_watched=True
            )
    
    def get_total_episodes_count(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ø–∏–∑–æ–¥–æ–≤"""
        return len(self.episodes_list)
    
    def get_watched_episodes_count(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤"""
        return len(self.watched_episodes)
    
    def build(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ UI —Å–ø–∏—Å–∫–∞ —ç–ø–∏–∑–æ–¥–æ–≤"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        header = ft.Container(
            content=ft.Row(
                controls=[
                    ft.Text(
                        "–≠–ø–∏–∑–æ–¥—ã",
                        size=typography.text_lg,
                        weight=typography.weight_bold,
                        color=colors.text_primary,
                    ),
                    ft.Container(
                        content=ft.Text(
                            f"{self.get_watched_episodes_count()}/{self.get_total_episodes_count()}",
                            size=typography.text_sm,
                            color=colors.text_secondary,
                        ),
                        bgcolor=colors.surface,
                        border_radius=spacing.border_radius_sm,
                        padding=ft.padding.symmetric(
                            horizontal=spacing.sm,
                            vertical=spacing.xs
                        ),
                    ),
                ],
                alignment=ft.MainAxisAlignment.SPACE_BETWEEN,
            ),
            margin=ft.margin.only(bottom=spacing.md),
        )
        
        # –°–µ–ª–µ–∫—Ç–æ—Ä —Å–µ–∑–æ–Ω–æ–≤
        self.season_selector = SeasonSelector(
            seasons_list=self.seasons_list,
            current_season=self.current_season,
            on_season_change=self._on_season_change
        )
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ —ç–ø–∏–∑–æ–¥–æ–≤
        self.episodes_container = ft.Container(
            content=self._create_episodes_list(self.current_season),
            expand=True,
        )
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞
        main_column = ft.Column(
            controls=[
                header,
                self.season_selector,
                self.episodes_container,
            ],
            spacing=0,
            expand=True,
        )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ
        if self.max_height:
            return ft.Container(
                content=main_column,
                height=self.max_height,
            )
        
        return main_column

# ===== –ö–û–ú–ü–ê–ö–¢–ù–ê–Ø –í–ï–†–°–ò–Ø =====

class CompactEpisodeList(AnimeEpisodeList):
    """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–ø–∏—Å–∫–∞ —ç–ø–∏–∑–æ–¥–æ–≤"""
    
    def __init__(self, **kwargs):
        super().__init__(compact_mode=True, **kwargs)

# ===== –≠–ö–°–ü–û–†–¢ =====

__all__ = [
    "EpisodeItem", "SeasonSelector", "AnimeEpisodeList", "CompactEpisodeList"
]