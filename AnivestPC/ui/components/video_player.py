"""
üé¨ ANIVEST DESKTOP - –í–ò–î–ï–û –ü–õ–ï–ï–†
==============================
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∏–º–µ —á–µ—Ä–µ–∑ Kodik iframe
"""

import flet as ft
import asyncio
import logging
from typing import Dict, Any, Callable, Optional, List
from urllib.parse import urlparse, parse_qs

from config.theme import colors, icons, spacing, typography, get_button_style
from core.database.database import db_manager

logger = logging.getLogger(__name__)

class VideoControls(ft.UserControl):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ"""
    
    def __init__(
        self,
        on_play_pause: Optional[Callable] = None,
        on_fullscreen: Optional[Callable] = None,
        on_volume_change: Optional[Callable] = None,
        on_prev_episode: Optional[Callable] = None,
        on_next_episode: Optional[Callable] = None,
    ):
        super().__init__()
        
        self.on_play_pause = on_play_pause
        self.on_fullscreen = on_fullscreen
        self.on_volume_change = on_volume_change
        self.on_prev_episode = on_prev_episode
        self.on_next_episode = on_next_episode
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_playing = False
        self.is_fullscreen = False
        self.volume = 0.8
        self.current_time = 0
        self.duration = 0
        self.is_visible = True
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.play_button = None
        self.fullscreen_button = None
        self.volume_slider = None
        self.progress_slider = None
        self.time_display = None
        
        # –¢–∞–π–º–µ—Ä —Å–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
        self.hide_timer = None
    
    def _format_time(self, seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ MM:SS –∏–ª–∏ HH:MM:SS"""
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        seconds = seconds % 60
        
        if hours > 0:
            return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
        else:
            return f"{minutes:02d}:{seconds:02d}"
    
    def update_progress(self, current_time: int, duration: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        self.current_time = current_time
        self.duration = duration
        
        if self.progress_slider and duration > 0:
            self.progress_slider.value = (current_time / duration) * 100
            self.progress_slider.update()
        
        if self.time_display:
            time_text = f"{self._format_time(current_time)} / {self._format_time(duration)}"
            self.time_display.value = time_text
            self.time_display.update()
    
    def show_controls(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—ã"""
        self.is_visible = True
        self.visible = True
        if self.page:
            self.update()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä —Å–∫—Ä—ã—Ç–∏—è
        if self.hide_timer:
            self.hide_timer.cancel()
        
        self.hide_timer = asyncio.create_task(self._auto_hide_controls())
    
    async def _auto_hide_controls(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤"""
        try:
            await asyncio.sleep(3.0)  # –°–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            if self.is_playing:  # –°–∫—Ä—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                self.is_visible = False
                self.visible = False
                if self.page:
                    self.update()
        except asyncio.CancelledError:
            pass
    
    def build(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ UI –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤"""
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è/–ø–∞—É–∑—ã
        self.play_button = ft.IconButton(
            icon=icons.pause_circle if self.is_playing else icons.play_circle,
            icon_color=colors.text_primary,
            icon_size=spacing.icon_xl,
            tooltip="–ü–∞—É–∑–∞" if self.is_playing else "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏",
            on_click=lambda e: self.on_play_pause() if self.on_play_pause else None,
        )
        
        # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —ç–ø–∏–∑–æ–¥–æ–≤
        prev_button = ft.IconButton(
            icon=icons.prev_track,
            icon_color=colors.text_primary,
            tooltip="–ü—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ø–∏–∑–æ–¥",
            on_click=lambda e: self.on_prev_episode() if self.on_prev_episode else None,
        )
        
        next_button = ft.IconButton(
            icon=icons.next_track,
            icon_color=colors.text_primary,
            tooltip="–°–ª–µ–¥—É—é—â–∏–π —ç–ø–∏–∑–æ–¥",
            on_click=lambda e: self.on_next_episode() if self.on_next_episode else None,
        )
        
        # –°–ª–∞–π–¥–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_slider = ft.Slider(
            min=0,
            max=100,
            value=0,
            active_color=colors.primary,
            inactive_color=colors.border,
            thumb_color=colors.primary,
            on_change=self._on_seek,
            expand=True,
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        self.time_display = ft.Text(
            "00:00 / 00:00",
            color=colors.text_primary,
            size=typography.text_sm,
        )
        
        # –°–ª–∞–π–¥–µ—Ä –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        self.volume_slider = ft.Slider(
            min=0,
            max=1,
            value=self.volume,
            width=100,
            active_color=colors.primary,
            inactive_color=colors.border,
            thumb_color=colors.primary,
            on_change=self._on_volume_change,
        )
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.fullscreen_button = ft.IconButton(
            icon=icons.fullscreen if not self.is_fullscreen else icons.fullscreen_exit,
            icon_color=colors.text_primary,
            tooltip="–ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω" if not self.is_fullscreen else "–í—ã–π—Ç–∏ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞",
            on_click=lambda e: self.on_fullscreen() if self.on_fullscreen else None,
        )
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ —ç–ø–∏–∑–æ–¥–æ–≤
        top_controls = ft.Container(
            content=ft.Row(
                controls=[
                    prev_button,
                    next_button,
                    ft.Container(expand=True),  # Spacer
                    self.fullscreen_button,
                ],
                alignment=ft.MainAxisAlignment.SPACE_BETWEEN,
            ),
            bgcolor=colors.background + "80",  # 50% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            padding=spacing.sm,
            border_radius=spacing.border_radius_md,
        )
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∞–º–∏
        bottom_controls = ft.Container(
            content=ft.Column(
                controls=[
                    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                    ft.Container(
                        content=self.progress_slider,
                        padding=ft.padding.symmetric(horizontal=spacing.md),
                    ),
                    
                    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã
                    ft.Container(
                        content=ft.Row(
                            controls=[
                                self.play_button,
                                self.time_display,
                                ft.Container(expand=True),  # Spacer
                                ft.Icon(icons.volume_up, color=colors.text_primary, size=spacing.icon_sm),
                                self.volume_slider,
                            ],
                            alignment=ft.MainAxisAlignment.START,
                            vertical_alignment=ft.CrossAxisAlignment.CENTER,
                        ),
                        padding=ft.padding.symmetric(horizontal=spacing.md, vertical=spacing.sm),
                    ),
                ],
                spacing=0,
            ),
            bgcolor=colors.background + "90",  # 90% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            border_radius=spacing.border_radius_md,
        )
        
        return ft.Stack(
            controls=[
                # –í–µ—Ä—Ö–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã
                ft.Container(
                    content=top_controls,
                    alignment=ft.alignment.top_center,
                    padding=spacing.md,
                ),
                
                # –ù–∏–∂–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã
                ft.Container(
                    content=bottom_controls,
                    alignment=ft.alignment.bottom_center,
                    padding=spacing.md,
                ),
            ],
            expand=True,
        )
    
    def _on_seek(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–æ—Ç–∫–∏"""
        if self.duration > 0:
            seek_time = int((e.control.value / 100) * self.duration)
            # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–º–æ—Ç–∫–∏ –≤ iframe
            logger.info(f"Seek to: {seek_time}s")
    
    def _on_volume_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        self.volume = e.control.value
        if self.on_volume_change:
            self.on_volume_change(self.volume)
        logger.info(f"Volume: {self.volume}")
    
    def set_playing_state(self, is_playing: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        self.is_playing = is_playing
        if self.play_button:
            self.play_button.icon = icons.pause_circle if is_playing else icons.play_circle
            self.play_button.tooltip = "–ü–∞—É–∑–∞" if is_playing else "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏"
            self.play_button.update()
    
    def set_fullscreen_state(self, is_fullscreen: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞"""
        self.is_fullscreen = is_fullscreen
        if self.fullscreen_button:
            self.fullscreen_button.icon = icons.fullscreen_exit if is_fullscreen else icons.fullscreen
            self.fullscreen_button.tooltip = "–í—ã–π—Ç–∏ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞" if is_fullscreen else "–ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω"
            self.fullscreen_button.update()

class AnimeVideoPlayer(ft.UserControl):
    """–í–∏–¥–µ–æ –ø–ª–µ–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∏–º–µ"""
    
    def __init__(
        self,
        anime_data: Dict[str, Any],
        width: int = 800,
        height: int = 450,
        current_user: Optional[Dict] = None,
        on_episode_change: Optional[Callable] = None,
        on_progress_update: Optional[Callable] = None,
        show_controls: bool = True,
    ):
        super().__init__()
        
        self.anime_data = anime_data
        self.width = width
        self.height = height
        self.current_user = current_user
        self.on_episode_change = on_episode_change
        self.on_progress_update = on_progress_update
        self.show_controls = show_controls
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        self.current_season = 1
        self.current_episode = 1
        self.episodes_list = []
        self.is_loading = True
        self.error_message = None
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.anime_id = anime_data.get('id', '')
        self.kodik_id = anime_data.get('kodik_id')
        self.video_link = anime_data.get('link')
        self.title = anime_data.get('material_data', {}).get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∞–Ω–∏–º–µ')
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.video_container = None
        self.loading_indicator = None
        self.error_container = None
        self.controls = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if self.kodik_id or self.video_link:
            asyncio.create_task(self._load_episodes())
    
    async def _load_episodes(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —ç–ø–∏–∑–æ–¥–æ–≤"""
        try:
            self.is_loading = True
            await self._update_loading_state()
            
            if self.kodik_id:
                from core.api.anime_service import anime_service
                self.episodes_list = await anime_service.get_anime_episodes(
                    self.anime_id, 
                    self.kodik_id
                )
            
            if not self.episodes_list and self.video_link:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–∏—Å–∫–∞ —ç–ø–∏–∑–æ–¥–æ–≤, —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —ç–ø–∏–∑–æ–¥
                self.episodes_list = [{
                    'season': 1,
                    'episode': 1,
                    'title': '–≠–ø–∏–∑–æ–¥ 1',
                    'link': self.video_link
                }]
            
            self.is_loading = False
            await self._load_current_video()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ø–∏–∑–æ–¥–æ–≤: {e}")
            self.error_message = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}"
            self.is_loading = False
            await self._update_loading_state()
    
    async def _load_current_video(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–µ–æ"""
        try:
            current_ep = self._get_current_episode_data()
            if current_ep and current_ep.get('link'):
                self.video_link = current_ep['link']
                await self._update_video_player()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                if self.current_user:
                    self._save_watch_progress()
            else:
                self.error_message = "–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                await self._update_loading_state()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {e}")
            self.error_message = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {e}"
            await self._update_loading_state()
    
    def _get_current_episode_data(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ —ç–ø–∏–∑–æ–¥–∞"""
        for episode in self.episodes_list:
            if (episode.get('season') == self.current_season and 
                episode.get('episode') == self.current_episode):
                return episode
        return None
    
    def _save_watch_progress(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        try:
            if self.current_user:
                material_data = self.anime_data.get('material_data', {})
                
                db_manager.update_watch_progress(
                    user_id=self.current_user['id'],
                    anime_id=self.anime_id,
                    anime_title=self.title,
                    anime_poster_url=material_data.get('poster_url', ''),
                    episode_number=self.current_episode,
                    season_number=self.current_season,
                    watch_time_seconds=0,  # TODO: –ü–æ–ª—É—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ –ø–ª–µ–µ—Ä–∞
                    total_time_seconds=0   # TODO: –ü–æ–ª—É—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                )
                
                if self.on_progress_update:
                    asyncio.create_task(self.on_progress_update(
                        self.current_season, 
                        self.current_episode
                    ))
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
    
    async def _update_loading_state(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏"""
        if self.loading_indicator:
            self.loading_indicator.visible = self.is_loading
            self.loading_indicator.update()
        
        if self.error_container:
            self.error_container.visible = bool(self.error_message)
            if self.error_message:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
                error_text = self.error_container.content.controls[1]  # –í—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç - —Ç–µ–∫—Å—Ç
                error_text.value = self.error_message
            self.error_container.update()
    
    async def _update_video_player(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ø–ª–µ–µ—Ä–∞"""
        if self.video_container and self.video_link:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π WebView —Å –≤–∏–¥–µ–æ
            web_view = ft.WebView(
                url=self.video_link,
                expand=True,
                on_page_started=self._on_video_started,
                on_page_ended=self._on_video_loaded,
            )
            
            self.video_container.content = web_view
            self.video_container.update()
            
            # –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            await self._update_loading_state()
    
    def _on_video_started(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"""
        logger.info("–í–∏–¥–µ–æ –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è")
    
    def _on_video_loaded(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"""
        logger.info("–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        asyncio.create_task(self._update_loading_state())
    
    async def _change_episode(self, season: int, episode: int):
        """–°–º–µ–Ω–∞ —ç–ø–∏–∑–æ–¥–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–ø–∏–∑–æ–¥–∞
            episode_data = None
            for ep in self.episodes_list:
                if ep.get('season') == season and ep.get('episode') == episode:
                    episode_data = ep
                    break
            
            if not episode_data:
                logger.warning(f"–≠–ø–∏–∑–æ–¥ S{season}E{episode} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            self.current_season = season
            self.current_episode = episode
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            self.is_loading = True
            self.error_message = None
            await self._update_loading_state()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ
            await self._load_current_video()
            
            # –í—ã–∑—ã–≤–∞–µ–º callback
            if self.on_episode_change:
                await self.on_episode_change(season, episode)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —ç–ø–∏–∑–æ–¥–∞: {e}")
            self.error_message = f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —ç–ø–∏–∑–æ–¥–∞: {e}"
            self.is_loading = False
            await self._update_loading_state()
    
    async def next_episode(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ø–∏–∑–æ–¥—É"""
        next_ep = None
        
        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç–ø–∏–∑–æ–¥
        for episode in self.episodes_list:
            if (episode.get('season') == self.current_season and 
                episode.get('episode') == self.current_episode + 1):
                next_ep = episode
                break
        
        # –ï—Å–ª–∏ –≤ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ, –∏—â–µ–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–µ–∑–æ–Ω–µ
        if not next_ep:
            for episode in self.episodes_list:
                if (episode.get('season') == self.current_season + 1 and 
                    episode.get('episode') == 1):
                    next_ep = episode
                    break
        
        if next_ep:
            await self._change_episode(next_ep['season'], next_ep['episode'])
        else:
            logger.info("–°–ª–µ–¥—É—é—â–∏–π —ç–ø–∏–∑–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    async def prev_episode(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–ø–∏–∑–æ–¥—É"""
        prev_ep = None
        
        # –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ø–∏–∑–æ–¥
        if self.current_episode > 1:
            for episode in self.episodes_list:
                if (episode.get('season') == self.current_season and 
                    episode.get('episode') == self.current_episode - 1):
                    prev_ep = episode
                    break
        else:
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ø–∏–∑–æ–¥ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
            max_episode = 0
            for episode in self.episodes_list:
                if episode.get('season') == self.current_season - 1:
                    max_episode = max(max_episode, episode.get('episode', 0))
            
            if max_episode > 0:
                for episode in self.episodes_list:
                    if (episode.get('season') == self.current_season - 1 and 
                        episode.get('episode') == max_episode):
                        prev_ep = episode
                        break
        
        if prev_ep:
            await self._change_episode(prev_ep['season'], prev_ep['episode'])
        else:
            logger.info("–ü—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ø–∏–∑–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def set_episode(self, season: int, episode: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞"""
        asyncio.create_task(self._change_episode(season, episode))
    
    def get_episodes_list(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —ç–ø–∏–∑–æ–¥–æ–≤"""
        return self.episodes_list
    
    def get_current_episode(self) -> tuple[int, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞ –∏ —ç–ø–∏–∑–æ–¥–∞"""
        return self.current_season, self.current_episode
    
    def build(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ UI –≤–∏–¥–µ–æ –ø–ª–µ–µ—Ä–∞"""
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–∏–¥–µ–æ
        self.video_container = ft.Container(
            content=ft.Container(
                content=ft.Text(
                    "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–µ–µ—Ä–∞...",
                    color=colors.text_muted,
                    size=typography.text_lg,
                    text_align=ft.TextAlign.CENTER,
                ),
                alignment=ft.alignment.center,
                bgcolor=colors.background,
            ),
            width=self.width,
            height=self.height,
            border_radius=spacing.border_radius_lg,
            clip_behavior=ft.ClipBehavior.HARD_EDGE,
            bgcolor=colors.background,
        )
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.loading_indicator = ft.Container(
            content=ft.Column(
                controls=[
                    ft.ProgressRing(
                        width=48,
                        height=48,
                        color=colors.primary,
                    ),
                    ft.Text(
                        "–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...",
                        color=colors.text_primary,
                        size=typography.text_lg,
                        text_align=ft.TextAlign.CENTER,
                    ),
                ],
                alignment=ft.MainAxisAlignment.CENTER,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                spacing=spacing.md,
            ),
            alignment=ft.alignment.center,
            bgcolor=colors.background + "CC",  # 80% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            visible=self.is_loading,
        )
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—à–∏–±–∫–∏
        self.error_container = ft.Container(
            content=ft.Column(
                controls=[
                    ft.Icon(
                        icons.error,
                        size=48,
                        color=colors.error,
                    ),
                    ft.Text(
                        self.error_message or "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
                        color=colors.error,
                        size=typography.text_lg,
                        text_align=ft.TextAlign.CENTER,
                    ),
                    ft.ElevatedButton(
                        content=ft.Row(
                            controls=[
                                ft.Icon(icons.refresh, size=spacing.icon_sm),
                                ft.Text("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å"),
                            ],
                            spacing=spacing.xs,
                            tight=True,
                        ),
                        bgcolor=colors.primary,
                        color=colors.text_primary,
                        on_click=lambda e: asyncio.create_task(self._load_episodes()),
                    ),
                ],
                alignment=ft.MainAxisAlignment.CENTER,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                spacing=spacing.md,
            ),
            alignment=ft.alignment.center,
            bgcolor=colors.background + "CC",  # 80% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            visible=bool(self.error_message),
        )
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—ã –≤–∏–¥–µ–æ
        self.controls = VideoControls(
            on_prev_episode=lambda: asyncio.create_task(self.prev_episode()),
            on_next_episode=lambda: asyncio.create_task(self.next_episode()),
        ) if self.show_controls else None
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–µ–∫ —Å –≤–∏–¥–µ–æ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∞–º–∏
        video_stack = ft.Stack(
            controls=[
                # –í–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                self.video_container,
                
                # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                self.loading_indicator,
                
                # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—à–∏–±–∫–∏
                self.error_container,
                
                # –ö–æ–Ω—Ç—Ä–æ–ª—ã (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
                self.controls if self.controls else ft.Container(),
            ],
            width=self.width,
            height=self.height,
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —ç–ø–∏–∑–æ–¥–µ
        episode_info = ft.Container(
            content=ft.Row(
                controls=[
                    ft.Text(
                        f"{self.title}",
                        size=typography.text_lg,
                        weight=typography.weight_semibold,
                        color=colors.text_primary,
                        expand=True,
                        overflow=ft.TextOverflow.ELLIPSIS,
                    ),
                    ft.Container(
                        content=ft.Text(
                            f"S{self.current_season}E{self.current_episode}",
                            size=typography.text_md,
                            color=colors.text_primary,
                            weight=typography.weight_medium,
                        ),
                        bgcolor=colors.primary,
                        border_radius=spacing.border_radius_sm,
                        padding=ft.padding.symmetric(
                            horizontal=spacing.sm,
                            vertical=spacing.xs
                        ),
                    ),
                ],
                alignment=ft.MainAxisAlignment.SPACE_BETWEEN,
                vertical_alignment=ft.CrossAxisAlignment.CENTER,
            ),
            bgcolor=colors.surface,
            border_radius=spacing.border_radius_md,
            padding=spacing.md,
            margin=ft.margin.only(bottom=spacing.sm),
        )
        
        return ft.Column(
            controls=[
                episode_info,
                video_stack,
            ],
            spacing=0,
            width=self.width,
        )

# ===== –ú–ò–ù–ò –ü–õ–ï–ï–† =====

class MiniVideoPlayer(AnimeVideoPlayer):
    """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤–∏–¥–µ–æ –ø–ª–µ–µ—Ä–∞"""
    
    def __init__(self, **kwargs):
        super().__init__(
            width=400,
            height=225,
            show_controls=False,
            **kwargs
        )

# ===== –≠–ö–°–ü–û–†–¢ =====

__all__ = [
    "VideoControls", "AnimeVideoPlayer", "MiniVideoPlayer"
]