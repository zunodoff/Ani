"""
üîç ANIVEST DESKTOP - –°–¢–†–û–ö–ê –ü–û–ò–°–ö–ê –° –§–ò–õ–¨–¢–†–ê–ú–ò
============================================
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ –∞–Ω–∏–º–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
"""

import flet as ft
import asyncio
import logging
from typing import Dict, Any, Callable, Optional, List
from datetime import datetime, timedelta

from config.theme import colors, icons, spacing, typography, get_input_style, get_button_style
from config.settings import ANIME_GENRES, ANIME_TYPES, ANIME_STATUSES, SEASONS

logger = logging.getLogger(__name__)

class SearchFilters:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞"""
    
    def __init__(self):
        self.query: str = ""
        self.genre: str = ""
        self.year_from: str = ""
        self.year_to: str = ""
        self.status: str = ""
        self.anime_type: str = ""
        self.season: str = ""
        self.year: str = ""
        
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        filters = {}
        
        if self.genre:
            filters["genre"] = self.genre
        if self.year_from:
            filters["year_from"] = self.year_from
        if self.year_to:
            filters["year_to"] = self.year_to
        if self.status:
            filters["status"] = self.status
        if self.anime_type:
            filters["type"] = self.anime_type
        if self.season and self.year:
            filters["season"] = f"{self.season}_{self.year}"
            
        return filters
    
    def clear(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        self.query = ""
        self.genre = ""
        self.year_from = ""
        self.year_to = ""
        self.status = ""
        self.anime_type = ""
        self.season = ""
        self.year = ""
    
    def has_filters(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        return bool(
            self.genre or self.year_from or self.year_to or 
            self.status or self.anime_type or (self.season and self.year)
        )

class AnivesetSearchBar(ft.UserControl):
    """–°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    
    def __init__(
        self,
        width: int = 600,
        on_search: Optional[Callable[[str, Dict], None]] = None,
        on_filters_change: Optional[Callable[[Dict], None]] = None,
        placeholder: str = "–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ...",
        show_filters: bool = True,
        compact_mode: bool = False
    ):
        super().__init__()
        
        self.width = width
        self.on_search = on_search
        self.on_filters_change = on_filters_change
        self.placeholder = placeholder
        self.show_filters = show_filters
        self.compact_mode = compact_mode
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.filters = SearchFilters()
        self.filters_expanded = False
        self.search_debounce_timer = None
        self.debounce_delay = 0.5  # 500ms –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.search_field = None
        self.filters_container = None
        self.filters_button = None
        self.clear_button = None
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.genre_dropdown = None
        self.year_from_field = None
        self.year_to_field = None
        self.status_dropdown = None
        self.type_dropdown = None
        self.season_dropdown = None
        self.season_year_dropdown = None
    
    def _create_search_field(self) -> ft.TextField:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞"""
        self.search_field = ft.TextField(
            hint_text=self.placeholder,
            prefix_icon=icons.search,
            border_color=colors.border,
            focused_border_color=colors.primary,
            bgcolor=colors.surface,
            color=colors.text_primary,
            border_radius=spacing.border_radius_md,
            height=45,
            text_size=typography.text_md,
            content_padding=ft.padding.symmetric(
                horizontal=spacing.md,
                vertical=spacing.sm
            ),
            on_change=self._on_search_change,
            on_submit=self._on_search_submit,
            expand=True,
        )
        
        return self.search_field
    
    def _create_action_buttons(self) -> ft.Row:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π"""
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if self.show_filters:
            self.filters_button = ft.IconButton(
                icon=icons.filter_list,
                icon_color=colors.primary if self.filters.has_filters() else colors.text_muted,
                tooltip="–§–∏–ª—å—Ç—Ä—ã",
                on_click=self._toggle_filters,
            )
            buttons.append(self.filters_button)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        self.clear_button = ft.IconButton(
            icon=icons.close,
            icon_color=colors.text_muted,
            tooltip="–û—á–∏—Å—Ç–∏—Ç—å",
            on_click=self._clear_search,
            visible=False,
        )
        buttons.append(self.clear_button)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
        search_button = ft.IconButton(
            icon=icons.search,
            icon_color=colors.primary,
            tooltip="–ü–æ–∏—Å–∫",
            on_click=self._perform_search,
        )
        buttons.append(search_button)
        
        return ft.Row(
            controls=buttons,
            spacing=spacing.xs,
            tight=True,
        )
    
    def _create_filters_section(self) -> ft.Container:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        
        # Dropdown –¥–ª—è –∂–∞–Ω—Ä–æ–≤
        self.genre_dropdown = ft.Dropdown(
            hint_text="–ñ–∞–Ω—Ä",
            options=[ft.dropdown.Option(genre) for genre in ANIME_GENRES],
            width=160,
            bgcolor=colors.surface,
            border_color=colors.border,
            focused_border_color=colors.primary,
            color=colors.text_primary,
            on_change=self._on_filter_change,
        )
        
        # –ü–æ–ª—è –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≥–æ–¥–æ–≤
        current_year = datetime.now().year
        
        self.year_from_field = ft.TextField(
            hint_text="–û—Ç –≥–æ–¥–∞",
            width=100,
            bgcolor=colors.surface,
            border_color=colors.border,
            focused_border_color=colors.primary,
            color=colors.text_primary,
            text_size=typography.text_sm,
            content_padding=ft.padding.all(spacing.sm),
            on_change=self._on_filter_change,
            input_filter=ft.NumbersOnlyInputFilter(),
        )
        
        self.year_to_field = ft.TextField(
            hint_text="–î–æ –≥–æ–¥–∞",
            width=100,
            bgcolor=colors.surface,
            border_color=colors.border,
            focused_border_color=colors.primary,
            color=colors.text_primary,
            text_size=typography.text_sm,
            content_padding=ft.padding.all(spacing.sm),
            on_change=self._on_filter_change,
            input_filter=ft.NumbersOnlyInputFilter(),
        )
        
        # Dropdown –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        self.status_dropdown = ft.Dropdown(
            hint_text="–°—Ç–∞—Ç—É—Å",
            options=[
                ft.dropdown.Option(
                    key=status["value"],
                    text=status["label"]
                ) for status in ANIME_STATUSES
            ],
            width=140,
            bgcolor=colors.surface,
            border_color=colors.border,
            focused_border_color=colors.primary,
            color=colors.text_primary,
            on_change=self._on_filter_change,
        )
        
        # Dropdown –¥–ª—è —Ç–∏–ø–∞
        self.type_dropdown = ft.Dropdown(
            hint_text="–¢–∏–ø",
            options=[
                ft.dropdown.Option(
                    key=anime_type["value"],
                    text=anime_type["label"]
                ) for anime_type in ANIME_TYPES
            ],
            width=140,
            bgcolor=colors.surface,
            border_color=colors.border,
            focused_border_color=colors.primary,
            color=colors.text_primary,
            on_change=self._on_filter_change,
        )
        
        # Dropdown –¥–ª—è —Å–µ–∑–æ–Ω–∞
        self.season_dropdown = ft.Dropdown(
            hint_text="–°–µ–∑–æ–Ω",
            options=[
                ft.dropdown.Option(
                    key=season["value"],
                    text=f"{season['emoji']} {season['label']}"
                ) for season in SEASONS
            ],
            width=120,
            bgcolor=colors.surface,
            border_color=colors.border,
            focused_border_color=colors.primary,
            color=colors.text_primary,
            on_change=self._on_filter_change,
        )
        
        # Dropdown –¥–ª—è –≥–æ–¥–∞ —Å–µ–∑–æ–Ω–∞
        season_years = [str(year) for year in range(current_year - 10, current_year + 2)]
        self.season_year_dropdown = ft.Dropdown(
            hint_text="–ì–æ–¥",
            options=[ft.dropdown.Option(year) for year in season_years],
            width=100,
            bgcolor=colors.surface,
            border_color=colors.border,
            focused_border_color=colors.primary,
            color=colors.text_primary,
            on_change=self._on_filter_change,
        )
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filters_row1 = ft.Row(
            controls=[
                self.genre_dropdown,
                ft.Container(
                    content=ft.Row(
                        controls=[
                            self.year_from_field,
                            ft.Text("‚Äî", color=colors.text_muted),
                            self.year_to_field,
                        ],
                        spacing=spacing.xs,
                        alignment=ft.MainAxisAlignment.CENTER,
                    ),
                    tooltip="–î–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç",
                ),
                self.status_dropdown,
            ],
            spacing=spacing.md,
            wrap=True,
        )
        
        filters_row2 = ft.Row(
            controls=[
                self.type_dropdown,
                ft.Container(
                    content=ft.Row(
                        controls=[
                            self.season_dropdown,
                            self.season_year_dropdown,
                        ],
                        spacing=spacing.xs,
                    ),
                    tooltip="–ê–Ω–∏–º–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞",
                ),
                ft.ElevatedButton(
                    content=ft.Row(
                        controls=[
                            ft.Icon(icons.close, size=spacing.icon_sm),
                            ft.Text("–°–±—Ä–æ—Å–∏—Ç—å", size=typography.text_sm),
                        ],
                        spacing=spacing.xs,
                        tight=True,
                    ),
                    bgcolor=colors.surface,
                    color=colors.text_muted,
                    on_click=self._clear_filters,
                ),
            ],
            spacing=spacing.md,
            wrap=True,
        )
        
        self.filters_container = ft.Container(
            content=ft.Column(
                controls=[
                    filters_row1,
                    filters_row2,
                ],
                spacing=spacing.md,
            ),
            bgcolor=colors.background,
            border=ft.border.all(1, colors.border),
            border_radius=spacing.border_radius_md,
            padding=spacing.md,
            margin=ft.margin.only(top=spacing.sm),
            visible=self.filters_expanded,
            animate=ft.animation.Animation(300, ft.AnimationCurve.EASE_IN_OUT),
        )
        
        return self.filters_container
    
    def _on_search_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ–∏—Å–∫–∞ —Å debounce"""
        self.filters.query = e.control.value
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏
        if self.clear_button:
            self.clear_button.visible = bool(e.control.value)
            self.clear_button.update()
        
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        if self.search_debounce_timer:
            self.search_debounce_timer.cancel()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        self.search_debounce_timer = asyncio.create_task(
            self._debounced_search()
        )
    
    async def _debounced_search(self):
        """–ü–æ–∏—Å–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        try:
            await asyncio.sleep(self.debounce_delay)
            await self._perform_search_async()
        except asyncio.CancelledError:
            pass
    
    def _on_search_submit(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞"""
        # –û—Ç–º–µ–Ω—è–µ–º debounce –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        if self.search_debounce_timer:
            self.search_debounce_timer.cancel()
        
        asyncio.create_task(self._perform_search_async())
    
    def _on_filter_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if self.genre_dropdown and e.control == self.genre_dropdown:
            self.filters.genre = e.control.value or ""
        elif self.year_from_field and e.control == self.year_from_field:
            self.filters.year_from = e.control.value or ""
        elif self.year_to_field and e.control == self.year_to_field:
            self.filters.year_to = e.control.value or ""
        elif self.status_dropdown and e.control == self.status_dropdown:
            self.filters.status = e.control.value or ""
        elif self.type_dropdown and e.control == self.type_dropdown:
            self.filters.anime_type = e.control.value or ""
        elif self.season_dropdown and e.control == self.season_dropdown:
            self.filters.season = e.control.value or ""
        elif self.season_year_dropdown and e.control == self.season_year_dropdown:
            self.filters.year = e.control.value or ""
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if self.filters_button:
            self.filters_button.icon_color = colors.primary if self.filters.has_filters() else colors.text_muted
            self.filters_button.update()
        
        # –í—ã–∑—ã–≤–∞–µ–º callback –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if self.on_filters_change:
            self.on_filters_change(self.filters.to_dict())
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        asyncio.create_task(self._perform_search_async())
    
    def _toggle_filters(self, e):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        self.filters_expanded = not self.filters_expanded
        
        if self.filters_container:
            self.filters_container.visible = self.filters_expanded
            self.filters_container.update()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏
        if self.filters_button:
            self.filters_button.icon = icons.filter_list if not self.filters_expanded else icons.close
            self.filters_button.update()
    
    def _clear_search(self, e):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        if self.search_field:
            self.search_field.value = ""
            self.search_field.update()
        
        self.filters.query = ""
        
        if self.clear_button:
            self.clear_button.visible = False
            self.clear_button.update()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å –ø—É—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        asyncio.create_task(self._perform_search_async())
    
    def _clear_filters(self, e):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.filters.clear()
        
        # –û—á–∏—â–∞–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
        if self.genre_dropdown:
            self.genre_dropdown.value = None
            self.genre_dropdown.update()
        
        if self.year_from_field:
            self.year_from_field.value = ""
            self.year_from_field.update()
        
        if self.year_to_field:
            self.year_to_field.value = ""
            self.year_to_field.update()
        
        if self.status_dropdown:
            self.status_dropdown.value = None
            self.status_dropdown.update()
        
        if self.type_dropdown:
            self.type_dropdown.value = None
            self.type_dropdown.update()
        
        if self.season_dropdown:
            self.season_dropdown.value = None
            self.season_dropdown.update()
        
        if self.season_year_dropdown:
            self.season_year_dropdown.value = None
            self.season_year_dropdown.update()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if self.filters_button:
            self.filters_button.icon_color = colors.text_muted
            self.filters_button.update()
        
        # –í—ã–∑—ã–≤–∞–µ–º callbacks
        if self.on_filters_change:
            self.on_filters_change({})
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        asyncio.create_task(self._perform_search_async())
    
    def _perform_search(self, e=None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        asyncio.create_task(self._perform_search_async())
    
    async def _perform_search_async(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            if self.on_search:
                await self.on_search(self.filters.query, self.filters.to_dict())
                
            logger.info(f"–ü–æ–∏—Å–∫: '{self.filters.query}' —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {self.filters.to_dict()}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
    
    def set_search_query(self, query: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ"""
        self.filters.query = query
        
        if self.search_field:
            self.search_field.value = query
            self.search_field.update()
        
        if self.clear_button:
            self.clear_button.visible = bool(query)
            self.clear_button.update()
    
    def set_filters(self, filters_dict: Dict[str, Any]):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if "genre" in filters_dict:
            self.filters.genre = filters_dict["genre"]
        if "year_from" in filters_dict:
            self.filters.year_from = str(filters_dict["year_from"])
        if "year_to" in filters_dict:
            self.filters.year_to = str(filters_dict["year_to"])
        if "status" in filters_dict:
            self.filters.status = filters_dict["status"]
        if "type" in filters_dict:
            self.filters.anime_type = filters_dict["type"]
        if "season" in filters_dict:
            # –†–∞–∑–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "season_year"
            season_data = filters_dict["season"].split("_")
            if len(season_data) == 2:
                self.filters.season = season_data[0]
                self.filters.year = season_data[1]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI (–µ—Å–ª–∏ —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω)
        if self.page:
            self._update_filters_ui()
    
    def _update_filters_ui(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        if self.genre_dropdown:
            self.genre_dropdown.value = self.filters.genre or None
            self.genre_dropdown.update()
        
        if self.year_from_field:
            self.year_from_field.value = self.filters.year_from
            self.year_from_field.update()
        
        if self.year_to_field:
            self.year_to_field.value = self.filters.year_to
            self.year_to_field.update()
        
        if self.status_dropdown:
            self.status_dropdown.value = self.filters.status or None
            self.status_dropdown.update()
        
        if self.type_dropdown:
            self.type_dropdown.value = self.filters.anime_type or None
            self.type_dropdown.update()
        
        if self.season_dropdown:
            self.season_dropdown.value = self.filters.season or None
            self.season_dropdown.update()
        
        if self.season_year_dropdown:
            self.season_year_dropdown.value = self.filters.year or None
            self.season_year_dropdown.update()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if self.filters_button:
            self.filters_button.icon_color = colors.primary if self.filters.has_filters() else colors.text_muted
            self.filters_button.update()
    
    def build(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ–∏—Å–∫–∞"""
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞
        search_row = ft.Container(
            content=ft.Row(
                controls=[
                    self._create_search_field(),
                    self._create_action_buttons(),
                ],
                spacing=spacing.sm,
                vertical_alignment=ft.CrossAxisAlignment.CENTER,
            ),
            bgcolor=colors.surface,
            border=ft.border.all(1, colors.border),
            border_radius=spacing.border_radius_md,
            padding=ft.padding.symmetric(
                horizontal=spacing.sm,
                vertical=spacing.xs
            ),
        )
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_content = ft.Column(
            controls=[
                search_row,
                self._create_filters_section() if self.show_filters else ft.Container(),
            ],
            spacing=0,
            width=self.width,
        )
        
        return main_content

# ===== –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø =====

class SimpleSearchBar(AnivesetSearchBar):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç—Ä–æ–∫–∏ –ø–æ–∏—Å–∫–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    
    def __init__(self, **kwargs):
        super().__init__(show_filters=False, **kwargs)

# ===== –ö–û–ú–ü–ê–ö–¢–ù–ê–Ø –í–ï–†–°–ò–Ø =====

class CompactSearchBar(AnivesetSearchBar):
    """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç—Ä–æ–∫–∏ –ø–æ–∏—Å–∫–∞"""
    
    def __init__(self, **kwargs):
        super().__init__(width=400, compact_mode=True, **kwargs)

# ===== –≠–ö–°–ü–û–†–¢ =====

__all__ = [
    "SearchFilters", "AnivesetSearchBar", "SimpleSearchBar", "CompactSearchBar"
]