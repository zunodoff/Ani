"""
üé¨ ANIVEST DESKTOP - KODIK API
============================
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Kodik –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ
(–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Flask —Å–∞–π—Ç–∞)
"""

import asyncio
import logging
import time
import json
from typing import Optional, List, Dict, Any
import httpx

from config.settings import KODIK_CONFIG, CACHE_CONFIG

logger = logging.getLogger(__name__)

# ===== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° API =====

class KodikAPI:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Kodik API"""
    
    def __init__(self):
        self.base_url = KODIK_CONFIG["base_url"]
        self.timeout = KODIK_CONFIG["timeout"]
        self.cache_timeout = KODIK_CONFIG["cache_timeout"]
        self.test_tokens = KODIK_CONFIG["test_tokens"]
        
        # –¢–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω
        self.token = None
        
        # –ö–µ—à –∑–∞–ø—Ä–æ—Å–æ–≤
        self.cache = {}
        
        # HTTP –∫–ª–∏–µ–Ω—Ç
        self.client = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        asyncio.create_task(self._initialize_token())
    
    async def _get_client(self) -> httpx.AsyncClient:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.client is None or self.client.is_closed:
            headers = {
                'User-Agent': 'Anivest Desktop/1.0',
                'Accept': 'application/json',
                'Content-Type': 'application/x-www-form-urlencoded'
            }
            
            self.client = httpx.AsyncClient(
                headers=headers,
                timeout=self.timeout,
                follow_redirects=True
            )
        
        return self.client
    
    async def _initialize_token(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞"""
        await self.get_token()
    
    async def get_token(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è API"""
        if self.token:
            return self.token
            
        for token in self.test_tokens:
            try:
                client = await self._get_client()
                
                response = await client.post(
                    f"{self.base_url}/list",
                    data={"token": token, "limit": 1}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('results') is not None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                        self.token = token
                        logger.info(f"Kodik —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {token[:10]}...")
                        return token
                        
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Kodik —Ç–æ–∫–µ–Ω–∞ {token[:10]}...: {e}")
                continue
        
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π Kodik —Ç–æ–∫–µ–Ω!")
        return None
    
    async def _make_request(self, endpoint: str, params: Optional[Dict] = None) -> Optional[Dict]:
        """–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Kodik API"""
        if not self.token:
            await self.get_token()
            
        if not self.token:
            logger.error("Kodik —Ç–æ–∫–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
        
        cache_key = f"kodik_{endpoint}_{str(params)}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if CACHE_CONFIG["enabled"] and cache_key in self.cache:
            cached_data, timestamp = self.cache[cache_key]
            if time.time() - timestamp < self.cache_timeout:
                logger.debug(f"Kodik cache hit: {endpoint}")
                return cached_data
        
        try:
            client = await self._get_client()
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            full_params = {"token": self.token}
            if params:
                full_params.update(params)
                
            url = f"{self.base_url}/{endpoint}"
            logger.debug(f"Kodik request: {url} with params: {full_params}")
            
            # Kodik –∏—Å–ø–æ–ª—å–∑—É–µ—Ç POST –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            response = await client.post(url, data=full_params)
            response.raise_for_status()
            
            data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            if 'results' not in data:
                logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ Kodik: {data}")
                return None
            
            logger.debug(f"Kodik response: {len(data.get('results', []))} results")
            
            # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if CACHE_CONFIG["enabled"]:
                self.cache[cache_key] = (data, time.time())
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
                if len(self.cache) > CACHE_CONFIG["max_size"]:
                    # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
                    sorted_cache = sorted(self.cache.items(), key=lambda x: x[1][1])
                    for old_key, _ in sorted_cache[:len(self.cache) // 4]:
                        del self.cache[old_key]
            
            return data
            
        except httpx.RequestError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Kodik API –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
        except httpx.HTTPStatusError as e:
            logger.error(f"HTTP –æ—à–∏–±–∫–∞ Kodik API: {e.response.status_code}")
            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
            if e.response.status_code in [401, 403]:
                self.token = None
                logger.warning("Kodik —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—à–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return None
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç Kodik: {e}")
            return None
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Kodik API: {e}")
            return None
    
    async def search_by_shikimori_id(self, shikimori_id: str) -> Optional[Dict]:
        """–ü–æ–∏—Å–∫ –≤ Kodik –ø–æ shikimori_id"""
        params = {
            "shikimori_id": shikimori_id,
            "with_material_data": "true",
            "limit": 20
        }
        
        logger.debug(f"–ü–æ–∏—Å–∫ –≤ Kodik –ø–æ Shikimori ID: {shikimori_id}")
        return await self._make_request("search", params)
    
    async def search_by_title(self, title: str) -> Optional[Dict]:
        """–ü–æ–∏—Å–∫ –≤ Kodik –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        if not title.strip():
            return None
            
        params = {
            "title": title.strip(),
            "with_material_data": "true",
            "limit": 10
        }
        
        logger.debug(f"–ü–æ–∏—Å–∫ –≤ Kodik –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {title}")
        return await self._make_request("search", params)
    
    async def search_by_kinopoisk_id(self, kinopoisk_id: str) -> Optional[Dict]:
        """–ü–æ–∏—Å–∫ –≤ Kodik –ø–æ kinopoisk_id"""
        params = {
            "kinopoisk_id": kinopoisk_id,
            "with_material_data": "true",
            "limit": 10
        }
        
        logger.debug(f"–ü–æ–∏—Å–∫ –≤ Kodik –ø–æ Kinopoisk ID: {kinopoisk_id}")
        return await self._make_request("search", params)
    
    async def search_by_imdb_id(self, imdb_id: str) -> Optional[Dict]:
        """–ü–æ–∏—Å–∫ –≤ Kodik –ø–æ imdb_id"""
        params = {
            "imdb_id": imdb_id,
            "with_material_data": "true",
            "limit": 10
        }
        
        logger.debug(f"–ü–æ–∏—Å–∫ –≤ Kodik –ø–æ IMDB ID: {imdb_id}")
        return await self._make_request("search", params)
    
    async def get_anime_list(self, limit: int = 50, page: int = 1) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–Ω–∏–º–µ –∏–∑ Kodik"""
        params = {
            "types": "anime-serial,anime",
            "limit": min(limit, 100),  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
            "page": page,
            "with_material_data": "true",
            "sort": "updated_at"
        }
        
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–Ω–∏–º–µ: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –ª–∏–º–∏—Ç {limit}")
        return await self._make_request("list", params)
    
    async def get_popular_anime(self, limit: int = 20) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ –∏–∑ Kodik"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –≤—ã–±–æ—Ä–∞
            all_anime = []
            
            for page in range(1, 4):  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                result = await self.get_anime_list(limit=50, page=page)
                
                if result and result.get('results'):
                    all_anime.extend(result['results'])
                else:
                    break
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            filtered_anime = []
            for anime in all_anime:
                material_data = anime.get('material_data', {})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∞–Ω–∏–º–µ
                anime_kind = material_data.get('anime_kind', '')
                if anime_kind in ['tv', 'movie', 'ova', 'ona', 'special']:
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                    rating = float(material_data.get('shikimori_rating', 0) or 0)
                    votes = int(material_data.get('shikimori_votes', 0) or 0)
                    
                    if rating > 0 or votes > 0:
                        anime['popularity_score'] = (votes * 0.1) + (rating * 1000)
                        filtered_anime.append(anime)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
            filtered_anime.sort(key=lambda x: x.get('popularity_score', 0), reverse=True)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø
            return filtered_anime[:limit]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ –∏–∑ Kodik: {e}")
            return []
    
    async def get_anime_episodes(self, kodik_id: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–ø–∏–∑–æ–¥–æ–≤ –∞–Ω–∏–º–µ"""
        try:
            # Kodik –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ø–∏–∑–æ–¥–∞—Ö –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
            params = {
                "id": kodik_id,
                "with_episodes": "true",
                "with_material_data": "true"
            }
            
            result = await self._make_request("search", params)
            
            if result and result.get('results'):
                anime = result['results'][0]
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–ø–∏–∑–æ–¥—ã –∏–∑ –æ–±—ä–µ–∫—Ç–∞ seasons
                episodes = []
                seasons_data = anime.get('seasons', {})
                
                for season_num, season_data in seasons_data.items():
                    season_episodes = season_data.get('episodes', {})
                    
                    for ep_num, ep_data in season_episodes.items():
                        episode = {
                            'season': int(season_num),
                            'episode': int(ep_num),
                            'title': ep_data.get('title', f"–≠–ø–∏–∑–æ–¥ {ep_num}"),
                            'link': ep_data.get('link', ''),
                            'screenshot': ep_data.get('screenshot', '')
                        }
                        episodes.append(episode)
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–µ–∑–æ–Ω—É –∏ —ç–ø–∏–∑–æ–¥—É
                episodes.sort(key=lambda x: (x['season'], x['episode']))
                return episodes
            
            return []
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ø–∏–∑–æ–¥–æ–≤: {e}")
            return []
    
    async def get_video_link(self, kodik_id: str, season: int = 1, episode: int = 1) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ"""
        try:
            episodes = await self.get_anime_episodes(kodik_id)
            
            # –ò—â–µ–º –Ω—É–∂–Ω—ã–π —ç–ø–∏–∑–æ–¥
            for ep in episodes:
                if ep['season'] == season and ep['episode'] == episode:
                    return ep['link']
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
            if episodes:
                return episodes[0]['link']
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ: {e}")
            return None
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.client and not self.client.is_closed:
            await self.client.aclose()
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞"""
        self.cache.clear()
        logger.info("–ö–µ—à Kodik API –æ—á–∏—â–µ–Ω")
    
    def get_cache_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞"""
        return {
            "cache_size": len(self.cache),
            "max_size": CACHE_CONFIG["max_size"],
            "cache_timeout": self.cache_timeout,
            "token_available": self.token is not None,
            "current_token": self.token[:10] + "..." if self.token else None
        }
    
    def reset_token(self):
        """–°–±—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)"""
        self.token = None
        logger.info("Kodik —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—à–µ–Ω")

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

def extract_kodik_data(kodik_result: Dict) -> Dict:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Kodik"""
    if not kodik_result or 'results' not in kodik_result:
        return {}
    
    results = kodik_result['results']
    if not results:
        return {}
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    anime = results[0]
    
    return {
        'kodik_id': anime.get('id'),
        'link': anime.get('link'),
        'translation': anime.get('translation', {}).get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
        'translation_id': anime.get('translation', {}).get('id'),
        'quality': anime.get('quality', 'SD'),
        'episodes_count': anime.get('episodes_count'),
        'seasons_count': anime.get('seasons_count'),
        'last_episode': anime.get('last_episode'),
        'last_season': anime.get('last_season'),
        'screenshots': anime.get('screenshots', []),
        'updated_at': anime.get('updated_at'),
        'created_at': anime.get('created_at'),
        
        # –ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        'material_data': anime.get('material_data', {}),
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–∑–æ–Ω–∞—Ö –∏ —ç–ø–∏–∑–æ–¥–∞—Ö
        'seasons': anime.get('seasons', {}),
    }

def get_best_translation(kodik_results: List[Dict]) -> Optional[Dict]:
    """–í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Kodik"""
    if not kodik_results:
        return None
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–æ—Ç –ª—É—á—à–µ–≥–æ –∫ —Ö—É–¥—à–µ–º—É)
    translation_priority = [
        'AniDub', 'Animedia', 'AniLibria', 'AniStar',
        '–°—É–±—Ç–∏—Ç—Ä—ã', '–ú–Ω–æ–≥–æ–≥–æ–ª–æ—Å—ã–π', '–î—É–±–ª—è–∂',
        '–û—Ä–∏–≥–∏–Ω–∞–ª', '–†—É—Å—Å–∫–∏–π'
    ]
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    for priority_translation in translation_priority:
        for result in kodik_results:
            translation = result.get('translation', {}).get('title', '')
            if priority_translation.lower() in translation.lower():
                return result
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π
    return kodik_results[0] if kodik_results else None

def get_anime_quality_priority(quality: str) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ"""
    quality_priorities = {
        '2160p': 100,  # 4K
        '1440p': 90,   # 2K
        '1080p': 80,   # Full HD
        '720p': 70,    # HD
        '480p': 60,    # SD
        '360p': 50,    # Low
        'HD': 75,      # –û–±—â–µ–µ HD
        'SD': 55,      # –û–±—â–µ–µ SD
    }
    
    return quality_priorities.get(quality, 0)

def format_translation_info(translation_data: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–µ–≤–æ–¥–µ"""
    if not translation_data:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    title = translation_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    type_name = translation_data.get('type', '')
    
    if type_name:
        return f"{title} ({type_name})"
    
    return title

def format_quality_info(quality: str, episodes_count: Optional[int] = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—á–µ—Å—Ç–≤–µ"""
    quality_text = quality or 'SD'
    
    if episodes_count:
        if episodes_count == 1:
            return f"{quality_text} ‚Ä¢ 1 —ç–ø–∏–∑–æ–¥"
        else:
            return f"{quality_text} ‚Ä¢ {episodes_count} —ç–ø."
    
    return quality_text

# ===== –≠–ö–°–ü–û–†–¢ =====

__all__ = [
    "KodikAPI", "extract_kodik_data", "get_best_translation",
    "get_anime_quality_priority", "format_translation_info",
    "format_quality_info"
]