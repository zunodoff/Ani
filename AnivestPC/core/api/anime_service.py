"""
üî• ANIVEST DESKTOP - –ì–ò–ë–†–ò–î–ù–´–ô –°–ï–†–í–ò–° –ê–ù–ò–ú–ï
=========================================
–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Shikimori –∏ Kodik API
(–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Flask —Å–∞–π—Ç–∞)
"""

import asyncio
import logging
import time
from typing import Optional, List, Dict, Any
import httpx

from .shikimori_api import ShikimoriAPI, convert_shikimori_format, extract_year_from_date
from .kodik_api import KodikAPI, extract_kodik_data, get_best_translation
from config.settings import CACHE_CONFIG

logger = logging.getLogger(__name__)

# ===== –û–°–ù–û–í–ù–û–ô –ì–ò–ë–†–ò–î–ù–´–ô –°–ï–†–í–ò–° =====

class HybridAnimeService:
    """–ì–∏–±—Ä–∏–¥–Ω—ã–π —Å–µ—Ä–≤–∏—Å, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π Shikimori –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ Kodik –¥–ª—è –ø–ª–µ–µ—Ä–∞"""
    
    def __init__(self):
        self.shikimori = ShikimoriAPI()
        self.kodik = KodikAPI()
        self.poster_cache = {}  # –ö–µ—à –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–µ—Ä–æ–≤
        self.merge_cache = {}   # –ö–µ—à –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
    async def _check_image_availability(self, url: str, timeout: int = 3) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL"""
        if not url:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if url in self.poster_cache:
            return self.poster_cache[url]
        
        try:
            # –î–µ–ª–∞–µ–º HEAD –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            async with httpx.AsyncClient(timeout=timeout) as client:
                response = await client.head(url, follow_redirects=True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥ –∏ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                if response.status_code == 200:
                    content_type = response.headers.get('content-type', '').lower()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if any(img_type in content_type for img_type in ['image/', 'jpeg', 'png', 'gif', 'webp']):
                        self.poster_cache[url] = True
                        return True
                
                logger.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {url} (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
                self.poster_cache[url] = False
                return False
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {url}: {e}")
            self.poster_cache[url] = False
            return False
    
    async def search_anime(self, query: Optional[str] = None, filters: Optional[Dict] = None) -> List[Dict]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ –∞–Ω–∏–º–µ"""
        try:
            # 1. –ò—â–µ–º –≤ Shikimori (–æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫)
            logger.info(f"–ü–æ–∏—Å–∫ –≤ Shikimori: query='{query}', filters={filters}")
            shikimori_results = await self.shikimori.search_anime(query, filters)
            
            if not shikimori_results:
                logger.warning("Shikimori –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return []
            
            # 2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–æ—Ä–∞–º
            anime_results = []
            for anime in shikimori_results:
                anime_kind = anime.get('kind', '')
                # –ò—Å–∫–ª—é—á–∞–µ–º –¥–æ—Ä–∞–º—ã, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∏–¥—ã –∞–Ω–∏–º–µ
                if anime_kind in ['tv', 'movie', 'ova', 'ona', 'special', 'music']:
                    anime_results.append(anime)
                else:
                    logger.debug(f"–ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ-–∞–Ω–∏–º–µ: {anime.get('name')} [{anime_kind}]")
            
            # 3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –≥–æ–¥–æ–≤ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if filters and filters.get('year_from') and filters.get('year_to'):
                year_from = int(filters['year_from'])
                year_to = int(filters['year_to'])
                
                if year_from != year_to:
                    year_filtered_results = []
                    for anime in anime_results:
                        anime_year = extract_year_from_date(anime.get('aired_on'))
                        if anime_year and year_from <= anime_year <= year_to:
                            year_filtered_results.append(anime)
                    anime_results = year_filtered_results
                    logger.info(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≥–æ–¥–∞–º {year_from}-{year_to}: {len(anime_results)} –∞–Ω–∏–º–µ")
            
            # 4. –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Kodik (–ø–ª–µ–µ—Ä—ã) - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            enriched_results = []
            for anime in anime_results[:20]:
                enriched_anime = await self._enrich_with_kodik(anime)
                enriched_results.append(enriched_anime)
                
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(enriched_results)} –∞–Ω–∏–º–µ (–∏—Å–∫–ª—é—á–µ–Ω—ã –¥–æ—Ä–∞–º—ã)")
            return enriched_results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–Ω–∏–º–µ: {e}")
            return []
    
    async def get_seasonal_anime(self, season: Optional[str] = None, 
                                year: Optional[int] = None, limit: int = 20) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∏–º–µ —Ç–µ–∫—É—â–µ–≥–æ/—É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞"""
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–Ω—ã—Ö –∞–Ω–∏–º–µ: {season}_{year} (–ª–∏–º–∏—Ç: {limit})")
            shikimori_results = await self.shikimori.get_seasonal_anime(season, year, limit)
            
            if not shikimori_results:
                logger.warning("Shikimori –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–µ–∑–æ–Ω–Ω—ã—Ö –∞–Ω–∏–º–µ")
                # Fallback: –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω–∏–º–µ
                logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback: –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω–∏–º–µ")
                return await self.get_popular_anime(limit)
            
            # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Kodik
            enriched_results = []
            for anime in shikimori_results:
                enriched_anime = await self._enrich_with_kodik(anime)
                enriched_results.append(enriched_anime)
                
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(enriched_results)} —Å–µ–∑–æ–Ω–Ω—ã—Ö –∞–Ω–∏–º–µ")
            return enriched_results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–Ω—ã—Ö –∞–Ω–∏–º–µ: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω–∏–º–µ
            logger.info("–û—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω–∏–º–µ")
            return await self.get_popular_anime(limit)
    
    async def get_popular_anime(self, limit: int = 20) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ"""
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ {limit} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ")
            shikimori_results = await self.shikimori.get_popular_anime(limit)
            
            if not shikimori_results:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω–∏–º–µ")
                return []
            
            enriched_results = []
            for anime in shikimori_results:
                enriched_anime = await self._enrich_with_kodik(anime)
                enriched_results.append(enriched_anime)
                
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(enriched_results)} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ")
            return enriched_results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ: {e}")
            return []
    
    async def get_anime_details(self, anime_id: str, shikimori_id: Optional[str] = None) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–Ω–∏–º–µ"""
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å shikimori_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if shikimori_id:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∞–Ω–∏–º–µ –∏–∑ Shikimori: {shikimori_id}")
                shikimori_anime = await self.shikimori.get_anime(shikimori_id)
                if shikimori_anime:
                    enriched = await self._enrich_with_kodik(shikimori_anime)
                    return enriched
            
            # –ï—Å–ª–∏ anime_id –∏–º–µ–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å shiki_, –∏–∑–≤–ª–µ–∫–∞–µ–º shikimori_id
            if anime_id.startswith('shiki_'):
                extracted_shikimori_id = anime_id.replace('shiki_', '')
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω Shikimori ID –∏–∑ anime_id: {extracted_shikimori_id}")
                shikimori_anime = await self.shikimori.get_anime(extracted_shikimori_id)
                if shikimori_anime:
                    enriched = await self._enrich_with_kodik(shikimori_anime)
                    return enriched
            
            # Fallback: –ø–æ–∏—Å–∫ –≤ Kodik –ø–æ ID (–µ—Å–ª–∏ —ç—Ç–æ Kodik ID)
            logger.info(f"Fallback –ø–æ–∏—Å–∫ –≤ Kodik: {anime_id}")
            kodik_results = await self.kodik.search_by_title("")  # –ü–æ–ª—É—á–∞–µ–º –ª—é–±—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if kodik_results and kodik_results.get('results'):
                for anime in kodik_results['results']:
                    if anime.get('id') == anime_id:
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç Kodik –≤ –Ω–∞—à
                        return self._convert_kodik_only_format(anime)
                        
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∞–Ω–∏–º–µ: {e}")
            return None
    
    async def get_anime_episodes(self, anime_id: str, kodik_id: Optional[str] = None) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–ø–∏–∑–æ–¥–æ–≤ –∞–Ω–∏–º–µ"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º Kodik ID
            target_kodik_id = kodik_id
            
            if not target_kodik_id:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ Shikimori ID
                if anime_id.startswith('shiki_'):
                    shikimori_id = anime_id.replace('shiki_', '')
                    kodik_data = await self.kodik.search_by_shikimori_id(shikimori_id)
                    if kodik_data and kodik_data.get('results'):
                        target_kodik_id = kodik_data['results'][0].get('id')
                else:
                    target_kodik_id = anime_id
            
            if target_kodik_id:
                episodes = await self.kodik.get_anime_episodes(target_kodik_id)
                return episodes
            
            return []
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ø–∏–∑–æ–¥–æ–≤: {e}")
            return []
    
    async def get_video_link(self, anime_id: str, season: int = 1, episode: int = 1, 
                           kodik_id: Optional[str] = None) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º Kodik ID
            target_kodik_id = kodik_id
            
            if not target_kodik_id:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ Shikimori ID
                if anime_id.startswith('shiki_'):
                    shikimori_id = anime_id.replace('shiki_', '')
                    kodik_data = await self.kodik.search_by_shikimori_id(shikimori_id)
                    if kodik_data and kodik_data.get('results'):
                        target_kodik_id = kodik_data['results'][0].get('id')
                else:
                    target_kodik_id = anime_id
            
            if target_kodik_id:
                link = await self.kodik.get_video_link(target_kodik_id, season, episode)
                return link
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ: {e}")
            return None
    
    async def _enrich_with_kodik(self, shikimori_anime: Dict) -> Dict:
        """–û–±–æ–≥–∞—â–µ–Ω–∏–µ –∞–Ω–∏–º–µ –∏–∑ Shikimori –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Kodik"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cache_key = f"merge_{shikimori_anime['id']}"
            if CACHE_CONFIG["enabled"] and cache_key in self.merge_cache:
                cached_data, timestamp = self.merge_cache[cache_key]
                if time.time() - timestamp < 300:  # 5 –º–∏–Ω—É—Ç –∫–µ—à –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    return cached_data
            
            # –ò—â–µ–º –≤ Kodik –ø–æ shikimori_id
            kodik_results = await self.kodik.search_by_shikimori_id(str(shikimori_anime['id']))
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ID, –ø—Ä–æ–±—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            if not kodik_results or not kodik_results.get('results'):
                title = shikimori_anime.get('russian') or shikimori_anime.get('name', '')
                if title:
                    kodik_results = await self.kodik.search_by_title(title)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            enriched = await self._merge_anime_data(shikimori_anime, kodik_results)
            
            # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if CACHE_CONFIG["enabled"]:
                self.merge_cache[cache_key] = (enriched, time.time())
            
            return enriched
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–∏ –∞–Ω–∏–º–µ {shikimori_anime.get('id')}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ Shikimori
            return convert_shikimori_format(shikimori_anime)
    
    async def _merge_anime_data(self, shikimori_anime: Dict, kodik_results: Optional[Dict]) -> Dict:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Shikimori –∏ Kodik"""
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –¥–∞–Ω–Ω—ã—Ö Shikimori
        merged = convert_shikimori_format(shikimori_anime)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ Kodik –µ—Å–ª–∏ –µ—Å—Ç—å
        if kodik_results and kodik_results.get('results'):
            kodik_anime = kodik_results['results'][0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ Kodik
            kodik_data = extract_kodik_data(kodik_results)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è –∏–∑ Kodik
            merged.update({
                'kodik_id': kodik_data.get('kodik_id'),
                'link': kodik_data.get('link'),
                'translation': kodik_data.get('translation'),
                'quality': kodik_data.get('quality'),
                'episodes_count': kodik_data.get('episodes_count') or merged.get('episodes_count'),
                'seasons': kodik_data.get('seasons'),
                'screenshots': kodik_data.get('screenshots', [])
            })
            
            # *** –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–µ—Ä–æ–≤ ***
            shikimori_poster = merged.get('material_data', {}).get('poster_url', '')
            kodik_material = kodik_anime.get('material_data', {})
            kodik_poster = kodik_material.get('poster_url', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç–µ—Ä Shikimori –Ω–∞ Kodik
            should_replace_poster = (
                # –ï—Å–ª–∏ –ø–æ—Å—Ç–µ—Ä - placeholder
                shikimori_poster.startswith('https://via.placeholder.com') or
                # –ï—Å–ª–∏ –≤ URL –µ—Å—Ç—å "404" (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
                '404' in shikimori_poster.lower() or
                # –ï—Å–ª–∏ –ø–æ—Å—Ç–µ—Ä –ø—É—Å—Ç–æ–π
                not shikimori_poster or
                # –ï—Å–ª–∏ URL —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∏–ø–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –æ—à–∏–±–æ–∫
                any(error_indicator in shikimori_poster.lower() 
                    for error_indicator in ['not_found', 'notfound', 'error', 'missing', 'no+image'])
            )
            
            if should_replace_poster and kodik_poster:
                logger.info(f"–ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –ø–æ—Å—Ç–µ—Ä Shikimori –Ω–∞ Kodik –¥–ª—è –∞–Ω–∏–º–µ {shikimori_anime.get('id')}")
                logger.debug(f"–°—Ç–∞—Ä—ã–π URL: {shikimori_poster}")
                logger.debug(f"–ù–æ–≤—ã–π URL: {kodik_poster}")
                
                merged['material_data']['poster_url'] = kodik_poster
                merged['material_data']['anime_poster_url'] = kodik_poster
            
            # –ï—Å–ª–∏ –ø–æ—Å—Ç–µ—Ä –≤—ã–≥–ª—è–¥–∏—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ –≤—Å–µ –∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            elif shikimori_poster and not shikimori_poster.startswith('https://via.placeholder.com'):
                if not await self._check_image_availability(shikimori_poster):
                    if kodik_poster and await self._check_image_availability(kodik_poster):
                        logger.info(f"HTTP –ø—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ—Å—Ç–µ—Ä Shikimori –Ω–∞ Kodik –¥–ª—è –∞–Ω–∏–º–µ {shikimori_anime.get('id')}")
                        merged['material_data']['poster_url'] = kodik_poster
                        merged['material_data']['anime_poster_url'] = kodik_poster
                    else:
                        logger.warning(f"–ü–æ—Å—Ç–µ—Ä Shikimori –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, Kodik —Ç–∞–∫–∂–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç: {shikimori_anime.get('id')}")
                        merged['material_data']['poster_url'] = 'https://via.placeholder.com/300x400/8B5CF6/FFFFFF?text=–ù–µ—Ç+–ø–æ—Å—Ç–µ—Ä–∞'
                        merged['material_data']['anime_poster_url'] = 'https://via.placeholder.com/300x400/8B5CF6/FFFFFF?text=–ù–µ—Ç+–ø–æ—Å—Ç–µ—Ä–∞'
        
        return merged
    
    def _convert_kodik_only_format(self, kodik_anime: Dict) -> Dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –∏–∑ Kodik –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç"""
        material_data = kodik_anime.get('material_data', {})
        
        return {
            'id': f"kodik_{kodik_anime.get('id')}",
            'kodik_id': kodik_anime.get('id'),
            'shikimori_id': material_data.get('shikimori_id'),
            'title': material_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            'title_orig': material_data.get('title_en', ''),
            'other_title': [],
            'year': material_data.get('year'),
            'type': 'anime',
            'link': kodik_anime.get('link'),
            'translation': kodik_anime.get('translation', {}).get('title', ''),
            'quality': kodik_anime.get('quality'),
            'episodes_count': kodik_anime.get('episodes_count'),
            'last_episode': kodik_anime.get('last_episode'),
            'seasons': kodik_anime.get('seasons'),
            'screenshots': kodik_anime.get('screenshots', []),
            
            'material_data': {
                'title': material_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'title_en': material_data.get('title_en', ''),
                'anime_title': material_data.get('anime_title', material_data.get('title', '')),
                'description': material_data.get('description', ''),
                'anime_description': material_data.get('anime_description', ''),
                'poster_url': material_data.get('poster_url', 'https://via.placeholder.com/300x400/8B5CF6/FFFFFF?text=–ù–µ—Ç+–ø–æ—Å—Ç–µ—Ä–∞'),
                'anime_poster_url': material_data.get('anime_poster_url', material_data.get('poster_url', '')),
                'shikimori_rating': material_data.get('shikimori_rating'),
                'shikimori_votes': material_data.get('shikimori_votes'),
                'anime_kind': material_data.get('anime_kind'),
                'anime_status': material_data.get('anime_status'),
                'all_status': material_data.get('all_status'),
                'anime_genres': material_data.get('anime_genres', []),
                'all_genres': material_data.get('all_genres', []),
                'episodes_total': material_data.get('episodes_total'),
                'episodes_aired': material_data.get('episodes_aired'),
                'anime_studios': material_data.get('anime_studios', []),
                'rating_mpaa': material_data.get('rating_mpaa'),
                'aired_at': material_data.get('aired_at'),
                'released_at': material_data.get('released_at'),
                'year': material_data.get('year')
            }
        }
    
    async def get_alternative_poster(self, anime_id: str, shikimori_id: Optional[str] = None) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–µ—Ä–∞ –æ—Ç Kodik –¥–ª—è –∞–Ω–∏–º–µ"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º shikimori_id –µ—Å–ª–∏ anime_id –∏–º–µ–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å
            target_shikimori_id = shikimori_id
            if not target_shikimori_id and anime_id.startswith('shiki_'):
                target_shikimori_id = anime_id.replace('shiki_', '')
            
            # –ò—â–µ–º –≤ Kodik
            kodik_results = None
            if target_shikimori_id:
                kodik_results = await self.kodik.search_by_shikimori_id(target_shikimori_id)
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ID, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            if not kodik_results or not kodik_results.get('results'):
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∏–º–µ –∏–∑ Shikimori –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                if target_shikimori_id:
                    shikimori_anime = await self.shikimori.get_anime(target_shikimori_id)
                    if shikimori_anime:
                        title = shikimori_anime.get('russian') or shikimori_anime.get('name', '')
                        if title:
                            kodik_results = await self.kodik.search_by_title(title)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if kodik_results and kodik_results.get('results'):
                kodik_anime = kodik_results['results'][0]
                kodik_material = kodik_anime.get('material_data', {})
                kodik_poster = kodik_material.get('poster_url')
                
                if kodik_poster:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–µ—Ä–∞ –æ—Ç Kodik
                    if await self._check_image_availability(kodik_poster):
                        return {
                            'success': True,
                            'poster_url': kodik_poster,
                            'source': 'kodik'
                        }
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ—Å—Ç–µ—Ä –æ—Ç Kodik, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º placeholder
            return {
                'success': True,
                'poster_url': 'https://via.placeholder.com/300x400/8B5CF6/FFFFFF?text=–ù–µ—Ç+–ø–æ—Å—Ç–µ—Ä–∞',
                'source': 'placeholder'
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–µ—Ä–∞ –¥–ª—è {anime_id}: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    async def get_poster_stats(self, sample_size: int = 20) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å—Ç–µ—Ä–∞–º (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –≤—ã–±–æ—Ä–∫—É –∞–Ω–∏–º–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            sample_anime = await self.get_popular_anime(sample_size)
            
            stats = {
                'total_checked': 0,
                'shikimori_ok': 0,
                'shikimori_failed': 0,
                'kodik_available': 0,
                'placeholder_used': 0,
                'problems_detected': []
            }
            
            for anime in sample_anime:
                stats['total_checked'] += 1
                poster_url = anime.get('material_data', {}).get('poster_url', '')
                
                if poster_url.startswith('https://via.placeholder.com'):
                    stats['placeholder_used'] += 1
                elif '404' in poster_url.lower() or any(error in poster_url.lower() for error in ['not_found', 'notfound', 'error', 'missing']):
                    stats['shikimori_failed'] += 1
                    stats['problems_detected'].append({
                        'anime': anime.get('title', 'Unknown'),
                        'url': poster_url,
                        'issue': '404 or error indicator in URL'
                    })
                elif poster_url and await self._check_image_availability(poster_url):
                    stats['shikimori_ok'] += 1
                else:
                    stats['shikimori_failed'] += 1
                    stats['problems_detected'].append({
                        'anime': anime.get('title', 'Unknown'),
                        'url': poster_url,
                        'issue': 'HTTP check failed'
                    })
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –æ—Ç Kodik
                    if anime.get('kodik_id'):
                        stats['kodik_available'] += 1
            
            return {
                'success': True,
                'stats': stats
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–µ—Ä–æ–≤: {e}")
            return {'success': False, 'error': str(e)}
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö HTTP –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        await self.shikimori.close()
        await self.kodik.close()
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–µ—à–µ–π"""
        self.shikimori.clear_cache()
        self.kodik.clear_cache()
        self.poster_cache.clear()
        self.merge_cache.clear()
        logger.info("–í—Å–µ –∫–µ—à–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def get_service_stats(self) -> Dict[str, Any]:
        """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        return {
            'shikimori': self.shikimori.get_cache_stats(),
            'kodik': self.kodik.get_cache_stats(),
            'poster_cache_size': len(self.poster_cache),
            'merge_cache_size': len(self.merge_cache)
        }

# ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† =====

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
anime_service = HybridAnimeService()

# ===== –≠–ö–°–ü–û–†–¢ =====

__all__ = [
    "HybridAnimeService", "anime_service"
]