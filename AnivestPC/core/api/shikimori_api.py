"""
üå∏ ANIVEST DESKTOP - SHIKIMORI API
================================
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Shikimori –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–Ω–∏–º–µ
(–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Flask —Å–∞–π—Ç–∞)
"""

import asyncio
import logging
import time
import json
from datetime import datetime
from typing import Optional, List, Dict, Any
import httpx

from config.settings import SHIKIMORI_CONFIG, CACHE_CONFIG

logger = logging.getLogger(__name__)

# ===== –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–ï–ó–û–ù–û–í =====

def get_current_season() -> tuple[str, int]:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞ –∞–Ω–∏–º–µ"""
    now = datetime.now()
    month = now.month
    year = now.year
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∑–æ–Ω –ø–æ –º–µ—Å—è—Ü—É
    if month in [1, 2, 3]:  # –ó–∏–º–∞: –¥–µ–∫–∞–±—Ä—å, —è–Ω–≤–∞—Ä—å, —Ñ–µ–≤—Ä–∞–ª—å
        season = 'winter'
        # –ï—Å–ª–∏ –¥–µ–∫–∞–±—Ä—å, —Ç–æ —ç—Ç–æ –∑–∏–º–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–¥–∞
        if month == 12:
            year += 1
    elif month in [4, 5, 6]:  # –í–µ—Å–Ω–∞: –º–∞—Ä—Ç, –∞–ø—Ä–µ–ª—å, –º–∞–π
        season = 'spring'
    elif month in [7, 8, 9]:  # –õ–µ—Ç–æ: –∏—é–Ω—å, –∏—é–ª—å, –∞–≤–≥—É—Å—Ç
        season = 'summer'
    else:  # –û—Å–µ–Ω—å: —Å–µ–Ω—Ç—è–±—Ä—å, –æ–∫—Ç—è–±—Ä—å, –Ω–æ—è–±—Ä—å
        season = 'fall'
    
    return season, year

def get_season_name_ru(season: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–∑–æ–Ω–∞"""
    season_names = {
        'winter': '–∑–∏–º–Ω–µ–≥–æ',
        'spring': '–≤–µ—Å–µ–Ω–Ω–µ–≥–æ', 
        'summer': '–ª–µ—Ç–Ω–µ–≥–æ',
        'fall': '–æ—Å–µ–Ω–Ω–µ–≥–æ'
    }
    return season_names.get(season, '—Ç–µ–∫—É—â–µ–≥–æ')

def get_season_emoji(season: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–µ–∑–æ–Ω–∞"""
    season_emojis = {
        'winter': '‚ùÑÔ∏è',
        'spring': 'üå∏',
        'summer': '‚òÄÔ∏è', 
        'fall': 'üçÇ'
    }
    return season_emojis.get(season, 'üåü')

# ===== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° API =====

class ShikimoriAPI:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Shikimori API"""
    
    def __init__(self):
        self.base_url = SHIKIMORI_CONFIG["base_url"]
        self.user_agent = SHIKIMORI_CONFIG["user_agent"]
        self.timeout = SHIKIMORI_CONFIG["timeout"]
        self.cache_timeout = SHIKIMORI_CONFIG["cache_timeout"]
        self.rate_limit = SHIKIMORI_CONFIG["rate_limit"]
        
        # –ö–µ—à –∑–∞–ø—Ä–æ—Å–æ–≤
        self.cache = {}
        self.last_request_time = 0
        
        # HTTP –∫–ª–∏–µ–Ω—Ç
        self.client = None
    
    async def _get_client(self) -> httpx.AsyncClient:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.client is None or self.client.is_closed:
            headers = {
                'User-Agent': self.user_agent,
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
            
            self.client = httpx.AsyncClient(
                headers=headers,
                timeout=self.timeout,
                follow_redirects=True
            )
        
        return self.client
    
    async def _rate_limit_delay(self):
        """–ö–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.rate_limit <= 0:
            return
            
        time_since_last = time.time() - self.last_request_time
        min_interval = 1.0 / self.rate_limit
        
        if time_since_last < min_interval:
            delay = min_interval - time_since_last
            await asyncio.sleep(delay)
        
        self.last_request_time = time.time()
    
    async def _make_request(self, endpoint: str, params: Optional[Dict] = None) -> Optional[Dict]:
        """–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Shikimori API"""
        cache_key = f"shiki_{endpoint}_{str(params)}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if CACHE_CONFIG["enabled"] and cache_key in self.cache:
            cached_data, timestamp = self.cache[cache_key]
            if time.time() - timestamp < self.cache_timeout:
                logger.debug(f"Shikimori cache hit: {endpoint}")
                return cached_data
        
        try:
            # –ö–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
            await self._rate_limit_delay()
            
            client = await self._get_client()
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            full_params = {}
            if params:
                full_params.update(params)
            
            url = f"{self.base_url}/{endpoint}"
            logger.info(f"Shikimori request: {url} with params: {full_params}")
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            response = await client.get(url, params=full_params)
            response.raise_for_status()
            
            data = response.json()
            logger.info(f"Shikimori response: {len(data) if isinstance(data, list) else 1} items")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            if isinstance(data, list) and data:
                first_item = data[0]
                logger.debug(f"–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {first_item.get('name')} [{first_item.get('kind')}] - —Ä–µ–π—Ç–∏–Ω–≥: {first_item.get('score')}")
            
            # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if CACHE_CONFIG["enabled"]:
                self.cache[cache_key] = (data, time.time())
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
                if len(self.cache) > CACHE_CONFIG["max_size"]:
                    # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
                    sorted_cache = sorted(self.cache.items(), key=lambda x: x[1][1])
                    for old_key, _ in sorted_cache[:len(self.cache) // 4]:
                        del self.cache[old_key]
            
            return data
            
        except httpx.RequestError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Shikimori API –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
        except httpx.HTTPStatusError as e:
            logger.error(f"HTTP –æ—à–∏–±–∫–∞ Shikimori API: {e.response.status_code}")
            return None
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç Shikimori: {e}")
            return None
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Shikimori API: {e}")
            return None
    
    async def search_anime(self, query: Optional[str] = None, filters: Optional[Dict] = None) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ –≤ Shikimori"""
        params = {
            'limit': 50,
            'censored': 'true'  # –°–∫—Ä—ã–≤–∞–µ–º 18+ –∫–æ–Ω—Ç–µ–Ω—Ç
        }
        
        if query:
            params['search'] = query
            
        if filters:
            # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞—à–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–∞ Shikimori –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if filters.get('genre'):
                # –†—É—Å—Å–∫–∏–µ –∂–∞–Ω—Ä—ã ‚Üí ID –∂–∞–Ω—Ä–æ–≤ –¥–ª—è Shikimori
                genre_mapping = {
                    '–≠–∫—à–µ–Ω': '1',          # Action
                    '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è': '2',    # Adventure
                    '–ö–æ–º–µ–¥–∏—è': '4',        # Comedy
                    '–î—Ä–∞–º–∞': '8',          # Drama
                    '–§—ç–Ω—Ç–µ–∑–∏': '10',       # Fantasy
                    '–†–æ–º–∞–Ω—Ç–∏–∫–∞': '22',     # Romance
                    '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞': '24',    # Sci-Fi
                    '–°–≤–µ—Ä—Ö—ä–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ': '37',  # Supernatural
                    '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ': '40',     # Psychological
                    '–¢—Ä–∏–ª–ª–µ—Ä': '41',       # Thriller
                    '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç—å': '36', # Slice of Life
                    '–®–∫–æ–ª–∞': '23',         # School
                    '–°–ø–æ—Ä—Ç': '30',         # Sports
                    '–í–æ–µ–Ω–Ω–æ–µ': '38',       # Military
                    '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π': '13'   # Historical
                }
                genre = filters['genre']
                mapped_genre = genre_mapping.get(genre)
                if mapped_genre:
                    params['genre'] = mapped_genre
                    logger.debug(f"–ú–∞–ø–ø–∏–Ω–≥ –∂–∞–Ω—Ä–∞: {genre} ‚Üí ID {mapped_genre}")
                    
            if filters.get('type'):
                # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤
                type_mapping = {
                    'tv': 'tv',
                    'movie': 'movie', 
                    'ova': 'ova',
                    'ona': 'ona',
                    'special': 'special'
                }
                filter_type = filters['type']
                if filter_type in type_mapping:
                    params['kind'] = type_mapping[filter_type]
                    
            if filters.get('status'):
                # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤
                status_mapping = {
                    'released': 'released',
                    'ongoing': 'ongoing', 
                    'anons': 'anons'
                }
                if filters['status'] in status_mapping:
                    params['status'] = status_mapping[filters['status']]
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–∑–æ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            if filters.get('season'):
                # –§–æ—Ä–º–∞—Ç: "summer_2025"
                params['season'] = filters['season']
                logger.debug(f"–§–∏–ª—å—Ç—Ä –ø–æ —Å–µ–∑–æ–Ω—É: {filters['season']}")
                    
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≥–æ–¥–æ–≤
            elif filters.get('year_from') and filters.get('year_to'):
                year_from = filters['year_from']
                year_to = filters['year_to']
                
                # –ï—Å–ª–∏ –≥–æ–¥–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º season –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ–¥–∞
                if year_from == year_to:
                    params['season'] = str(year_from)
                    logger.debug(f"–§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É: {year_from}")
            elif filters.get('year_from'):
                # –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥
                params['season'] = f"{filters['year_from']}"
            elif filters.get('year_to'):
                # –¢–æ–ª—å–∫–æ –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥
                params['season'] = f"{filters['year_to']}"
            elif filters.get('year'):
                # –°—Ç–∞—Ä—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä year –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                params['season'] = f"{filters['year']}"
                    
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if 'order' not in params:
            params['order'] = 'popularity'
        
        logger.info(f"–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ: query='{query}', params={params}")
        
        result = await self._make_request('animes', params)
        return result if result else []
    
    async def get_anime(self, anime_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–¥–Ω–æ–º –∞–Ω–∏–º–µ"""
        result = await self._make_request(f'animes/{anime_id}')
        return result
    
    async def get_seasonal_anime(self, season: Optional[str] = None, 
                                year: Optional[int] = None, limit: int = 20) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ —Ç–µ–∫—É—â–µ–≥–æ/—É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞"""
        if not season or not year:
            # –ï—Å–ª–∏ —Å–µ–∑–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π
            season, year = get_current_season()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å—Ç—Ä–æ–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = {
            'limit': limit * 3,  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            'season': f'{season}_{year}',
            'order': 'popularity',
            'censored': 'true',
            'status': 'released,ongoing'  # –¢–æ–ª—å–∫–æ –≤—ã—à–µ–¥—à–∏–µ –∏ –æ–Ω–≥–æ–∏–Ω–≥–∏
        }
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å —Å–µ–∑–æ–Ω–Ω—ã—Ö –∞–Ω–∏–º–µ: {season}_{year}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Shikimori
        all_results = await self._make_request('animes', params)
        
        if not all_results:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ–∑–æ–Ω–Ω—ã–µ –∞–Ω–∏–º–µ, –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–µ–∑–æ–Ω–∞")
            # Fallback: –ø–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω–∏–º–µ —ç—Ç–æ–≥–æ –≥–æ–¥–∞
            fallback_params = {
                'limit': limit * 2,
                'order': 'popularity',
                'censored': 'true',
                'season': str(year)
            }
            all_results = await self._make_request('animes', fallback_params)
        
        if not all_results:
            logger.warning("Fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
            return []
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∞–Ω–∏–º–µ
        filtered_results = []
        for anime in all_results:
            anime_kind = anime.get('kind', '')
            anime_score = float(anime.get('score', 0) or 0)
            scored_by = int(anime.get('scored_by', 0) or 0)
            
            # ‚úÖ –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∞–Ω–∏–º–µ:
            if (anime_kind in ['tv', 'movie', 'ova', 'ona', 'special'] and  # –¢–æ–ª—å–∫–æ –∞–Ω–∏–º–µ
                (anime_score >= 5.0 or scored_by >= 500)):  # –õ–∏–±–æ —Ö–æ—Ä–æ—à–∏–π —Ä–µ–π—Ç–∏–Ω–≥, –ª–∏–±–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                anime['popularity_score'] = (scored_by * 0.1) + (anime_score * 1000)
                filtered_results.append(anime)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        filtered_results.sort(key=lambda x: x.get('popularity_score', 0), reverse=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø –∞–Ω–∏–º–µ
        top_results = filtered_results[:limit]
        
        logger.info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(top_results)} —Å–µ–∑–æ–Ω–Ω—ã—Ö –∞–Ω–∏–º–µ –¥–ª—è {season}_{year}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ø-3 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        for i, anime in enumerate(top_results[:3], 1):
            score = anime.get('score', 'N/A')
            scored_by = anime.get('scored_by', 'N/A')
            kind = anime.get('kind', 'N/A')
            logger.debug(f"#{i}: {anime.get('name')} [{kind}] - –†–µ–π—Ç–∏–Ω–≥: {score}, –û—Ü–µ–Ω–æ–∫: {scored_by}")
        
        return top_results
    
    async def get_popular_anime(self, limit: int = 20) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ –≤—Å–µ—Ö –≤—Ä–µ–º—ë–Ω"""
        params = {
            'limit': limit * 2,  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            'order': 'popularity',
            'censored': 'true'
        }
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å {limit} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Shikimori
        all_results = await self._make_request('animes', params)
        
        if not all_results:
            return []
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ
        filtered_results = []
        for anime in all_results:
            anime_kind = anime.get('kind', '')
            anime_score = float(anime.get('score', 0) or 0)
            scored_by = int(anime.get('scored_by', 0) or 0)
            
            # ‚úÖ –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ:
            if (anime_kind in ['tv', 'movie', 'ova', 'ona', 'special'] and  # –¢–æ–ª—å–∫–æ –∞–Ω–∏–º–µ
                (anime_score >= 6.0 or scored_by >= 1000)):  # –õ–∏–±–æ —Ö–æ—Ä–æ—à–∏–π —Ä–µ–π—Ç–∏–Ω–≥, –ª–∏–±–æ –º–Ω–æ–≥–æ –æ—Ü–µ–Ω–æ–∫
                
                filtered_results.append(anime)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        filtered_results.sort(key=lambda x: (float(x.get('score', 0) or 0), int(x.get('scored_by', 0) or 0)), reverse=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ
        top_results = filtered_results[:limit]
        
        logger.info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(top_results)} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ")
        
        return top_results
    
    async def get_anime_characters(self, anime_id: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∞–Ω–∏–º–µ"""
        result = await self._make_request(f'animes/{anime_id}/characters')
        return result if result else []
    
    async def get_anime_similar(self, anime_id: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö –∞–Ω–∏–º–µ"""
        result = await self._make_request(f'animes/{anime_id}/similar')
        return result if result else []
    
    async def get_anime_screenshots(self, anime_id: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∞–Ω–∏–º–µ"""
        result = await self._make_request(f'animes/{anime_id}/screenshots')
        return result if result else []
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.client and not self.client.is_closed:
            await self.client.aclose()
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞"""
        self.cache.clear()
        logger.info("–ö–µ—à Shikimori API –æ—á–∏—â–µ–Ω")
    
    def get_cache_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞"""
        return {
            "cache_size": len(self.cache),
            "max_size": CACHE_CONFIG["max_size"],
            "cache_timeout": self.cache_timeout,
            "rate_limit": self.rate_limit
        }

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

def extract_year_from_date(date_string: Optional[str]) -> Optional[int]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –∏–∑ –¥–∞—Ç—ã"""
    if date_string:
        try:
            return int(date_string.split('-')[0])
        except:
            pass
    return None

def get_poster_url(shikimori_anime: Dict) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –ø–æ—Å—Ç–µ—Ä–∞ –∏–∑ Shikimori —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    image = shikimori_anime.get('image', {})
    
    if isinstance(image, dict):
        # –ü–æ–ª—É—á–∞–µ–º URL –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–µ–Ω Shikimori –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        poster_url = None
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        for size in ['original', 'preview', 'x96', 'x48']:
            if image.get(size):
                poster_url = image[size]
                break
        
        if poster_url:
            # –ï—Å–ª–∏ URL –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–µ–Ω Shikimori
            if poster_url.startswith('/'):
                poster_url = f"https://shikimori.one{poster_url}"
            elif not poster_url.startswith('http'):
                poster_url = f"https://shikimori.one{poster_url}"
            
            # *** –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ URL —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –æ—à–∏–±–æ–∫ ***
            if any(error_indicator in poster_url.lower() 
                   for error_indicator in ['404', 'not_found', 'notfound', 'error', 'missing', 'no+image']):
                logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–æ–±–ª–µ–º–Ω—ã–π URL –ø–æ—Å—Ç–µ—Ä–∞: {poster_url}")
                return 'https://via.placeholder.com/300x400/8B5CF6/FFFFFF?text=–ù–µ—Ç+–ø–æ—Å—Ç–µ—Ä–∞'
            
            return poster_url
    
    # Fallback –ø–æ—Å—Ç–µ—Ä
    return 'https://via.placeholder.com/300x400/8B5CF6/FFFFFF?text=–ù–µ—Ç+–ø–æ—Å—Ç–µ—Ä–∞'

def convert_shikimori_format(shikimori_anime: Dict) -> Dict:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ Shikimori –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç"""
    # –ú–∞–ø–∏–º –ø–æ–ª—è Shikimori –Ω–∞ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
    converted = {
        'id': f"shiki_{shikimori_anime['id']}",  # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è
        'shikimori_id': shikimori_anime['id'],
        'title': shikimori_anime.get('russian') or shikimori_anime.get('name', ''),
        'title_orig': shikimori_anime.get('name', ''),
        'other_title': shikimori_anime.get('synonyms', []),
        'year': extract_year_from_date(shikimori_anime.get('aired_on')),
        'type': 'anime',
        'link': None,  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ Kodik
        'kodik_id': None,
        'translation': None,
        'quality': None,
        'episodes_count': shikimori_anime.get('episodes'),
        'last_episode': None,
        'seasons': None,
        'screenshots': [],
        
        # –ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —à–∞–±–ª–æ–Ω–∞–º–∏)
        'material_data': {
            'title': shikimori_anime.get('russian') or shikimori_anime.get('name', ''),
            'title_en': shikimori_anime.get('name', ''),
            'anime_title': shikimori_anime.get('russian') or shikimori_anime.get('name', ''),
            'description': shikimori_anime.get('description', ''),
            'anime_description': shikimori_anime.get('description', ''),
            'poster_url': get_poster_url(shikimori_anime),
            'anime_poster_url': get_poster_url(shikimori_anime),
            'shikimori_rating': shikimori_anime.get('score'),
            'shikimori_votes': shikimori_anime.get('scored_by'),
            'anime_kind': shikimori_anime.get('kind'),
            'anime_status': shikimori_anime.get('status'),
            'all_status': shikimori_anime.get('status'),
            'anime_genres': [g['russian'] for g in shikimori_anime.get('genres', []) if g.get('russian')],
            'all_genres': [g['russian'] for g in shikimori_anime.get('genres', []) if g.get('russian')],
            'episodes_total': shikimori_anime.get('episodes'),
            'episodes_aired': shikimori_anime.get('episodes_aired'),
            'anime_studios': [s['name'] for s in shikimori_anime.get('studios', [])],
            'rating_mpaa': shikimori_anime.get('rating'),
            'aired_at': shikimori_anime.get('aired_on'),
            'released_at': shikimori_anime.get('released_on'),
            'year': extract_year_from_date(shikimori_anime.get('aired_on'))
        }
    }
    
    return converted

# ===== –≠–ö–°–ü–û–†–¢ =====

__all__ = [
    "ShikimoriAPI", "get_current_season", "get_season_name_ru", 
    "get_season_emoji", "extract_year_from_date", "get_poster_url",
    "convert_shikimori_format"
]