"""
üóÉÔ∏è ANIVEST DESKTOP - –ú–û–î–ï–õ–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•
======================================
SQLite –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
(–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ Flask —Å–∞–π—Ç–∞)
"""

import sqlite3
import hashlib
from datetime import datetime
from typing import Optional, Dict, List, Any
from dataclasses import dataclass, asdict

# ===== –°–•–ï–ú–´ –ë–î =====

DATABASE_SCHEMA = {
    "users": """
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username VARCHAR(50) UNIQUE NOT NULL,
            email VARCHAR(100) UNIQUE NOT NULL,
            password_hash VARCHAR(255) NOT NULL,
            avatar_url VARCHAR(255),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_active BOOLEAN DEFAULT 1,
            role VARCHAR(20) DEFAULT 'user'
        )
    """,
    
    "comments": """
        CREATE TABLE IF NOT EXISTS comments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            anime_id VARCHAR(100) NOT NULL,
            user_id INTEGER NOT NULL,
            content TEXT NOT NULL,
            is_spoiler BOOLEAN DEFAULT 0,
            rating INTEGER CHECK(rating >= 1 AND rating <= 10),
            episode_number INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            likes INTEGER DEFAULT 0,
            dislikes INTEGER DEFAULT 0,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    """,
    
    "comment_votes": """
        CREATE TABLE IF NOT EXISTS comment_votes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            comment_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            vote_type VARCHAR(10) CHECK(vote_type IN ('like', 'dislike')),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(comment_id, user_id),
            FOREIGN KEY (comment_id) REFERENCES comments (id),
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    """,
    
    "favorites": """
        CREATE TABLE IF NOT EXISTS favorites (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            anime_id VARCHAR(100) NOT NULL,
            anime_title VARCHAR(255),
            anime_poster_url VARCHAR(500),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(user_id, anime_id),
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    """,
    
    "watch_history": """
        CREATE TABLE IF NOT EXISTS watch_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            anime_id VARCHAR(100) NOT NULL,
            anime_title VARCHAR(255),
            anime_poster_url VARCHAR(500),
            episode_number INTEGER DEFAULT 1,
            season_number INTEGER DEFAULT 1,
            watch_time_seconds INTEGER DEFAULT 0,
            total_time_seconds INTEGER DEFAULT 0,
            last_watched TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_completed BOOLEAN DEFAULT 0,
            UNIQUE(user_id, anime_id),
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    """,
    
    "user_settings": """
        CREATE TABLE IF NOT EXISTS user_settings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            setting_key VARCHAR(100) NOT NULL,
            setting_value TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(user_id, setting_key),
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    """
}

# ===== –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• =====

@dataclass
class User:
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    id: Optional[int] = None
    username: str = ""
    email: str = ""
    password_hash: str = ""
    avatar_url: Optional[str] = None
    created_at: Optional[str] = None
    is_active: bool = True
    role: str = "user"
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return asdict(self)
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'User':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        return cls(**data)
    
    def is_admin(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"""
        return self.role == "admin"

@dataclass
class Comment:
    """–ú–æ–¥–µ–ª—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    id: Optional[int] = None
    anime_id: str = ""
    user_id: int = 0
    content: str = ""
    is_spoiler: bool = False
    rating: Optional[int] = None
    episode_number: Optional[int] = None
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
    likes: int = 0
    dislikes: int = 0
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ JOIN
    username: Optional[str] = None
    avatar_url: Optional[str] = None
    user_role: Optional[str] = None
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return asdict(self)
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Comment':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        return cls(**{k: v for k, v in data.items() if k in cls.__annotations__})
    
    def is_valid(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        if not self.content or len(self.content.strip()) < 10:
            return False
        if self.rating and (self.rating < 1 or self.rating > 10):
            return False
        return True

@dataclass  
class Favorite:
    """–ú–æ–¥–µ–ª—å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–Ω–∏–º–µ"""
    id: Optional[int] = None
    user_id: int = 0
    anime_id: str = ""
    anime_title: Optional[str] = None
    anime_poster_url: Optional[str] = None
    created_at: Optional[str] = None
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return asdict(self)
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Favorite':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        return cls(**data)

@dataclass
class WatchHistory:
    """–ú–æ–¥–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    id: Optional[int] = None
    user_id: int = 0
    anime_id: str = ""
    anime_title: Optional[str] = None
    anime_poster_url: Optional[str] = None
    episode_number: int = 1
    season_number: int = 1
    watch_time_seconds: int = 0
    total_time_seconds: int = 0
    last_watched: Optional[str] = None
    is_completed: bool = False
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return asdict(self)
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'WatchHistory':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        return cls(**data)
    
    def get_progress_percent(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        if self.total_time_seconds <= 0:
            return 0.0
        return min(100.0, (self.watch_time_seconds / self.total_time_seconds) * 100)

@dataclass
class UserSetting:
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    id: Optional[int] = None
    user_id: int = 0
    setting_key: str = ""
    setting_value: Optional[str] = None
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return asdict(self)
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'UserSetting':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        return cls(**data)

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

def hash_password(password: str) -> str:
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    return hashlib.sha256(password.encode()).hexdigest()

def verify_password(password: str, password_hash: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
    return hash_password(password) == password_hash

def validate_email(email: str) -> bool:
    """–ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email"""
    return "@" in email and "." in email.split("@")[1]

def validate_username(username: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return len(username) >= 3 and username.isalnum()

def format_datetime(dt_string: Optional[str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not dt_string:
        return ""
    
    try:
        dt = datetime.fromisoformat(dt_string)
        return dt.strftime("%d.%m.%Y %H:%M")
    except:
        return dt_string

def format_relative_time(dt_string: Optional[str]) -> str:
    """–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥')"""
    if not dt_string:
        return ""
    
    try:
        dt = datetime.fromisoformat(dt_string)
        now = datetime.now()
        diff = now - dt
        
        if diff.days > 0:
            return f"{diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
        elif diff.seconds >= 3600:
            hours = diff.seconds // 3600
            return f"{hours} —á. –Ω–∞–∑–∞–¥"
        elif diff.seconds >= 60:
            minutes = diff.seconds // 60
            return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
        else:
            return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
    except:
        return dt_string

# ===== –ö–û–ù–°–¢–ê–ù–¢–´ =====

class UserRole:
    """–†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    USER = "user"
    MODERATOR = "moderator"
    ADMIN = "admin"

class VoteType:
    """–¢–∏–ø—ã –≥–æ–ª–æ—Å–æ–≤"""
    LIKE = "like"
    DISLIKE = "dislike"

class WatchStatus:
    """–°—Ç–∞—Ç—É—Å—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    WATCHING = "watching"
    COMPLETED = "completed"
    PLAN_TO_WATCH = "plan_to_watch"
    DROPPED = "dropped"
    ON_HOLD = "on_hold"

# ===== –≠–ö–°–ü–û–†–¢ =====

__all__ = [
    "DATABASE_SCHEMA", "User", "Comment", "Favorite", "WatchHistory", 
    "UserSetting", "hash_password", "verify_password", "validate_email",
    "validate_username", "format_datetime", "format_relative_time",
    "UserRole", "VoteType", "WatchStatus"
]