"""
üóÉÔ∏è ANIVEST DESKTOP - –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ó–û–ô –î–ê–ù–ù–´–•
===========================================
SQLite –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
(–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Flask —Å–∞–π—Ç–∞)
"""

import sqlite3
import logging
import asyncio
from datetime import datetime
from typing import Optional, List, Dict, Any, Tuple
from pathlib import Path
import json

from config.settings import DATABASE_CONFIG
from .models import (
    DATABASE_SCHEMA, User, Comment, Favorite, WatchHistory, UserSetting,
    hash_password, verify_password, validate_email, validate_username
)

logger = logging.getLogger(__name__)

# ===== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–î =====

class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite"""
    
    def __init__(self, db_path: Optional[str] = None):
        self.db_path = db_path or DATABASE_CONFIG["path"]
        self._ensure_db_directory()
        self.init_db()
    
    def _ensure_db_directory(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ë–î –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        db_dir = Path(self.db_path).parent
        db_dir.mkdir(parents=True, exist_ok=True)
    
    def get_connection(self) -> sqlite3.Connection:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
        conn = sqlite3.connect(
            self.db_path,
            timeout=DATABASE_CONFIG.get("timeout", 30),
            check_same_thread=DATABASE_CONFIG.get("check_same_thread", False)
        )
        conn.row_factory = sqlite3.Row  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–æ–ª–±—Ü–∞–º –ø–æ –∏–º–µ–Ω–∏
        return conn
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
                for table_name, schema in DATABASE_SCHEMA.items():
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
                    cursor.execute(schema)
                
                conn.commit()
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            raise

    # ===== –û–ü–ï–†–ê–¶–ò–ò –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò =====
    
    def create_user(self, username: str, email: str, password: str, 
                   avatar_url: Optional[str] = None) -> Optional[int]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not validate_username(username):
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            if not validate_email(email):
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email")
            if len(password) < 6:
                raise ValueError("–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
            
            password_hash = hash_password(password)
            
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
                existing = cursor.execute(
                    "SELECT id FROM users WHERE username = ? OR email = ?",
                    (username, email)
                ).fetchone()
                
                if existing:
                    raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute(
                    """INSERT INTO users (username, email, password_hash, avatar_url)
                       VALUES (?, ?, ?, ?)""",
                    (username, email, password_hash, avatar_url)
                )
                
                user_id = cursor.lastrowid
                conn.commit()
                
                logger.info(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})")
                return user_id
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            raise
    
    def authenticate_user(self, username: str, password: str) -> Optional[User]:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                user_row = cursor.execute(
                    "SELECT * FROM users WHERE username = ? OR email = ?",
                    (username, username)
                ).fetchone()
                
                if not user_row:
                    return None
                
                user_dict = dict(user_row)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
                if not verify_password(password, user_dict["password_hash"]):
                    return None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                if not user_dict["is_active"]:
                    raise ValueError("–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                
                user = User.from_dict(user_dict)
                logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {user.username}")
                return user
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            raise
    
    def get_user_by_id(self, user_id: int) -> Optional[User]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                user_row = cursor.execute(
                    "SELECT * FROM users WHERE id = ?", (user_id,)
                ).fetchone()
                
                if user_row:
                    return User.from_dict(dict(user_row))
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
    
    def update_user(self, user_id: int, **kwargs) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            allowed_fields = ["username", "email", "avatar_url", "is_active", "role"]
            update_fields = {k: v for k, v in kwargs.items() if k in allowed_fields}
            
            if not update_fields:
                return False
            
            # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
            if "password" in kwargs:
                update_fields["password_hash"] = hash_password(kwargs["password"])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º SQL
            set_clause = ", ".join([f"{k} = ?" for k in update_fields.keys()])
            values = list(update_fields.values()) + [user_id]
            
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(
                    f"UPDATE users SET {set_clause} WHERE id = ?", values
                )
                conn.commit()
                
                return cursor.rowcount > 0
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False

    # ===== –û–ü–ï–†–ê–¶–ò–ò –° –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø–ú–ò =====
    
    def add_comment(self, anime_id: str, user_id: int, content: str,
                   is_spoiler: bool = False, rating: Optional[int] = None,
                   episode_number: Optional[int] = None) -> Optional[int]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        try:
            comment = Comment(
                anime_id=anime_id,
                user_id=user_id,
                content=content.strip(),
                is_spoiler=is_spoiler,
                rating=rating,
                episode_number=episode_number
            )
            
            if not comment.is_valid():
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
            
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —ç—Ç–æ–º—É —ç–ø–∏–∑–æ–¥—É
                if episode_number:
                    existing = cursor.execute(
                        """SELECT id FROM comments 
                           WHERE user_id = ? AND anime_id = ? AND episode_number = ?""",
                        (user_id, anime_id, episode_number)
                    ).fetchone()
                    
                    if existing:
                        raise ValueError("–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —ç—Ç–æ–º—É —ç–ø–∏–∑–æ–¥—É")
                
                cursor.execute(
                    """INSERT INTO comments 
                       (anime_id, user_id, content, is_spoiler, rating, episode_number)
                       VALUES (?, ?, ?, ?, ?, ?)""",
                    (anime_id, user_id, content, is_spoiler, rating, episode_number)
                )
                
                comment_id = cursor.lastrowid
                conn.commit()
                
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID: {comment_id}")
                return comment_id
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            raise
    
    def get_comments(self, anime_id: str, episode: Optional[int] = None,
                    show_spoilers: bool = False, sort_by: str = "newest",
                    limit: int = 50) -> List[Comment]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∞–Ω–∏–º–µ"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å JOIN –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                query = """
                    SELECT c.*, u.username, u.avatar_url, u.role as user_role,
                           COUNT(CASE WHEN cv.vote_type = 'like' THEN 1 END) as likes,
                           COUNT(CASE WHEN cv.vote_type = 'dislike' THEN 1 END) as dislikes
                    FROM comments c
                    LEFT JOIN users u ON c.user_id = u.id
                    LEFT JOIN comment_votes cv ON c.id = cv.comment_id
                    WHERE c.anime_id = ?
                """
                params = [anime_id]
                
                # –§–∏–ª—å—Ç—Ä –ø–æ —ç–ø–∏–∑–æ–¥—É
                if episode:
                    query += " AND c.episode_number = ?"
                    params.append(episode)
                
                # –§–∏–ª—å—Ç—Ä —Å–ø–æ–π–ª–µ—Ä–æ–≤
                if not show_spoilers:
                    query += " AND c.is_spoiler = 0"
                
                query += " GROUP BY c.id"
                
                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                if sort_by == "oldest":
                    query += " ORDER BY c.created_at ASC"
                elif sort_by == "rating":
                    query += " ORDER BY (likes - dislikes) DESC, c.created_at DESC"
                else:  # newest
                    query += " ORDER BY c.created_at DESC"
                
                query += f" LIMIT {limit}"
                
                rows = cursor.execute(query, params).fetchall()
                
                comments = []
                for row in rows:
                    comment_dict = dict(row)
                    comment = Comment.from_dict(comment_dict)
                    comments.append(comment)
                
                return comments
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
            return []
    
    def vote_comment(self, comment_id: int, user_id: int, vote_type: str) -> bool:
        """–õ–∞–π–∫/–¥–∏–∑–ª–∞–π–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        try:
            if vote_type not in ["like", "dislike"]:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≥–æ–ª–æ—Å–∞")
            
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                comment_exists = cursor.execute(
                    "SELECT id FROM comments WHERE id = ?", (comment_id,)
                ).fetchone()
                
                if not comment_exists:
                    raise ValueError("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ–ª–æ—Å
                existing_vote = cursor.execute(
                    "SELECT vote_type FROM comment_votes WHERE comment_id = ? AND user_id = ?",
                    (comment_id, user_id)
                ).fetchone()
                
                if existing_vote:
                    if existing_vote["vote_type"] == vote_type:
                        # –£–±–∏—Ä–∞–µ–º –≥–æ–ª–æ—Å
                        cursor.execute(
                            "DELETE FROM comment_votes WHERE comment_id = ? AND user_id = ?",
                            (comment_id, user_id)
                        )
                    else:
                        # –ú–µ–Ω—è–µ–º –≥–æ–ª–æ—Å
                        cursor.execute(
                            "UPDATE comment_votes SET vote_type = ? WHERE comment_id = ? AND user_id = ?",
                            (vote_type, comment_id, user_id)
                        )
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å
                    cursor.execute(
                        "INSERT INTO comment_votes (comment_id, user_id, vote_type) VALUES (?, ?, ?)",
                        (comment_id, user_id, vote_type)
                    )
                
                conn.commit()
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def delete_comment(self, comment_id: int, user_id: int, is_admin: bool = False) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
                comment_row = cursor.execute(
                    "SELECT user_id FROM comments WHERE id = ?", (comment_id,)
                ).fetchone()
                
                if not comment_row:
                    raise ValueError("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å
                if comment_row["user_id"] != user_id and not is_admin:
                    raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
                
                # –£–¥–∞–ª—è–µ–º –≥–æ–ª–æ—Å–∞
                cursor.execute("DELETE FROM comment_votes WHERE comment_id = ?", (comment_id,))
                
                # –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                cursor.execute("DELETE FROM comments WHERE id = ?", (comment_id,))
                
                conn.commit()
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            return False

    # ===== –û–ü–ï–†–ê–¶–ò–ò –° –ò–ó–ë–†–ê–ù–ù–´–ú =====
    
    def add_to_favorites(self, user_id: int, anime_id: str, 
                        anime_title: str, anime_poster_url: str = "") -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute(
                    """INSERT OR REPLACE INTO favorites 
                       (user_id, anime_id, anime_title, anime_poster_url)
                       VALUES (?, ?, ?, ?)""",
                    (user_id, anime_id, anime_title, anime_poster_url)
                )
                
                conn.commit()
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
            return False
    
    def remove_from_favorites(self, user_id: int, anime_id: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute(
                    "DELETE FROM favorites WHERE user_id = ? AND anime_id = ?",
                    (user_id, anime_id)
                )
                
                conn.commit()
                return cursor.rowcount > 0
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
            return False
    
    def get_user_favorites(self, user_id: int) -> List[Favorite]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                rows = cursor.execute(
                    "SELECT * FROM favorites WHERE user_id = ? ORDER BY created_at DESC",
                    (user_id,)
                ).fetchall()
                
                return [Favorite.from_dict(dict(row)) for row in rows]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
            return []
    
    def is_in_favorites(self, user_id: int, anime_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                result = cursor.execute(
                    "SELECT id FROM favorites WHERE user_id = ? AND anime_id = ?",
                    (user_id, anime_id)
                ).fetchone()
                
                return result is not None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
            return False

    # ===== –û–ü–ï–†–ê–¶–ò–ò –° –ò–°–¢–û–†–ò–ï–ô –ü–†–û–°–ú–û–¢–†–ê =====
    
    def update_watch_progress(self, user_id: int, anime_id: str, anime_title: str,
                            anime_poster_url: str = "", episode_number: int = 1,
                            season_number: int = 1, watch_time_seconds: int = 0,
                            total_time_seconds: int = 0) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å
                is_completed = False
                if total_time_seconds > 0:
                    progress = watch_time_seconds / total_time_seconds
                    is_completed = progress >= 0.95  # 95% —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º
                
                cursor.execute(
                    """INSERT OR REPLACE INTO watch_history 
                       (user_id, anime_id, anime_title, anime_poster_url, 
                        episode_number, season_number, watch_time_seconds, 
                        total_time_seconds, is_completed, last_watched)
                       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)""",
                    (user_id, anime_id, anime_title, anime_poster_url,
                     episode_number, season_number, watch_time_seconds,
                     total_time_seconds, is_completed)
                )
                
                conn.commit()
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            return False
    
    def get_user_watch_history(self, user_id: int, limit: int = 50) -> List[WatchHistory]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                rows = cursor.execute(
                    """SELECT * FROM watch_history 
                       WHERE user_id = ? 
                       ORDER BY last_watched DESC 
                       LIMIT ?""",
                    (user_id, limit)
                ).fetchall()
                
                return [WatchHistory.from_dict(dict(row)) for row in rows]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
            return []
    
    def get_watch_progress(self, user_id: int, anime_id: str) -> Optional[WatchHistory]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–Ω–∏–º–µ"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                row = cursor.execute(
                    "SELECT * FROM watch_history WHERE user_id = ? AND anime_id = ?",
                    (user_id, anime_id)
                ).fetchone()
                
                if row:
                    return WatchHistory.from_dict(dict(row))
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            return None

    # ===== –û–ü–ï–†–ê–¶–ò–ò –° –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò =====
    
    def set_user_setting(self, user_id: int, key: str, value: Any) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ JSON —Å—Ç—Ä–æ–∫—É
            value_str = json.dumps(value) if value is not None else None
            
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute(
                    """INSERT OR REPLACE INTO user_settings 
                       (user_id, setting_key, setting_value, updated_at)
                       VALUES (?, ?, ?, CURRENT_TIMESTAMP)""",
                    (user_id, key, value_str)
                )
                
                conn.commit()
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            return False
    
    def get_user_setting(self, user_id: int, key: str, default: Any = None) -> Any:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                row = cursor.execute(
                    "SELECT setting_value FROM user_settings WHERE user_id = ? AND setting_key = ?",
                    (user_id, key)
                ).fetchone()
                
                if row and row["setting_value"] is not None:
                    return json.loads(row["setting_value"])
                return default
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            return default
    
    def get_all_user_settings(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                rows = cursor.execute(
                    "SELECT setting_key, setting_value FROM user_settings WHERE user_id = ?",
                    (user_id,)
                ).fetchall()
                
                settings = {}
                for row in rows:
                    key = row["setting_key"]
                    value = row["setting_value"]
                    try:
                        settings[key] = json.loads(value) if value else None
                    except:
                        settings[key] = value
                
                return settings
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return {}

    # ===== –°–õ–£–ñ–ï–ë–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    def cleanup_old_data(self, days: int = 30):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
                cursor.execute(
                    """DELETE FROM comment_votes 
                       WHERE created_at < datetime('now', '-{} days')""".format(days)
                )
                
                conn.commit()
                logger.info(f"–û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π)")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def get_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                stats = {}
                tables = ["users", "comments", "favorites", "watch_history"]
                
                for table in tables:
                    count = cursor.execute(f"SELECT COUNT(*) FROM {table}").fetchone()[0]
                    stats[table] = count
                
                return stats
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

# ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† =====

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
db_manager = DatabaseManager()

# ===== –≠–ö–°–ü–û–†–¢ =====

__all__ = [
    "DatabaseManager", "db_manager"
]